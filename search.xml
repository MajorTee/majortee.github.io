<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo-Typography-本地搜索</title>
      <link href="/2020/02/16/hexo-Typography-%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2/"/>
      <url>/2020/02/16/hexo-Typography-%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo第二次折腾笔记"><a href="#Hexo第二次折腾笔记" class="headerlink" title="Hexo第二次折腾笔记"></a>Hexo第二次折腾笔记</h1><h2 id="Hexo-Typography-本地搜索"><a href="#Hexo-Typography-本地搜索" class="headerlink" title="Hexo-Typography-本地搜索"></a>Hexo-Typography-本地搜索</h2><h3 id="Typography主题按照README-md安装"><a href="#Typography主题按照README-md安装" class="headerlink" title="Typography主题按照README.md安装"></a>Typography主题按照README.md安装</h3><blockquote><p><a href="https://github.com/SumiMakito/hexo-theme-typography" target="_blank" rel="noopener">主题官方</a></p><p>ajax 搜索配置修改自 <a href="https://github.com/barretlee/hexo-search-plugin-snippets" target="_blank" rel="noopener">github</a></p></blockquote><h3 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h3><pre class="line-numbers language-yml"><code class="language-yml">npm install --save hexo-generator-search在站点主配置文件 _config.yml 当中写入如下配置，即可为全站的文档生成索引文件search:  path: search.xml  field: post  format: html  limit: 10000plugin:  ...  - hexo-toc  # 添加插件  - hexo-generator-search<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>此配置特别针对Typography主题</strong></p><a id="more"></a><ol><li>保存为 search.js 存入 \themes\typography\source\js 文件夹</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> searchFunc <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>path<span class="token punctuation">,</span> search_id<span class="token punctuation">,</span> content_id<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token string">'use strict'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> BTN <span class="token operator">=</span> <span class="token string">"&lt;i id='local-search-close'>—&lt;/i>"</span><span class="token punctuation">;</span>  $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> path<span class="token punctuation">,</span>    dataType<span class="token punctuation">:</span> <span class="token string">"xml"</span><span class="token punctuation">,</span>    success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>xmlResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// get the contents from search data</span>      <span class="token keyword">var</span> datas <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"entry"</span><span class="token punctuation">,</span> xmlResponse<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          title<span class="token punctuation">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          content<span class="token punctuation">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          url<span class="token punctuation">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> $input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>search_id<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> $resultContent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>content_id<span class="token punctuation">)</span><span class="token punctuation">;</span>      $input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'&lt;ul class=\"search-result-list\">'</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> keywords <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/[\s\-]+/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        $resultContent<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// perform local searching</span>        datas<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> isMatch <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          <span class="token keyword">var</span> data_title <span class="token operator">=</span> data<span class="token punctuation">.</span>title<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">var</span> data_content <span class="token operator">=</span> data<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/&lt;[^>]+>/g</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">var</span> data_url <span class="token operator">=</span> data<span class="token punctuation">.</span>url<span class="token punctuation">;</span>          <span class="token keyword">var</span> index_title <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">var</span> index_content <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">var</span> first_occur <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// only match artiles with not empty contents</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>data_content <span class="token operator">!==</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            keywords<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>keyword<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>              index_title <span class="token operator">=</span> data_title<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span><span class="token punctuation">;</span>              index_content <span class="token operator">=</span> data_content<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>index_title <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index_content <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                isMatch <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>index_content <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  index_content <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  first_occur <span class="token operator">=</span> index_content<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// content_index.push({index_content:index_content, keyword_len:keyword_len});</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            isMatch <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// show search results</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>isMatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>            str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"&lt;li>&lt;a href='"</span> <span class="token operator">+</span> data_url <span class="token operator">+</span> <span class="token string">"' class='search-result-title'>"</span> <span class="token operator">+</span> data_title <span class="token operator">+</span> <span class="token string">"&lt;/a>"</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> content <span class="token operator">=</span> data<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/&lt;[^>]+>/g</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>first_occur <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// cut out 100 characters</span>              <span class="token keyword">var</span> start <span class="token operator">=</span> first_occur <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">;</span>              <span class="token keyword">var</span> end <span class="token operator">=</span> first_occur <span class="token operator">+</span> <span class="token number">80</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                end <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">></span> content<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                end <span class="token operator">=</span> content<span class="token punctuation">.</span>length<span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">var</span> match_content <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// highlight all keywords</span>              keywords<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>keyword<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> regS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>keyword<span class="token punctuation">,</span> <span class="token string">"gi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                match_content <span class="token operator">=</span> match_content<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regS<span class="token punctuation">,</span> <span class="token string">"&lt;em class=\"search-keyword\">"</span> <span class="token operator">+</span> keyword <span class="token operator">+</span> <span class="token string">"&lt;/em>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"&lt;p class=\"search-result\">"</span> <span class="token operator">+</span> match_content <span class="token operator">+</span> <span class="token string">"...&lt;/p>"</span>            <span class="token punctuation">}</span>            str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"&lt;/li>"</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"&lt;/ul>"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'&lt;li>'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> $resultContent<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> BTN <span class="token operator">+</span> <span class="token string">"&lt;ul>&lt;span class='local-search-empty'>没有找到内容，更换下搜索词试试吧~&lt;span>&lt;/ul>"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        $resultContent<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> BTN <span class="token operator">+</span> str<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token string">'#local-search-close'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#local-search-input'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#local-search-result'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token string">"../search.xml"</span><span class="token punctuation">;</span><span class="token function">searchFunc</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">'local-search-input'</span><span class="token punctuation">,</span> <span class="token string">'local-search-result'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>在layout.jade文件引入</li></ol><pre class="line-numbers language-jade"><code class="language-jade"><span class="token tag">script<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">src</span><span class="token punctuation">=</span> <span class="token attr-value"><span class="token function">url_for</span><span class="token punctuation">(</span><span class="token string">'js/google-analytics.js'</span></span><span class="token punctuation">)</span></span></span>)<span class="token tag">script<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">src</span><span class="token punctuation">=</span> <span class="token attr-value"><span class="token function">url_for</span><span class="token punctuation">(</span><span class="token string">'js/typography.js'</span></span><span class="token punctuation">)</span></span></span>)<span class="token comment" spellcheck="true">// 引入js文件</span><span class="token tag">script<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">src</span><span class="token punctuation">=</span> <span class="token attr-value"><span class="token function">url_for</span><span class="token punctuation">(</span><span class="token string">'js/search.js'</span></span><span class="token punctuation">)</span></span></span>)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>nav.jade文件加入搜索框</li></ol><pre class="line-numbers language-jade"><code class="language-jade"><span class="token tag">div#site-nav.site-title-links</span>    <span class="token tag">section</span>        <span class="token tag">a<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">href</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">'#'</span></span><span class="token punctuation">)</span></span></span> <span class="token plain-text">站内搜索</span>        <span class="token tag">#site_search</span>            <span class="token tag">span.local-search.local-search-google.local-search-plugin<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">style</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">'&lt;%- wrapStyle %>'</span></span><span class="token punctuation">)</span></span></span>                <span class="token tag">input#local-search-input.local-search-input-cls<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">type</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">'search'</span></span><span class="token punctuation">,</span> <span class="token attr-name">style</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">'&lt;%- inputStyle %>'</span></span><span class="token punctuation">)</span></span></span>                <span class="token tag">#local-search-result.local-search-result-cls</span>    <span class="token tag">ul</span>        <span class="token tag">li</span>            <span class="token flow-control"><span class="token branch keyword">if</span> <span class="token function">is_home</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>                <span class="token tag">a.current<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">href</span><span class="token punctuation">=</span><span class="token attr-value">config<span class="token punctuation">.</span>root</span><span class="token punctuation">)</span></span></span><span class="token punctuation">=</span><span class="token code"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'Home'</span><span class="token punctuation">)</span></span>            <span class="token flow-control"><span class="token branch keyword">else</span></span>                <span class="token tag">a<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">href</span><span class="token punctuation">=</span><span class="token attr-value">config<span class="token punctuation">.</span>root</span><span class="token punctuation">)</span></span></span><span class="token punctuation">=</span><span class="token code"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'Home'</span><span class="token punctuation">)</span></span>                <span class="token punctuation">....</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>修改定制 style.scss</li></ol><pre class="line-numbers language-scss"><code class="language-scss"><span class="token comment" spellcheck="true">// 首先在side-container修改加入将搜索框置顶</span><span class="token selector">.side-container </span><span class="token punctuation">{</span>  <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">9999</span><span class="token punctuation">;</span>  <span class="token number">...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 直接在末尾加入</span><span class="token comment" spellcheck="true">// 搜索框</span><span class="token selector">.local-search </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.local-search-input-cls </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">8</span>px <span class="token number">12</span>px<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">4</span>px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#CCC</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#666</span><span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#local-search-close </span><span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'-'</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">290</span>px<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#888</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> consolas<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#CCC</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>  <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">0.3</span>s<span class="token punctuation">;</span>  <span class="token selector"><span class="token parent important">&amp;</span>:hover </span><span class="token punctuation">{</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token hexcode">#666</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#222</span><span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">0.3</span>s<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">.local-search-result-cls </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">99</span> <span class="token important">!important</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> -<span class="token number">1</span>px<span class="token punctuation">;</span>  <span class="token selector">.local-search-empty </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#888</span><span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">44</span>px<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">ul </span><span class="token punctuation">{</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">99</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">max-height</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>    <span class="token property">min-height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">overflow-y</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#CCC</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#FFF</span><span class="token punctuation">;</span>    <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">1</span>px <span class="token number">2</span>px <span class="token number">4</span>px <span class="token hexcode">#CCC</span><span class="token punctuation">;</span>    <span class="token selector">li </span><span class="token punctuation">{</span>      <span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>      <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#CCC</span><span class="token punctuation">;</span>      <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>      <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>      <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>      <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>      <span class="token selector"><span class="token parent important">&amp;</span>:last-child </span><span class="token punctuation">{</span>        <span class="token property">border-bottom</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector">a </span><span class="token punctuation">{</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">18</span>px<span class="token punctuation">;</span>        <span class="token property">text-decoration</span><span class="token punctuation">:</span> underline<span class="token punctuation">;</span>        <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector">p </span><span class="token punctuation">{</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>        <span class="token property">max-height</span><span class="token punctuation">:</span> <span class="token number">124</span>px<span class="token punctuation">;</span>        <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector">em.search-keyword </span><span class="token punctuation">{</span>        <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#e95d44</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">.local-search-plugin </span><span class="token punctuation">{</span>  <span class="token selector">.local-search-input-cls </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">160</span>px<span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">0.3</span>s<span class="token punctuation">;</span>    <span class="token selector"><span class="token parent important">&amp;</span>:hover </span><span class="token punctuation">{</span>      <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>      <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">0.3</span>s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token selector">.icon </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> -<span class="token number">30</span>px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#999</span><span class="token punctuation">;</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>scss文件可自由修改配置</p><ol start="5"><li>生成css</li></ol><pre class="line-numbers language-shell"><code class="language-shell">cd themes\typography\npm run build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="6"><li>部署</li></ol><pre class="line-numbers language-shell"><code class="language-shell">hexo cleanhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="鼠标特效"><a href="#鼠标特效" class="headerlink" title="鼠标特效"></a>鼠标特效</h3><p>来自<a href="https://github.com/journey-ad" target="_blank" rel="noopener">journey-ad</a>   <strong>raw/js/cursor-effects.js</strong></p><h2 id="Hexo-迁移"><a href="#Hexo-迁移" class="headerlink" title="Hexo 迁移"></a>Hexo 迁移</h2><p>将下面的文件或文件夹复制到新的博客目录下进行替换</p><pre class="line-numbers language-shell"><code class="language-shell"> _config.yml package.json  scaffolds/  source/ themes/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装所需模块</p><p>避免下载缓慢可以先换源</p><pre class="line-numbers language-shell"><code class="language-shell">npm install -g hexocd blognpm install本地测试的时候需要用hexo servernpm i hexo-server将文章部署到github上的模块npm install hexo-deployer-git --savegit 账户配置与第一次安装一样<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django</title>
      <link href="/2020/02/10/Django%E5%92%8CMysql%E9%97%AE%E9%A2%98/"/>
      <url>/2020/02/10/Django%E5%92%8CMysql%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h1><pre class="line-numbers language-shell"><code class="language-shell">django-admin startproject graduaProj   cd graduaProj #创建应用python manage.py startapp show_data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>views.py: 接受请求，进行处理，与M和T进行交互，返回应答。定义处理函数，视图函数</p><p>tests.py: 测试代码</p><p>admin.py: 网站后台管理</p><p>建立应用和项目之间的联系，需要对应用进行注册。</p><p>修改settings.py中的INSTALLED_APPS配置项。</p><p>workon进入虚拟环境，输入which python，得到地址，可以在pycharm中添加，使用此虚拟环境</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#生成迁移文件</span>python manage<span class="token punctuation">.</span>py makemigrations<span class="token comment" spellcheck="true">#执行迁移生成数据表</span>python manage<span class="token punctuation">.</span>py migrate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a><h1 id="varchar作主键（不建议）时大小写区分"><a href="#varchar作主键（不建议）时大小写区分" class="headerlink" title="varchar作主键（不建议）时大小写区分"></a>varchar作主键（不建议）时大小写区分</h1><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>gradua_proj<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>store_id<span class="token punctuation">`</span>   CHANGE <span class="token keyword">COLUMN</span> <span class="token punctuation">`</span>goods_id<span class="token punctuation">`</span> <span class="token punctuation">`</span>goods_id<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> <span class="token string">'utf8'</span> <span class="token keyword">BINARY</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="superuser"><a href="#superuser" class="headerlink" title="superuser"></a>superuser</h1><pre class="line-numbers language-shell"><code class="language-shell">python manage.py runserver admin                                                                           电子邮件地址: admin@admin.com          adminhttp://127.0.0.1:8000/admin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>admin.py 注册模型类</p><p>Django 查询不区分大小写，可以直接通过extra方法，或者修改数据库列字符集为utf8 和 utf8_bin</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python虚拟环境</title>
      <link href="/2020/02/10/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
      <url>/2020/02/10/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="python虚拟环境"><a href="#python虚拟环境" class="headerlink" title="python虚拟环境"></a>python虚拟环境</h1><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><pre class="line-numbers language-shell"><code class="language-shell">pip3 install virtualenv virtualenvwrapper<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><a id="more"></a><h2 id="找不到-virtualenvwrapper-sh"><a href="#找不到-virtualenvwrapper-sh" class="headerlink" title="找不到 virtualenvwrapper.sh"></a>找不到 virtualenvwrapper.sh</h2><pre class="line-numbers language-shell"><code class="language-shell">find / -name virtualenvwrapper.shexport WORKON_HOME=$HOME/.virtualenvssource ~/anaconda3/bin/virtualenvwrapper.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="操作虚拟环境"><a href="#操作虚拟环境" class="headerlink" title="操作虚拟环境"></a>操作虚拟环境</h3><p>创建</p><p>mkvirtualenv -p python3 name</p><p>进入</p><p>workon name</p><p>退出</p><p>deactivate</p><p>查看所有虚拟环境</p><p>workon 空格 + 两个tab</p><p>安装包不可以使用sudo，否则就装到了真实环境</p><p>pip install –</p>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机相关</title>
      <link href="/2020/02/10/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9B%B8%E5%85%B3/"/>
      <url>/2020/02/10/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="虚拟机相关"><a href="#虚拟机相关" class="headerlink" title="虚拟机相关"></a>虚拟机相关</h1><h2 id="本地主机访问虚拟机的web服务器"><a href="#本地主机访问虚拟机的web服务器" class="headerlink" title="本地主机访问虚拟机的web服务器"></a>本地主机访问虚拟机的web服务器</h2><ol><li><p>首先虚拟机处进行设置，网络模式为NAT</p></li><li><p>需要将服务器的地址改为公网地址0.0.0.0:8111。</p><p>直接在windows浏览器里url输入”192.168.X.X:8111”,其中192.168.X.X是你虚拟机的ip，这样就可以访问了。</p></li></ol><pre class="line-numbers language-shell"><code class="language-shell">python manage.py runserver 0.0.0.0:8111#主机http://192.168.111.131:8111/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><a id="more"></a><h2 id="虚拟机屏幕太小"><a href="#虚拟机屏幕太小" class="headerlink" title="虚拟机屏幕太小"></a>虚拟机屏幕太小</h2><p>Vmware Tools工具官方已经不建议。更提倡开源的open-vm-tools</p><p>第一步： 安装开源软件 sudo apt-get install open-vm-tools</p><p>第二步 ： sudo apt-get install open-vm*  ，安装后直接打开全屏即可，若屏幕没有改变则重启一下即可。</p><p>重启命令：reboot</p><h2 id="ssh连接本地虚拟机"><a href="#ssh连接本地虚拟机" class="headerlink" title="ssh连接本地虚拟机"></a>ssh连接本地虚拟机</h2><h2 id="查看本地ip地址"><a href="#查看本地ip地址" class="headerlink" title="查看本地ip地址"></a>查看本地ip地址</h2><pre class="line-numbers language-shell"><code class="language-shell">ifconfig pingapt-get install net-tools<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Ubuntu远程登录服务器——SSH的安装和配置"><a href="#Ubuntu远程登录服务器——SSH的安装和配置" class="headerlink" title="Ubuntu远程登录服务器——SSH的安装和配置"></a>Ubuntu远程登录服务器——SSH的安装和配置</h2><ol><li><p>最好先更新一下 apt-get</p><pre class="line-numbers language-shell"><code class="language-shell">sudo apt-get update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>一般ssh功能是linux系统默认有安装的，如果没有的话，就安装一下</p><pre class="line-numbers language-shell"><code class="language-shell"> sudo apt install openssh-client<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装ssh</p><pre class="line-numbers language-shell"><code class="language-shell"> sudo apt install openssh-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看ssh服务是否启动</p><pre class="line-numbers language-shell"><code class="language-shell"> sudo ps -e |grep ssh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="本地主机访问虚拟机的web服务器-1"><a href="#本地主机访问虚拟机的web服务器-1" class="headerlink" title="本地主机访问虚拟机的web服务器"></a>本地主机访问虚拟机的web服务器</h2><ol><li><p>首先虚拟机处进行设置，网络模式为NAT</p></li><li><p>需要将服务器的地址改为公网地址0.0.0.0:8111。</p><p>直接在windows浏览器里url输入”192.168.X.X:8111”,其中192.168.X.X是你虚拟机的ip，这样就可以访问了。</p></li></ol><pre class="line-numbers language-shell"><code class="language-shell">python manage.py runserver 0.0.0.0:8111#主机http://192.168.111.131:8111/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库索引知识点总结</title>
      <link href="/2019/11/30/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
      <url>/2019/11/30/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文<a href="https://segmentfault.com/a/1190000019080654" target="_blank" rel="noopener">MySQL数据库索引知识点总结</a></p></blockquote><h1 id="索引的常见模型"><a href="#索引的常见模型" class="headerlink" title="索引的常见模型"></a><strong>索引的常见模型</strong></h1><p>索引的出现是为了提高查询效率，就像书的目录一样</p><p>常见的实现索引的模型有：<strong>哈希表、有序数组和搜索树</strong></p><ul><li>哈希表：键 - 值(key - value)。</li><li>哈希思路：把值放在数组里，用一个哈希函数把key换算成一个确定的位置，然后把value放在数组的这个位置</li><li>哈希冲突的处理办法：链表</li><li>哈希表适用场景：只有等值查询的场景</li><li>有序数组：按顺序存储。查询用二分法就可以快速查询，时间复杂度是：O(log(N))</li><li>有序数组查询效率高，更新效率低</li><li>有序数组的适用场景：静态存储引擎。</li><li>二叉搜索树：每个节点的左儿子小于父节点，父节点又小于右儿子</li><li>二叉搜索树：查询时间复杂度O(log(N))，更新时间复杂度O(log(N))</li><li>数据库存储大多不适用二叉树，因为树高过高，会适用N叉树</li></ul><a id="more"></a><h2 id="扩展：为什么树高过高就不好呢？"><a href="#扩展：为什么树高过高就不好呢？" class="headerlink" title="扩展：为什么树高过高就不好呢？"></a>扩展：为什么树高过高就不好呢？</h2><p>树高表示N叉树的层数，首先，层数越高占用空间就越大，同时层数越高表示查找到目标数据所要跳层的次数越大，层与层（实际上是父节点与父节点）之间是通过指针连接的，而两个节点的内存地址是连续的概率很低，因此就会触发磁盘随机读效率较低 当索引有100万数据，树高20（2的20次方） 一次查询可能需要跳跃 20 个数据块</p><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p>是一种以键-值（key-value）存储数据的结构，我们只要输入待查找的值即key，就可以找到其对应的值即Value。哈希的思路很简单，把值放在数组里，用一个哈希函数把key换算成一个确定的位置，然后把value放在数组的这个位置。（与HashMap类似）</p><ul><li>优点：效率高</li><li>缺点：因为不是有序的，所以哈希索引做区间查询的速度是很慢的。</li></ul><p>你可以设想下，如果你现在要找某字段在[a, b]这个区间的数据，就必须全部扫描一遍了。</p><p>所以，哈希表这种结构适用于只有<strong>等值查询</strong>的场景，不适用于<strong>区间查询</strong></p><h3 id="有序数组"><a href="#有序数组" class="headerlink" title="有序数组"></a>有序数组</h3><p>等值查询和范围查询场景中的性能就都非常优秀</p><h3 id="搜索树模型又可以细分为二叉树红黑树B-树"><a href="#搜索树模型又可以细分为二叉树红黑树B-树" class="headerlink" title="搜索树模型又可以细分为二叉树红黑树B+树"></a>搜索树模型又可以细分为二叉树红黑树B+树</h3><p>索引的实现由存储引擎来决定，InnoDB索引的实现使用B+树模型<br>二叉树和红黑树的搜索效率很高，但是应用在数据库中时因为数据量较大，二叉树和红黑树每次只分裂出两个分支，导致分裂层数很大，空间占用率高<br>而B+树选择增加分支树，把整颗树的高度维持在很小的范围内，同时在内存里缓存前面若干层的节点，可以极大地降低访问磁盘的次数，提高读的效率。<br>同时要注意的一点是：二叉树类数据结构效率高的前提是数据有序，这也是数据库常存在一个自增主键的原因</p><h4 id="扩展：什么是B-树"><a href="#扩展：什么是B-树" class="headerlink" title="扩展：什么是B+树"></a>扩展：什么是B+树</h4><p><strong>B-树</strong> 即Balance-tree即B树</p><p><img src="https://segmentfault.com/img/bVbsdR3?w=624&h=268" alt="B-树模型"></p><p><strong>B+树</strong> B+树索引并不能找到一个给定键值的具体行。B+树索引能找到的只是被查找数据行所在的页。然后数据库通过把页读入到内存，再在内存中进行查找，最后得到要在找的数据。因为页目录中的槽是按照主键顺序排列的，所以在每一个页目录中，通过二分查找，定位到数据行所在的页，然后将整个页读入内存</p><p><img src="https://segmentfault.com/img/bVbsdRz?w=569&h=345" alt="B+树模型"></p><p><strong>扩展：我们可以人工调整页的大小吗？</strong><br>所有的innodb索引都是btree索引，索引记录保存在叶子上，默认的索引页大小是16K。当有新的记录插入时，innodb出于对将来的insert和update操作的考虑，会尝试留下1/16的空闲页大小。</p><p>如果索引记录是完全按照索引记录的大小顺序插入的，那么索引也将填满整个页大小的15/16，如果插入顺序完全随机，那么索引页基本上填充为1/2至15/16自建。如果填充因子低于1/2,innodb会尝试重建b-tree。</p><p>Mysql5.6以后，可以通过innodb_page_size参数设置当前实例下每个索引页的大小，一旦设定，无法再更改回来。推荐的配置一般是16K，8K或者4K。另外假如一个Mysql实例设置了不同于默认值的innodb_page_size A，那么将无法使用其他不同于A值的实例上的文件（比如做一个物理备份和恢复）</p><p><strong>B*树</strong> 是B+树的变体，在B+树的非根和非叶子结点再增加指向兄弟的指针</p><p><img src="https://segmentfault.com/img/bVbsdSM?w=569&h=345" alt="B*树模型"></p><p><strong>B树模型小结：</strong></p><pre><code>B（B-）树：多路搜索树，每个结点存储M/2到M个关键字，非叶子结点存储指向关键字范围的子结点；所有关键字在整颗树中出现，且只出现一次，非叶子结点可以命中；B+树：在B-树基础上，为叶子结点增加链表指针，所有关键字都在叶子结点中出现，非叶子结点作为叶子结点的索引；B+树总是到叶子结点才命中；B*树：在B+树基础上，为非叶子结点也增加链表指针，将结点的最低利用率从1/2提高到2/3；</code></pre><p>说完底层实现我们来说一下表层</p><h1 id="索引的种类"><a href="#索引的种类" class="headerlink" title="索引的种类"></a>索引的种类</h1><pre><code></code></pre><ul><li><p>普通索引：仅加速查询</p></li><li><p>唯一索引：加速查询 + 列值唯一（可以有null）</p></li><li><p>主键索引：加速查询 + 列值唯一（不可以有null）+ 表中只有一个</p></li><li><p>联合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并</p></li><li><p>全文索引：对文本的内容进行分词，进行搜索</p></li></ul><p><strong>ps.</strong>索引合并，使用多个单列索引组合搜索<br>覆盖索引，select的数据列只用从索引中就能够取得，不必读取数据行，换句话说查询列要被所建的索引覆盖<br>联合索引本质：</p><p>当创建(a,b,c)联合索引时，相当于创建了(a)单列索引，(a,b)联合索引以及(a,b,c)联合索引。想要索引生效的话,只能使用 a和a,b和a,b,c三种组合；当然，a,c组合也可以，但实际上只用到了a的索引，c并没有用到！只用bc两个条件不会用到索引。</p><h2 id="联合索引比对每个列分别建索引更有优势"><a href="#联合索引比对每个列分别建索引更有优势" class="headerlink" title="联合索引比对每个列分别建索引更有优势"></a>联合索引比对每个列分别建索引更有优势</h2><p>因为索引建立得越多就越占磁盘空间，在更新数据的时候速度会更慢。另外建立多列索引时，顺序也是需要注意的，应该将严格的索引放在前面，这样筛选的力度会更大，效率更高。</p><h2 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h2><p>有时候一个字段很长，我们只需要截取前几位或后几位（反转后取前几位）建立索引即可，节约了空间同时也能实现相同的效果</p><h2 id="索引下推优化"><a href="#索引下推优化" class="headerlink" title="索引下推优化"></a>索引下推优化</h2><p>以市民表的联合索引（name, age）为例。如果现在有一个需求：检索出表中“名字第一个字是张，而且年龄是10岁的所有男孩”。那么，SQL语句是这么写的：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tuser <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'张%'</span> <span class="token operator">and</span> age<span class="token operator">=</span><span class="token number">10</span> <span class="token operator">and</span> ismale<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你已经知道了前缀索引规则，所以这个语句在搜索索引树的时候，只能用 “张”，找到第一个满足条件的记录ID3。当然，这还不错，总比全表扫描要好。</p><p>然后呢？</p><p>当然是判断其他条件是否满足。</p><p>在MySQL 5.6之前，只能从ID3开始一个个回表。到主键索引上找出数据行，再对比字段值。</p><p>而MySQL 5.6 引入的索引下推优化（index condition pushdown)， 可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。</p><h2 id="索引失效场景"><a href="#索引失效场景" class="headerlink" title="索引失效场景"></a>索引失效场景</h2><ol><li>如果条件中有or，除非条件中的列全部有索引否则不会使用索引查询</li><li>like查询是以%开头（但是以%结尾却不会失效）</li><li>如果列类型是字符串，那一定要在条件中将数据使用引号引用起来,否则不使用索引。（例如where ID = 3 和 where ID = “3”）</li><li>如果mysql估计使用全表扫描要比使用索引快,则不使用索引。（因为server层有优化器）</li><li>索引不会包含有null值的列，只要列中包含有null值都将不会被包含在索引中，复合索引中只要有一列含有null值，那么这一列对于此复合索引就是无效的。所以我们在数据库设计时不要让字段的默认值为null。</li><li>在列上进行运算将导致索引失效</li></ol><h2 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h2><p>虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行insert、update和delete。因为更新表时，不仅要保存数据，还要保存一下索引文件。所以对数据量不大，查询率不高更新率高的的列添加索引反而得不偿失。</p><h2 id="短索"><a href="#短索" class="headerlink" title="短索"></a>短索</h2><p>对串列进行索引，如果可能应该指定一个前缀长度。例如，如果有一个char(255)的列，如果在前10个或20个字符内，多数值是惟一的，那么就不要对整个列进行索引。短索引不仅可以提高查询速度而且可以节省磁盘空间和I/O操作。</p><h2 id="索引回表"><a href="#索引回表" class="headerlink" title="索引回表"></a>索引回表</h2><p>我们知道，一般查询数据时都是根据索引找到对应的索引id然后拿着索引id找到对应的数据，这个过程称为回表</p><h2 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h2><p>如果执行的语句是select ID from T where k between 3 and 5此时我们要查的数据就是索引，因此可以直接提供查询结果，不需要回表。也就是说，在这个查询里面，索引k已经“覆盖了”我们的查询需求，我们称为覆盖索引。</p><h3 id="问题：针对上面说的索引失效第四条-那么什么情况下使用索引反而没有全表扫描快？"><a href="#问题：针对上面说的索引失效第四条-那么什么情况下使用索引反而没有全表扫描快？" class="headerlink" title="问题：针对上面说的索引失效第四条 那么什么情况下使用索引反而没有全表扫描快？"></a>问题：针对上面说的索引失效第四条 那么什么情况下使用索引反而没有全表扫描快？</h3><p>比如你要从一本字典中找到某一个字，使用目录查肯定很快，但是我现在要找到所有拼音a-x开头的字，走全表扫描就是直接翻，走索引需要将每个数据根据目录一层一层的去找反而变慢了。</p>]]></content>
      
      
      <categories>
          
          <category> 理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言中的面向对象</title>
      <link href="/2019/11/26/Go%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2019/11/26/Go%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>来源 <a href="http://kangkona.github.io/categories/go/" target="_blank" rel="noopener">http://kangkona.github.io/categories/go/</a></p></blockquote><a id="more"></a><p>最近在思考Go语言中面向对象实现，感觉最初的设计者真是掐准了软件工程的命脉，优雅与实用恰到好处的结合，使得这门语言于平凡处见深刻。</p><p>下面来剖析一下其中的一些设计点。</p><h1 id="类与类型"><a href="#类与类型" class="headerlink" title="类与类型"></a>类与类型</h1><p>golang中没有class关键字，却引入了type，二者不是简单的替换那么简单，type表达的涵义远比class要广。 主流的面向对象语言(C++, Java)不太强调类与类型的区别，本着一切皆对象的原则，类被设计成了一个对象生成器。这些语言中的类型是以类为基础的，即通过类来定义类型，类是这类语言的根基。与之不同，golang中更强调类型，你在这门语言中根本看不到类的影子。实现上述传统语言的class只是type功能的一部分：</p><pre class="line-numbers language-go"><code class="language-go">  <span class="token keyword">type</span> Mutex <span class="token keyword">struct</span> <span class="token punctuation">{</span>      state <span class="token builtin">int32</span>      sema  <span class="token builtin">uint32</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此外，type还可以扩展已经定义的类型：</p><pre class="line-numbers language-go"><code class="language-go">    <span class="token keyword">type</span> Num <span class="token builtin">int32</span>    <span class="token keyword">func</span> <span class="token punctuation">(</span>num Num<span class="token punctuation">)</span> <span class="token function">IsBigger</span><span class="token punctuation">(</span>otherNum Num<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> num <span class="token operator">></span> otherNum    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这种灵活的定义方式可以很好地提高程序的可扩展性,通过重命名原有类型，也可以做到一定程序上的解耦。</p><p>传统对象型语言由于设计之初追求面向对象的彻底性，使得后来加入函数式对象时不得不Hack一把：C++很鸡贼地重载 <code>()</code> 实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Adder</span><span class="token punctuation">{</span>   <span class="token keyword">public</span><span class="token operator">:</span>     <span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> Adder<span class="token operator">&amp;</span> adder<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">adder</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">new</span> Adder<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Java则憋了很久才憋出 <code>FunctionalInterface</code> (只有一个抽象方法的接口)可以无缝地与历史包袱兼容:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Displayer</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Test class to implement above interface</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FunctionInterfaceTestImpl</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//Old way using anonymous inner class</span>     Displayer oldWay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Displayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Display from old way"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>     OldWay<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//outputs: Display from old way</span>     <span class="token comment" spellcheck="true">//Using lambda expression</span>     Displayer newWay <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Display from new Lambda Expression"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>     newWay<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//outputs : Display from new Lambda Expression</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而在golang中，借助type的威力，定义函数式类型和定义一般类型并无区别：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> Traveser <span class="token keyword">func</span><span class="token punctuation">(</span>ele <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">type</span> Filter <span class="token keyword">func</span><span class="token punctuation">(</span>ele <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">bool</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="方法放在哪里"><a href="#方法放在哪里" class="headerlink" title="方法放在哪里"></a>方法放在哪里</h1><p>golang与传统对象式语言的另一个不同是方法并不在类的定义范围之内，而是通过把类作为接收器(receiver)与方法进行绑定：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Once is an object that will perform exactly one action.</span><span class="token keyword">type</span> Once <span class="token keyword">struct</span> <span class="token punctuation">{</span>    m    Mutex    done <span class="token builtin">uint32</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>o <span class="token operator">*</span>Once<span class="token punctuation">)</span> <span class="token function">Do</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">LoadUint32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>o<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Slow-path.</span>    o<span class="token punctuation">.</span>m<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> o<span class="token punctuation">.</span>m<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> o<span class="token punctuation">.</span>done <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">defer</span> atomic<span class="token punctuation">.</span><span class="token function">StoreUint32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>o<span class="token punctuation">.</span>done<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看起来仅仅是放置位置的不同，其实是设计理念的不同。将方法放在类定义里面，意味着方法是类不可分割的一部分，类的最小单位就是数据成员和当前定义的所有操作，你要认识这个类，必须一次性认识这个类中定义的所有的东西。相反，先定义类的数据结构，然后像搭积木一样将目前需要的方法一个一个地进行绑定，你便可以根据需求对类进行扩展。传统的类定义是你必须一开始便想好这个类有哪些操作，一旦类定义好了，类就成了你定义的样子，再无其他可能。golang的这种开放式扩展定义方式，使得类更加具有生命力，你不必一开始就设计好一切(往往也很难做到)，类会随着你的实现思路逐渐成长为你想要的那个样子。</p><h1 id="组合还是继承"><a href="#组合还是继承" class="headerlink" title="组合还是继承"></a>组合还是继承</h1><p>继承是面向对象鼓吹的三大特性之一，但经过多年的实践，业界普遍认识到继承带来的弊端：</p><ul><li>破坏封装，子类与父类之间紧密耦合，子类依赖于父类的实现，子类缺乏独立性</li><li>对扩展支持不好，往往以增加系统结构的复杂度为代价</li><li>不支持动态继承。在运行时，子类无法选择不同的父类</li><li>子类不能改变父类的接口</li><li>对具体类的重载，重写会破会里氏替换原则</li></ul><p>golang的设计者意识到了继承的这些问题，在语言设计之初便拿掉了继承。其实也不能说golang里面没有继承，只不过继承是用匿名组合实现的，没有传统的的继承关系链(父类和子类完全是不同类型)， 同时还能重用父类的方法与成员。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> Base <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b Base<span class="token punctuation">)</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Bazinga!"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> Child <span class="token keyword">struct</span><span class="token punctuation">{</span>    Base<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   child <span class="token operator">:=</span> Child<span class="token punctuation">{</span><span class="token punctuation">}</span>   child<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种用Has-A代替Is-A的模拟实现，既解决了一些软件工程问题，同时甩掉了很多困扰程序员的心智包袱。</p><h1 id="非侵入式接口"><a href="#非侵入式接口" class="headerlink" title="非侵入式接口"></a>非侵入式接口</h1><p>学CS到现在，感觉计算机科学的精髓其实就两个字：<code>abstract</code> 和 <code>tradeoff</code>。 golang中的非侵入式接口便很好地体现了这两点。传统对象式语言里面有一堆与接口相关的东西：抽象类，抽象接口，虚函数，纯虚函数等等。概念虽多，说起来不过是在不同<code>abstrct</code>层面上进行<code>tradeoff</code>而已。 golang的接口很彻底，就是一系列操作定义的集合，根本不允许进行实现，而且也不能定义变量或者常量这些东东:</p><pre class="line-numbers language-go"><code class="language-go">  <span class="token keyword">type</span> Interface <span class="token keyword">interface</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// Len is the number of elements in the collection.</span>     <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>     <span class="token comment" spellcheck="true">// Less reports whether the element with</span>     <span class="token comment" spellcheck="true">// index i should sort before the element with index j.</span>     <span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>     <span class="token comment" spellcheck="true">// Swap swaps the elements with indexes i and j.</span>     <span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>记得有位大学老师把Java中的接口比作资格证书，你要去考资格证书，并达到资格证书中的所有要求，才算具有某些资质。golang的接口则不太一样，只要你能做到资格证书中规定的那些事情，不管你去不去考这个资格证，都认为你具有了资质。其实这种想法在一些动态语言中实现过，且有诗为证：</p><blockquote><p>如果一个人看起来像鸭子,走起来像鸭子,叫起来像鸭子,那么他就是个基佬。</p></blockquote><p>这种非侵入式的设计方式，很大程度上也是为了解耦。接口和类本就是不同的东西：类是为了把数据和代码包装在一起，是为了对内实现；接口则更像是一种契约，是为了对外展示。基于这种抽象层面的接口进行编程，很容易达到设计模式中的依赖倒置，接口隔离以及迪米特法则几个原则。</p><p>编程语言的进化固然可以带来一些工程上的好处， 但千万不要忘了那句古训：</p><blockquote><p>There is no silver bullet.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust的内存安全革命</title>
      <link href="/2019/11/25/Rust%E7%9A%84%E5%86%85%E5%AD%98%E5%AE%89%E5%85%A8%E9%9D%A9%E5%91%BD/"/>
      <url>/2019/11/25/Rust%E7%9A%84%E5%86%85%E5%AD%98%E5%AE%89%E5%85%A8%E9%9D%A9%E5%91%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><blockquote><p>中译版来源：<a href="https://szpzs.oschina.io/2018/04/28/rust-memory-safety-revolution/#more" target="_blank" rel="noopener">https://szpzs.oschina.io/2018/04/28/rust-memory-safety-revolution/#more</a></p></blockquote><p>Rust是一种年轻的编程语言，为程序代码带来了新的质量。 你可能听说过它是快速的、安全的或容易实现并发的。 本文集中介绍Rust最重要的核心特性：内存管理。 该核心特性是Rust的主要创新之一，它的许多独特的特点是基于这种核心特性的。</p><p>本文是写给不知道Rust或刚刚开始学习它的程序员的。对于熟悉C、C++或其他使用手动管理内存以及使用垃圾回收器语言的读者来说会更容易理解Rust的特点。 本文是一个旨在介绍Rust核心概念并鼓励进一步学习的高层次介绍。本文不是教程，最后也没有 Hello Wrold 的Rust例子。</p><a id="more"></a><h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><p>现代应用程序使用计算机的内存主要有两种方式：栈和堆。这可能不适用于使用汇编或编写嵌入式系统软件的情况，但让我们还是关注一般的应用程序的场景。</p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>随着程序进入和退出某些区域（通常是函数），以及循环和分支代码块，栈会自动扩展和缩小。所有现代的、高于汇编语言的语言都会自动执行此操作。它们的行为都是相似的，程序员声明变量，使用它，然后丢弃它。 编译器基于代码区域边界知道何时必须保留内存以及何时清除内存。 这是一个严格的流程，但它快速、安全且易于使用。</p><pre class="line-numbers language-rust"><code class="language-rust">main <span class="token punctuation">{</span>        A <span class="token operator">=</span> <span class="token number">1</span>       <span class="token comment" spellcheck="true">// 创建 A    </span>    <span class="token keyword">loop</span> <span class="token punctuation">{</span>                B <span class="token operator">=</span> <span class="token number">2</span>   <span class="token comment" spellcheck="true">// 创建 B                </span>        <span class="token comment" spellcheck="true">// 删除 B    </span>    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 删除 A</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>对堆的处理更自由。 程序员可以从代码中的任何一点来请求它的一部分，然后在任何其他点释放它。 它并不明显与程序流程结合，编译器无法确定何时以及如何处理它。程序员有责任对其进行正确处理。</p><p>内存<strong>首先</strong>必须被获取到，<strong>然后</strong>被使用，<strong>最后</strong>被仅释放<strong>一次</strong>。这三个步骤似乎很简单，但将其与其他应用程序的流程混合会变得棘手，并且违反其中一个步骤都是灾难性的。 有时候一个错误可能没有任何后果，但是在其他时候，应用程序可能会被终止，甚至更糟糕的是，它的内存可能会悄无声息地被破坏。 这种行为不是确定性的。</p><pre class="line-numbers language-rust"><code class="language-rust">main <span class="token punctuation">{</span>        A <span class="token operator">=</span> <span class="token function">allocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 获取    </span>    <span class="token function">do_stuff</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 使用    </span>    <span class="token function">release</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 释放                    </span>    <span class="token comment" spellcheck="true">// 删除指针</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="泄露"><a href="#泄露" class="headerlink" title="泄露"></a>泄露</h3><p>当内存没有被正确释放当时候，泄露就发生了。内存泄漏成为一个致命的负担，使得应用程序比实际所需使用更多的资源。在极端情况下，如果所有的内存都被占用，并且仍然有更多的需求，它会使程序甚至整个系统崩溃。</p><pre class="line-numbers language-rust"><code class="language-rust">main <span class="token punctuation">{</span>    A <span class="token operator">=</span> <span class="token function">allocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 获取    do_stuff(A)     // 使用                    // &lt;运行时错误> 从未释放                    // 删除指针}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="释放后使用"><a href="#释放后使用" class="headerlink" title="释放后使用"></a>释放后使用</h3><p>当内存被释放后程序还尝试去使用这块内存，这就是释放后使用。如果内存被还给了操作系统，而我们又尝试去访问它，这会导致致命的段错误，程序会立即被结束。另一个有趣的部分是当被释放的内存被分配器缓存并在下次获取时被重用，这使两个随机部分的代码使用相同位置的内存。</p><pre class="line-numbers language-rust"><code class="language-rust">main <span class="token punctuation">{</span>    A <span class="token operator">=</span> <span class="token function">allocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 获取    </span>    <span class="token function">release</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 释放    </span>    <span class="token function">do_stuff</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// &lt;运行时错误> 使用无效指针                    </span>    <span class="token comment" spellcheck="true">// 删除指针</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重复释放"><a href="#重复释放" class="headerlink" title="重复释放"></a>重复释放</h3><p>内存被释放两次就是重复释放。如果内存被还回操作系统，它就终止程序对它对访问。重复释放的后果很大程度上取决于分配器，释放内存在其他地方使用或只是崩溃。</p><pre class="line-numbers language-rust"><code class="language-rust">main <span class="token punctuation">{</span>    A <span class="token operator">=</span> <span class="token function">allocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 获取    </span>    <span class="token function">do_stuff</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 使用    </span>    <span class="token function">release</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 释放    </span>    <span class="token function">release</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// &lt;运行时错误> 释放无效指针                    </span>    <span class="token comment" spellcheck="true">// 删除指针</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="传统解决方法"><a href="#传统解决方法" class="headerlink" title="传统解决方法"></a>传统解决方法</h1><p>堆管理是个非常古老的问题，程序员发明了许多工具来减轻它。有两种主要的方法，都被证明是有用的，但每一种都有严重缺陷。</p><h2 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h2><p>这是一个简单的方法。程序获得特殊的机制检测到从某时刻开始给定的内存块将永远不会被使用，因此它可以安全释放。该方法防止了内存泄露、释放后使用、重复释放。证明内存永远不会被再次使用的最简单的方法是证明它是不可访问的。当程序将内存的地址存储在栈上、静态变量或堆上时，该内存是可到访问的，堆本身是可到达的，因此可以在不猜测的情况下获得。而内存本身是可访问的，因此可以毫无疑问地获得它。</p><pre class="line-numbers language-rust"><code class="language-rust">main <span class="token punctuation">{</span>   <span class="token punctuation">...</span>   A <span class="token operator">=</span> <span class="token operator">&lt;</span>pointer to<span class="token operator">></span>──────┐   <span class="token punctuation">...</span>                   <span class="token operator">|</span><span class="token punctuation">}</span>                        │                         ▼╔══ HEAP ALLOCATED ════════╗║ AA <span class="token operator">=</span> <span class="token string">"reachable"</span>         ║║ AB <span class="token operator">=</span> <span class="token operator">&lt;</span>pointer to<span class="token operator">></span>──────┐ ║╚════════════════════════│═╝                         ▼╔══ HEAP ALLOCATED ════════╗║ ABA <span class="token operator">=</span> <span class="token string">"also reachable"</span>   ║╚══════════════════════════╝╔══ HEAP ALLOCATED ════════╗║ BA <span class="token operator">=</span> <span class="token string">"unreachable"</span>       ║║ BB <span class="token operator">=</span> <span class="token operator">&lt;</span>pointer to<span class="token operator">></span>──────┐ ║╚════════════════════════│═╝                         ▼╔══ HEAP ALLOCATED ════════╗║ BBA <span class="token operator">=</span> <span class="token string">"also unreachable"</span> ║╚══════════════════════════╝<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有许多智能的策略来检查可访问性，但它们都会产生显著的开销。例如，引用计数器会增加内存使用量并为每个堆访问增加开销。另一方面，追踪垃圾回收器允许自由访问，但引入了大量的内存可访问性分析，这些分析可以在后台不断运行，或者为了清理内存可以完全停止程序的执行。 无论如何，垃圾回收器都会为应用程序增加额外的工作量并增加内存使用量。</p><h2 id="严格的规则"><a href="#严格的规则" class="headerlink" title="严格的规则"></a>严格的规则</h2><p>因此垃圾回收器是一个很好但消耗大量资源的解决方案。但是，如果成本难以承受或者根本没有可能使用它，我们可以做些什么呢？ 程序员发明了一个特殊的规则，它使内存管理更容易。 它是基于所有权和生命周期的规则。</p><h3 id="所有权"><a href="#所有权" class="headerlink" title="所有权"></a>所有权</h3><p>所有权是这样的一个想法，可以有很多指向分配内存的指针，但只有其中一个被视为拥有该内存。当拥有所有权的指针被销毁时，应该使用它来释放分配给它的内存。非所有权的指针可以被创建和销毁任意个，但它们永远不应该用于释放内存。这使得内存管理更加清晰，因为只有一个重要指针要跟踪和释放。它还解决了前面提到的三个堆问题中的两个问题：泄漏和重复释放。所有权可能是API和程序流程中的一个软性协议，但某些语言和库提供的工具使得此策略的执行更加明确且不易出错。例如，现代C++提供了内置的智能指针，它明确表示有拥有权的指针并实现像销毁时释放的合适行为。</p><pre class="line-numbers language-rust"><code class="language-rust">main <span class="token punctuation">{</span>    A <span class="token operator">=</span> <span class="token function">allocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 获取</span>    <span class="token function">do_stuff</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// 使用</span>    <span class="token function">release</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 释放, 指针拥有内存</span>                        <span class="token comment" spellcheck="true">// 删除指针</span><span class="token punctuation">}</span><span class="token function">do_stuff</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">do_more_stuff</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 使用</span>                        <span class="token comment" spellcheck="true">// 不会释放，该指针不是所有权的指针</span>                        <span class="token comment" spellcheck="true">// 删除指针</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>生命周期是程序执行过程中的一段时间，而这段时间内一段特定的数据被有效使用。处理堆分配的内存指针时，这是非常重要的属性，这些指针并不拥有内存。 只要拥有内存的指针不释放内存，它们就可以安全使用。而有所有权的指针释放内存之后，再使用它们就是错误，因为它们的生命周期结束了。值得注意的是，任何包含给定生命期周期的指针的结构都应该被认为具有不超过指针的生命期周期。这不是一个可以执行的简单的规则，但它可以防止前面提到的第三个堆内存问题：释放后使用。 这补充了所有权的保证，使得程序的完全内存安全，而无需垃圾回收器这样的开销。</p><pre class="line-numbers language-rust"><code class="language-rust">main <span class="token punctuation">{</span>    A <span class="token operator">=</span> <span class="token function">allocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// A's lifetime begins</span>    <span class="token function">do_stuff</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// use A</span>    B <span class="token operator">=</span> A           <span class="token comment" spellcheck="true">// B's lifetime begins</span>    <span class="token function">do_stuff</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// use B</span>    <span class="token function">release</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// release, A's and B's lifetimes end</span>    <span class="token function">do_stuff</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// &lt;RUN TIME FAIL> use A after its lifetime ended</span>    <span class="token function">do_stuff</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// &lt;RUN TIME FAIL> use B after its lifetime ended</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h1><p>有时Rust被描述为混合解决方案。 实际上，它所做的只是强化代码中的所有权和生命周期规则，然而结果是，用Rust写代码非常安全和无忧无虑，它类似于垃圾回收语言。编译器进行静态校验该程序是内存安全的，如果无法校验它是内存安全的，编译器会产生一个指出潜在风险的错误。 当编译通过后，代码保证不会导致内存损坏。 因为这些校验在构建输出二进制文件之前都发生了，所以这个过程对程序的执行没有任何影响，就像它是用纯C或C++编写的一样轻量。</p><h2 id="所有权-1"><a href="#所有权-1" class="headerlink" title="所有权"></a>所有权</h2><p>Rust有非常严格的所有权概念。每一块被分配的内存被一些结构的单独实例所拥有。这些结构可以是任何类型，但通常他们最终是某种来自标准库的集合或Box（Rust的智能指针）。这些包装器负责在自己被销毁的时候释放所拥有的内存。没有简单的方法来显式分配内存和获取原始指针，而不需要任何负责任的包装器。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">my_fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> my_box <span class="token operator">=</span> Box<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> my_box<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 使用</span>                                    <span class="token comment" spellcheck="true">// 删除 my_box,</span>                                    <span class="token comment" spellcheck="true">// 释放内存</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="递归销毁"><a href="#递归销毁" class="headerlink" title="递归销毁"></a>递归销毁</h3><p>所有权是递归的，所以如果一个结构存储另一个结构的值，它将获得后者及其所有子结构的所有权。这也意味着，当容器被销毁时，它必须递归地销毁其所有内容。Rust处理这样的情况可以说是开箱即用一样轻松。所有结构都定义了析构器，它遍历所有字段并首先销毁它们。结构的作者可以在销毁期间添加自己的步骤，例如在编写客户端时关闭数据库连接，但是在此之后字段仍然会被逐一销毁。默认的处理行为在绝大多数情况下都是足够的，因此结构很少会定义析构函数，但是不管有没有定义析构函数，它们都不会泄漏内存。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">struct</span> MyStruct <span class="token punctuation">{</span>                       <span class="token comment" spellcheck="true">// 结构定义</span>    my_box<span class="token punctuation">:</span> Box<span class="token operator">&lt;</span>u32<span class="token operator">></span><span class="token punctuation">,</span>                   <span class="token comment" spellcheck="true">// 它只有一个字段,</span>                                        <span class="token comment" spellcheck="true">// 在堆上一个持有整数的Box类型数据</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function">my_fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> my_struct <span class="token operator">=</span> MyStruct <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 创建结构实例</span>        my_box<span class="token punctuation">:</span> Box<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">// 获取内存</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> my_struct<span class="token punctuation">.</span>my_box<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 使用</span>                                        <span class="token comment" spellcheck="true">// 删除 my_struct,</span>                                        <span class="token comment" spellcheck="true">// 同时删除 my_box,</span>                                        <span class="token comment" spellcheck="true">// 释放内存</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用栈替代堆"><a href="#用栈替代堆" class="headerlink" title="用栈替代堆"></a>用栈替代堆</h3><p>Rust的所有权模式带来了一个强大的特性：复杂的堆管理简化为简单的栈管理。程序员不需要担心如何分配和释放内存，这些工作都通过使用局部变量来处理。甚至即使结构里嵌套了许多堆内存的引用，在栈上也总是只有一个根结构，当程序不再需要它的时候，它会自动销毁。</p><h2 id="生命周期-1"><a href="#生命周期-1" class="headerlink" title="生命周期"></a>生命周期</h2><p>不幸的是，编写那些访问数据需要拥有这些数据的程序并不方便。Rust提供普通的、非智能的、没有所有权的引用，这种引用使得没有所有权的访问成为可能。当这样的引用被创建时，它引用的值是借用的。借用会创建一个双向关系：引用必须具有不超过它引用的值的生命周期，但该值在引用的生命周期内不得移动。这两条规则任何一条被破坏的话，引用所指向的就是无效内存。Rust静态地跟踪并强制执行生命周期的正确性并拒绝危险的程序执行流程。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">valid_flow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 创建值</span>    <span class="token keyword">let</span> borrow <span class="token operator">=</span> <span class="token operator">&amp;</span>value<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 创建借用</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 使用值但是没有移动它</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> borrow<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 使用借用</span>                                    <span class="token comment" spellcheck="true">// 删除借用</span>                                    <span class="token comment" spellcheck="true">// 安全地删除值，</span>                                    <span class="token comment" spellcheck="true">// 因为它不再被借用</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="递归借用"><a href="#递归借用" class="headerlink" title="递归借用"></a>递归借用</h3><p>结构的生命周期永远不能超过它们的任何字段的生命周期。如果其中一个字段恰好是引用，则必须证明整个结构实例在引用值之前被销毁。如果存在对具有生命周期限制的结构的引用，则引用本身的生命周期不能超过结构。只要编译器可以证明它是安全的，这种关系就可以嵌套并绑定任意次数。当编译器无法猜测正确的关系时，可以用简单的语法明确定义它们。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">borrow_outlives_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token operator">&amp;</span>String <span class="token punctuation">{</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 创建值</span>    <span class="token keyword">let</span> borrow <span class="token operator">=</span> <span class="token operator">&amp;</span>value<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 创建借用</span>    <span class="token keyword">return</span> borrow                   <span class="token comment" spellcheck="true">// 借用没有被删除</span>                                    <span class="token comment" spellcheck="true">// &lt;编译时错误> 删除值,</span>                                    <span class="token comment" spellcheck="true">// 但是它仍然被借用</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="规则的妥协"><a href="#规则的妥协" class="headerlink" title="规则的妥协"></a>规则的妥协</h1><p>认为每一个系统都可以用限制性的、静态证明的安全性代码来表达是天真的想当然。在绝大多数的情况下，规则可以胜任，但有时规则也必须进行妥协，Rust提供工具来做这件事。</p><h2 id="包装器"><a href="#包装器" class="headerlink" title="包装器"></a>包装器</h2><p>标准库提供一些包装器将所有权和借用的检查推迟到运行时。这就使有效性检查程序不那么繁忙，并提供了灵活性和很少的运行时开销。例如，Rc是一个没有所有者的Box（带有智能指针的内存）。 它是一个有引用计数器的可被垃圾回收的内存，它的最后一个引用消失的时候，它就被销毁。 Rust提供了更多的包装器，但它们稍微超出了本介绍的范围，它们适用于运行时规则，本文没有涉及。</p><h2 id="不安全代码"><a href="#不安全代码" class="headerlink" title="不安全代码"></a>不安全代码</h2><p>当在库和工具中进入足够低的层次时，Rust的安全保证变得无法应用。 例如，box和集合触及内存分配和指针，但没有安全保证，因为它们自己做安全保证。 它们可以写在Rust中，因为它们的代码明确标记为不安全。这使得完全忽略安全检查，但这非常危险。 所有外部C库包装器在某些层次也必须使用不安全的代码。 他们定义安全规则，使其与其余代码无缝集成。 不安全的代码是Rust强大能力的来源，但它带来了巨大的责任。 应尽可能避免使用它。</p><h1 id="实际情况"><a href="#实际情况" class="headerlink" title="实际情况"></a>实际情况</h1><p>Rust看起来不错，它是由聪明的人使用其他聪明人的学术研究设计的，但它真的有用吗？是的，的确有用。大多数情况下，它只会强制元素之间的明确关系，进行合理安全的设计。毕竟，Rust是与Firefox Web浏览器的未来引擎Servo并行设计的。从一开始，它不仅在理论上是好的，而且在实际的、复杂的软件开发中也被证明是可用的。经过一年使用Rust进行商业编程后，我可以确认，Rust的规则不是一种负担，而是在架构和稳定性保证方面提供了很大的帮助。 我真的相信，Rust这种语言是属于未来的，我强烈推荐大家使用它。</p><blockquote><p><em>原文链接：</em> <a href="https://anixe.pl/content/news/rust_memory_safety_revolution" target="_blank" rel="noopener">https://anixe.pl/content/news/rust_memory_safety_revolution</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多git账号问题</title>
      <link href="/2019/11/14/%E5%A4%9Agit%E8%B4%A6%E5%8F%B7%E9%97%AE%E9%A2%98/"/>
      <url>/2019/11/14/%E5%A4%9Agit%E8%B4%A6%E5%8F%B7%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="多git账号使用SSH问题"><a href="#多git账号使用SSH问题" class="headerlink" title="多git账号使用SSH问题"></a>多git账号使用SSH问题</h1><p>首先生成多个id_rsa文件，或者共用一个</p><pre class="line-numbers language-shell"><code class="language-shell">ssh-keygen -t rsa -b 4096 -C "your_email@example.com"# gitee 通用Enter a file in which to save the key (/home/you/.ssh/id_rsa): C:\Users\heshu\.ssh\id_rsa_githubcat C:\Users\heshu\.ssh\id_rsa_github.pub# 分别将key加入到 github 和 gitee<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>C:\Users\heshu.ssh 文件夹创建config文件并加入</p><pre class="line-numbers language-shell"><code class="language-shell"># github account [github_user]Host git@github.comHostName https://github.comUser MajorTeeIdentityFile C:\Users\heshu\.ssh\id_rsa_githubIdentitiesOnly yes# gitee account [gitee_user]Host git@gitee.comHostName https://gitee.comUser LincludeIdentityFile C:\Users\heshu\.ssh\id_rsa_giteeIdentitiesOnly yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意格式出错可能出现</p><blockquote><p>line 4: garbage at end of line;</p></blockquote><p>然后测试</p><blockquote><p>ssh -T <a href="mailto:git@gitee.com">git@gitee.com</a></p><p>ssh -T <a href="mailto:git@github.com">git@github.com</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitbook一些问题</title>
      <link href="/2019/11/13/gitbook%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
      <url>/2019/11/13/gitbook%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>转载<a href="https://github.com/yuanwenq/blog/blob/master/Other/gitbook/gitbook_build_html_BUG.md" target="_blank" rel="noopener">https://github.com/yuanwenq/blog/blob/master/Other/gitbook/gitbook_build_html_BUG.md</a></p></blockquote><h1 id="gitbook-build-生成的HTML无法跳转问题"><a href="#gitbook-build-生成的HTML无法跳转问题" class="headerlink" title="gitbook build 生成的HTML无法跳转问题"></a>gitbook build 生成的HTML无法跳转问题</h1><p>由于gitbook版本过高导致生成的html打开后无法跳转章节</p><p>gitbook降低版本到 <strong>2.6.7</strong> 就可以了</p><p>使用如下命令</p><pre class="line-numbers language-shell"><code class="language-shell">gitbook build --gitbook=2.6.7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果遇到：</p><pre class="line-numbers language-shell"><code class="language-shell">Error loading version latest: Error: Cannot find module 'internal/util/types'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><blockquote><p><strong>将node版本降低:</strong></p></blockquote><ul><li><h3 id="linux-amp-ubuntu-环境"><a href="#linux-amp-ubuntu-环境" class="headerlink" title="linux &amp; ubuntu 环境"></a>linux &amp; ubuntu 环境</h3><ol><li>安装node管理 n<ul><li><code>sudo npm install -g n</code></li></ul></li><li>降低版本，更新npm<ul><li><code>sudo n 6</code></li></ul></li><li>安装npm<ul><li><code>sudo npm install npm -g</code></li></ul></li></ol></li><li><h3 id="window-环境"><a href="#window-环境" class="headerlink" title="window 环境"></a>window 环境</h3><ul><li>nvm管理node版本<ul><li><code>nvm install 6.16.0</code></li><li><code>nvm use 6.16.0</code></li></ul></li><li>因为切换了新的node环境需要重新安装gitbook-cli<ul><li><code>npm install -g gitbook-cli</code></li></ul></li></ul></li></ul><hr><ul><li>此时运行gitbook2.6.7的命令即可。<ul><li><code>gitbook build --gitbook=2.6.7</code></li></ul></li><li>待转换完成后，将npm版本（例如11.11.1）切回来即可,以免影响其他模块<ul><li>linux &amp; ubuntu<ul><li><code>sudo n 11.11.1</code></li></ul></li><li>window<ul><li><code>nvm use 你的最新版</code></li></ul></li></ul></li></ul><blockquote><p>虽然可以生成HTML并可以跳转，但是生成的HTML无法使用search功能，因为search-pro插件需要gitbook版本大于或等于3.0才能使用</p></blockquote><h2 id="gitbook-生成"><a href="#gitbook-生成" class="headerlink" title="gitbook 生成"></a>gitbook 生成</h2><ol><li><p>运行<code>go get github.com/golang-china/gopl-zh</code>，获取 <a href="https://github.com/golang-china/gopl-zh/archive/master.zip" target="_blank" rel="noopener">源文件</a>。</p></li><li><p>切换到 <code>gopl-zh</code> 目录，运行 <code>gitbook install</code>，安装GitBook插件。</p></li><li><p>运行<code>make</code>，生成<code>_book</code>目录。</p></li><li><p>打开<code>_book/index.html</code>文件。</p></li><li><p>管理员打开 gitbook serve .</p></li><li><pre class="line-numbers language-bash"><code class="language-bash">gitbook pdf <span class="token keyword">.</span>gitbook epub <span class="token keyword">.</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 杂项转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习基础知识</title>
      <link href="/2019/11/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2019/11/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h1><h2 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h2><p>$$<br>I = -log_2p_k<br>$$</p><h2 id="信息熵"><a href="#信息熵" class="headerlink" title="信息熵"></a>信息熵</h2><p>度量样本集合纯度最常用的一种指标，假设当前样本中，集合 <em>D</em> 中第 <em>k</em> 累样本所占的比例为 <code>p_k(k = 1,2,...,|y|)</code><br>$$<br>Ent(D) = - \sum^{|y|}_{k=1}p_k\log_2(p_k)<br>$$<br>Ent(D) 的值越小，则D的纯度越高。</p><a id="more"></a><p>例如：苹果</p><table><thead><tr><th align="center">id</th><th align="center">红</th><th align="center">圆</th><th align="center">甜</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">是</td></tr><tr><td align="center">2</td><td align="center">1</td><td align="center">1</td><td align="center">是</td></tr><tr><td align="center">3</td><td align="center">1</td><td align="center">0</td><td align="center">否</td></tr><tr><td align="center">4</td><td align="center">0</td><td align="center">1</td><td align="center">否</td></tr><tr><td align="center">5</td><td align="center">0</td><td align="center">1</td><td align="center">否</td></tr></tbody></table><p>是不是甜：<br>$$<br>Ent(D) = -(\frac{2}{5}\log_2(\frac{2}{5})+\frac{3}{5}\log_2(\frac{3}{5})<br>        \approx 0.970954<br>$$</p><h2 id="信息增益"><a href="#信息增益" class="headerlink" title="信息增益"></a>信息增益</h2><p>信息增益越大，则意味着使用属性 a 来进行划分所获得 “纯度提升”越大<br>$$<br>Gain(D,a) = Ent(D) - \sum^V_{v=1}\frac{|D^v|}{|D|}Ent(D^v)<br>$$<br>求特征<code>红</code> 的信息增益，先求信息熵：</p><p>红和甜，3个红的2个甜的，2个不红的全不甜：<br>$$<br>D_1 = -(\frac{2}{3}\log_2(\frac{2}{3}) + \frac{1}{3}\log_2(\frac{1}{3}))<br>$$</p><p>$$<br>D_2 = -(\frac{2}{2}\log_2(\frac{2}{2})) = 0<br>$$</p><p>信息增益：<br>$$<br>Gain = Ent(D) - (\frac{3}{5}D_1+\frac{2}{5}D_2) \approx Ent(D)-0.5509775 \approx 0.419973<br>$$<br>如果按照圆，则信息增益为<br>$$<br>Gain = Ent(D)-(-\frac{4}{5}(\frac{2}{4}\log_2(\frac{2}{4}) + \frac{2}{4}\log_2(\frac{2}{4}))+(-\frac{1}{5})(\frac{1}{1}\log_2(\frac{1}{1}))) \approx 0.17095<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github 提交自己修改的代码</title>
      <link href="/2019/11/05/github%E5%A6%82%E4%BD%95%E6%8F%90%E4%BA%A4%E8%87%AA%E5%B7%B1%E4%BF%AE%E6%94%B9%E7%9A%84%E4%BB%A3%E7%A0%81/"/>
      <url>/2019/11/05/github%E5%A6%82%E4%BD%95%E6%8F%90%E4%BA%A4%E8%87%AA%E5%B7%B1%E4%BF%AE%E6%94%B9%E7%9A%84%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤:"></a>步骤:</h1><ol><li><p>fork 一份代码到自己的仓库</p><p>进入 github 要修改项目的主页，点击 fork 按钮，fork 一份代码到自己的仓库</p></li><li><p>clone 出 fork 后的项目</p><p>git clone <a href="https://github.com/xxxx/xxxx.git" target="_blank" rel="noopener">https://github.com/xxxx/xxxx.git</a></p></li><li><p>使本地代码与原始项目关联</p><p>git remote add upstream <a href="https://github.com/xxxx/xxxx.git" target="_blank" rel="noopener">https://github.com/xxxx/xxxx.git</a></p></li><li><p>关联后，拉取原始项目代码到本地</p><blockquote><p>git fetch upstream</p></blockquote></li><li><p>本地进行修改</p></li><li><p>提交代码到自己 fork 的 github 仓库</p><blockquote><p>git commit -a -m “修改内容”</p></blockquote><blockquote><p>git push</p></blockquote></li><li><p>进入 github 上自己 fork 的项目，创建提交请求到原始代码</p><ul><li>New pull request</li><li>Create pull request</li></ul></li><li><p>之后等待原始项目的拥有者 merge 你提交的代码</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang-5</title>
      <link href="/2019/10/28/Golang-5/"/>
      <url>/2019/10/28/Golang-5/</url>
      
        <content type="html"><![CDATA[<h1 id="构建⾼可扩展性的软件架构"><a href="#构建⾼可扩展性的软件架构" class="headerlink" title="构建⾼可扩展性的软件架构"></a>构建⾼可扩展性的软件架构</h1><h2 id="架构模式"><a href="#架构模式" class="headerlink" title="架构模式"></a>架构模式</h2><blockquote><p>An architectural pattern is a general, reusable solution to a commonly occurring problem in software architecture within a given context.</p></blockquote><a id="more"></a><h2 id="Pipe-Filter"><a href="#Pipe-Filter" class="headerlink" title="Pipe-Filter"></a>Pipe-Filter</h2><h3 id="Pipe-Filter-架构"><a href="#Pipe-Filter-架构" class="headerlink" title="Pipe-Filter 架构"></a>Pipe-Filter 架构</h3><p>![img](<a href="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown" target="_blank" rel="noopener">https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown</a> Photos/Pipe-Filter.jpg)</p><h3 id="Pipe-Filter-模式"><a href="#Pipe-Filter-模式" class="headerlink" title="Pipe-Filter 模式"></a>Pipe-Filter 模式</h3><ul><li>⾮常适合与数据处理及数据分析系统</li><li>Filter封装数据处理的功能</li><li>Pipe⽤于连接Filter传递数据或者在异步处理过程中缓冲数据流<ul><li>进程内同步调⽤时，pipe演变为数据在⽅法调⽤间传递</li></ul></li><li>松耦合：Filter只跟数据（格式）耦合</li></ul><h3 id="Filter和组合模式"><a href="#Filter和组合模式" class="headerlink" title="Filter和组合模式"></a>Filter和组合模式</h3><p>![img](<a href="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown" target="_blank" rel="noopener">https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown</a> Photos/Filter.png)</p><p><strong>示例</strong></p><p>“1,2,3” -&gt; SplitFilter ==&gt; [“1,2,3”] -&gt; ToIntFilter ==&gt; [1,2,3] -&gt; SumFilter ==&gt; 6</p><h2 id="Micro-Kernel"><a href="#Micro-Kernel" class="headerlink" title="Micro-Kernel"></a>Micro-Kernel</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>易于扩展</li><li>错误隔离</li><li>保持架构⼀致性</li></ul><h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><ul><li><p>内核包含公共流程或通⽤逻辑</p></li><li><p>将可变或可扩展部分规划为扩展点</p></li><li><p>抽象扩展点⾏为，定义接⼝</p></li><li><p>利⽤插件进⾏扩展</p></li></ul><h2 id="JSON-解析"><a href="#JSON-解析" class="headerlink" title="JSON 解析"></a>JSON 解析</h2><h3 id="内置的JSON解析"><a href="#内置的JSON解析" class="headerlink" title="内置的JSON解析"></a>内置的JSON解析</h3><p>利⽤反射实现，通过 FeildTag 来标识对应的 json 值</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> BasicInfo <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Name <span class="token builtin">string</span> <span class="token string">`json:"name"`</span>    Age <span class="token builtin">int</span> <span class="token string">`json:"age"`</span><span class="token punctuation">}</span><span class="token keyword">type</span> JobInfo <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Skills <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token string">`json:"skills"`</span><span class="token punctuation">}</span><span class="token keyword">type</span> Employee <span class="token keyword">struct</span> <span class="token punctuation">{</span>    BasicInfo BasicInfo <span class="token string">`json:"basic_info"`</span>    JobInfo JobInfo <span class="token string">`json:"job_info"`</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更快的JSON解析"><a href="#更快的JSON解析" class="headerlink" title="更快的JSON解析"></a>更快的JSON解析</h3><p>EasyJSON 采⽤代码⽣成⽽⾮反射</p><p>安装</p><blockquote><p>go get -u github.com/mailru/easyjson/…</p></blockquote><p>使⽤</p><blockquote><p>easyjson -all &lt;结构定义&gt;.go</p></blockquote><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> jsonStr <span class="token operator">=</span> <span class="token string">`{    "basic_info":{          "name":"Mike",        "age":30    },    "job_info":{        "skills":["Java","Go","C"]    }}    `</span><span class="token keyword">func</span> <span class="token function">TestEmbeddedJson</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Employee<span class="token punctuation">)</span>    err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        t<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>e<span class="token punctuation">)</span>    <span class="token keyword">if</span> v<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        t<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestEasyJson</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e <span class="token operator">:=</span> Employee<span class="token punctuation">{</span><span class="token punctuation">}</span>    e<span class="token punctuation">.</span><span class="token function">UnmarshalJSON</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">if</span> v<span class="token punctuation">,</span> err <span class="token operator">:=</span> e<span class="token punctuation">.</span><span class="token function">MarshalJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        t<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">BenchmarkEmbeddedJson</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>    b<span class="token punctuation">.</span><span class="token function">ResetTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    e <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Employee<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            b<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            b<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">BenchmarkEasyJson</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>    b<span class="token punctuation">.</span><span class="token function">ResetTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    e <span class="token operator">:=</span> Employee<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        err <span class="token operator">:=</span> e<span class="token punctuation">.</span><span class="token function">UnmarshalJSON</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            b<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">MarshalJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            b<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="HTTP-Server"><a href="#HTTP-Server" class="headerlink" title="HTTP Server"></a>HTTP Server</h2><h3 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> Handler <span class="token keyword">interface</span> <span class="token punctuation">{</span>     <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> t <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"Hello, world"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/time"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        t <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        timeStr <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"{\"time\": \"%s\"}"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>        w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>timeStr<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="路由规则"><a href="#路由规则" class="headerlink" title="路由规则"></a>路由规则</h3><ul><li>URL 分为两种，末尾是 /：表示⼀个⼦树，后⾯可以跟其他⼦路径；末尾不是 /，表示⼀个叶⼦，固定的路径<ul><li>以 / 结尾的 URL 可以匹配它的任何⼦路径，⽐如 /images/ 会匹配 /images/ cute-cat.jpg</li><li>/images 不会匹配 /images/ cute-cat.jpg</li></ul></li><li>它采⽤最⻓长匹配原则，如果有多个匹配，⼀定采⽤匹配路径最⻓长的那个进⾏处理</li><li>如果没有找到任何匹配项，会返回 404 错误</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>sh serverHandler<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>rw ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    handler <span class="token operator">:=</span> sh<span class="token punctuation">.</span>srv<span class="token punctuation">.</span>Handler    <span class="token keyword">if</span> handler <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        handler <span class="token operator">=</span> DefaultServeMux <span class="token comment" spellcheck="true">// 使⽤缺省的Router</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> req<span class="token punctuation">.</span>RequestURI <span class="token operator">==</span> <span class="token string">"*"</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>Method <span class="token operator">==</span> <span class="token string">"OPTIONS"</span> <span class="token punctuation">{</span>        handler <span class="token operator">=</span> globalOptionsHandler<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    handler<span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>rw<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更好的-Router"><a href="#更好的-Router" class="headerlink" title="更好的 Router"></a>更好的 Router</h3><blockquote><p>第三方 <a href="https://github.com/julienschmidt/httprouter" target="_blank" rel="noopener">https://github.com/julienschmidt/httprouter</a></p></blockquote><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Hello</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> ps httprouter<span class="token punctuation">.</span>Params<span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"hello, %s!\n"</span><span class="token punctuation">,</span> ps<span class="token punctuation">.</span><span class="token function">ByName</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    router <span class="token operator">:=</span> httprouter<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> Index<span class="token punctuation">)</span>    router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/hello/:name"</span><span class="token punctuation">,</span> Hello<span class="token punctuation">)</span>    log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="构建-Restful-服务"><a href="#构建-Restful-服务" class="headerlink" title="构建 Restful 服务"></a>构建 Restful 服务</h2><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> Employee <span class="token keyword">struct</span> <span class="token punctuation">{</span>    ID   <span class="token builtin">string</span> <span class="token string">`json: "id"`</span>    Name <span class="token builtin">string</span> <span class="token string">`json: "name"`</span>    Age  <span class="token builtin">int</span>    <span class="token string">`json: "age"`</span><span class="token punctuation">}</span><span class="token keyword">var</span> empolyeeDB <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>Employee<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    empolyeeDB <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>Employee<span class="token punctuation">{</span><span class="token punctuation">}</span>    empolyeeDB<span class="token punctuation">[</span><span class="token string">"Mike"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>Employee<span class="token punctuation">{</span><span class="token string">"e-1"</span><span class="token punctuation">,</span> <span class="token string">"Mike"</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">}</span>    empolyeeDB<span class="token punctuation">[</span><span class="token string">"Rose"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>Employee<span class="token punctuation">{</span><span class="token string">"e-2"</span><span class="token punctuation">,</span> <span class="token string">"Rose"</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Index</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> <span class="token boolean">_</span> httprouter<span class="token punctuation">.</span>Params<span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Fprint</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"Welcome!\n"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">GetEmpolyeeByName</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> ps httprouter<span class="token punctuation">.</span>Params<span class="token punctuation">)</span> <span class="token punctuation">{</span>    qName <span class="token operator">:=</span> ps<span class="token punctuation">.</span><span class="token function">ByName</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> <span class="token punctuation">(</span>        ok       <span class="token builtin">bool</span>        info     <span class="token operator">*</span>Employee        infoJson <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>        err      <span class="token builtin">error</span>    <span class="token punctuation">)</span>    <span class="token keyword">if</span> info<span class="token punctuation">,</span> ok <span class="token operator">=</span> empolyeeDB<span class="token punctuation">[</span>qName<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>        w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"{\"error\": \"Not Found\"}"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> infoJson<span class="token punctuation">,</span> err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"{\"error\":,\"%s\"}"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>infoJson<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    router <span class="token operator">:=</span> httprouter<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> Index<span class="token punctuation">)</span>    router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/employees/:name"</span><span class="token punctuation">,</span> GetEmpolyeeByName<span class="token punctuation">)</span>    log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><h3 id="性能分析⼯具"><a href="#性能分析⼯具" class="headerlink" title="性能分析⼯具"></a>性能分析⼯具</h3><h3 id="准备⼯作"><a href="#准备⼯作" class="headerlink" title="准备⼯作"></a>准备⼯作</h3><ul><li><p>安装 graphviz</p><blockquote><p> brew install graphviz </p></blockquote></li><li><p>将 $GOPATH/bin 加⼊ $PATH</p><ul><li>Mac OS: 在 .bash_profile 中修改路径</li></ul></li><li><p>安装 go-torch</p><blockquote><p>go get github.com/uber/go-torch</p></blockquote><ul><li>下载并复制 <code>flamegraph.pl</code> （<a href="https://github.com/brendangregg/FlameGraph）⾄\$GOPATH/bin" target="_blank" rel="noopener">https://github.com/brendangregg/FlameGraph）⾄\$GOPATH/bin</a> 路径下 </li><li>将 $GOPATH/bin 加⼊ ​$PATH</li></ul></li></ul><h3 id="通过⽂件⽅式输出-Proﬁle"><a href="#通过⽂件⽅式输出-Proﬁle" class="headerlink" title="通过⽂件⽅式输出 Proﬁle"></a>通过⽂件⽅式输出 Proﬁle</h3><ul><li>灵活性⾼，适⽤于特定代码段的分析</li><li>通过⼿动调⽤ runtime/pprof 的 API</li><li>API 相关⽂档 <a href="https://studygolang.com/static/pkgdoc/pkg/runtime_pprof.htm" target="_blank" rel="noopener">https://studygolang.com/static/pkgdoc/pkg/runtime_pprof.htm</a></li><li>go tool pprof [binary] [binary.prof]</li></ul><h3 id="通过-HTTP-⽅式输出-Proﬁle"><a href="#通过-HTTP-⽅式输出-Proﬁle" class="headerlink" title="通过 HTTP ⽅式输出 Proﬁle"></a>通过 HTTP ⽅式输出 Proﬁle</h3><ul><li>简单，适合于持续性运⾏的应⽤</li><li>在应⽤程序中导⼊ import _ “net/http/pprof”，并启动 http server 即可</li><li>http://<host>:<port>/debug/pprof/</li><li>go tool pprof http://<host>:<port>/debug/pprof/profile?seconds=10 （默认值为30秒）</li><li>go-torch -seconds 10 http://<host>:<port>/debug/pprof/proﬁle</li></ul><h3 id="Go-⽀持的多种-Proﬁle"><a href="#Go-⽀持的多种-Proﬁle" class="headerlink" title="Go ⽀持的多种 Proﬁle"></a>Go ⽀持的多种 Proﬁle</h3><p>go help testflag</p><blockquote><p><a href="https://golang.org/src/runtime/pprof/pprof.go" target="_blank" rel="noopener">https://golang.org/src/runtime/pprof/pprof.go</a></p></blockquote><h2 id="性能调优示例"><a href="#性能调优示例" class="headerlink" title="性能调优示例"></a>性能调优示例</h2><h3 id="常⻅见分析指标"><a href="#常⻅见分析指标" class="headerlink" title="常⻅见分析指标"></a>常⻅见分析指标</h3><ul><li>Wall Time</li><li>CPU Time</li><li>Block Time</li><li>Memory allocation</li><li>GC times/time spent</li></ul><h3 id="go-test-输出-proﬁle"><a href="#go-test-输出-proﬁle" class="headerlink" title="go test 输出 proﬁle"></a>go test 输出 proﬁle</h3><p>go test -bench=. -cpuprofile=cpu.prof </p><p>go test -bench=. -blockprofile=block.prof </p><p>go tool pprof cpu.prof</p><p>go help testflag</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>go test -bench=. -cpuprofile=cpu.prof </p><p>go tool pprof cpu.prof </p><p>go-torch cpu.prof</p><h2 id="别让性能被“锁”住"><a href="#别让性能被“锁”住" class="headerlink" title="别让性能被“锁”住"></a>别让性能被“锁”住</h2><h3 id="sync-Map"><a href="#sync-Map" class="headerlink" title="sync.Map"></a>sync.Map</h3><ul><li><p>适合读多写少，且 Key 相对稳定的环境</p></li><li><p>采⽤了空间换时间的⽅案，并且采⽤指针的⽅式间接实现值的映射，所以存储空间会较 built-in map ⼤</p></li></ul><h3 id="Concurrent-Map"><a href="#Concurrent-Map" class="headerlink" title="Concurrent Map"></a>Concurrent Map</h3><ul><li>适⽤于读写都很频繁的情况</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p>减少锁的影响范围</p></li><li><p>减少发⽣锁冲突的概率</p><ul><li><p>sync.Map </p></li><li><p>ConcurrentMap </p></li></ul></li><li><p>避免锁的使⽤</p><ul><li>LAMX Disruptor：<a href="https://martinfowler.com/articles/lmax.html" target="_blank" rel="noopener">https://martinfowler.com/articles/lmax.html</a></li></ul></li></ul><h2 id="GC-友好的代码"><a href="#GC-友好的代码" class="headerlink" title="GC 友好的代码"></a>GC 友好的代码</h2><h3 id="避免内存分配和复制"><a href="#避免内存分配和复制" class="headerlink" title="避免内存分配和复制"></a>避免内存分配和复制</h3><ul><li>复杂对象尽量传递引⽤<ul><li>数组的传递</li><li>结构体传递</li></ul></li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">const</span> NumOfElems <span class="token operator">=</span> <span class="token number">1000</span><span class="token keyword">type</span> Content <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Detail <span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">withValue</span><span class="token punctuation">(</span>arr <span class="token punctuation">[</span>NumOfElems<span class="token punctuation">]</span>Content<span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//    fmt.Println(&amp;arr[2])</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">withReference</span><span class="token punctuation">(</span>arr <span class="token operator">*</span><span class="token punctuation">[</span>NumOfElems<span class="token punctuation">]</span>Content<span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//b := *arr</span>    <span class="token comment" spellcheck="true">//    fmt.Println(&amp;arr[2])</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">BenchmarkPassingArrayWithValue</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> arr <span class="token punctuation">[</span>NumOfElems<span class="token punctuation">]</span>Content    b<span class="token punctuation">.</span><span class="token function">ResetTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token function">withValue</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    b<span class="token punctuation">.</span><span class="token function">StopTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">BenchmarkPassingArrayWithRef</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> arr <span class="token punctuation">[</span>NumOfElems<span class="token punctuation">]</span>Content    b<span class="token punctuation">.</span><span class="token function">ResetTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token function">withReference</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    b<span class="token punctuation">.</span><span class="token function">StopTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*44                  25730890 ns/op        80003089 B/op           1 allocs/op1000000000        0.317 ns/op           0 B/op                      0 allocs/op*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="打开-GC-⽇志"><a href="#打开-GC-⽇志" class="headerlink" title="打开 GC ⽇志"></a>打开 GC ⽇志</h3><p>只要在程序执⾏之前加上环境变量 </p><blockquote><p>GODEBUG=gctrace=1</p></blockquote><p>如：</p><blockquote><p>GODEBUG=gctrace=1 go test -bench=.  </p><p>GODEBUG=gctrace=1 go run main.go</p></blockquote><p><strong>⽇志详细信息参考： <a href="https://godoc.org/runtime" target="_blank" rel="noopener">https://godoc.org/runtime</a></strong></p><h3 id="go-tool-trace"><a href="#go-tool-trace" class="headerlink" title="go tool trace"></a>go tool trace</h3><p>普通程序输出 trace 信息</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"trace.out"</span><span class="token punctuation">)</span>     <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>         <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>     <span class="token punctuation">}</span>     <span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    err <span class="token operator">=</span> trace<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>     <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>     <span class="token punctuation">}</span>     <span class="token keyword">defer</span> trace<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// Your program here</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试程序输出 trace 信息</p><blockquote><p>go test -bench=文件 -trace=trace_val.out</p></blockquote><p>可视化 trace 信息</p><blockquote><p>go tool trace trace_val.out</p></blockquote><h3 id="避免内存分配和复制-1"><a href="#避免内存分配和复制-1" class="headerlink" title="避免内存分配和复制"></a>避免内存分配和复制</h3><ul><li><p>初始化⾄合适的⼤⼩</p><ul><li>⾃动扩容是有代价的</li></ul></li><li><p>复⽤内存</p></li></ul><h2 id="⾼效的字符串连接"><a href="#⾼效的字符串连接" class="headerlink" title="⾼效的字符串连接"></a>⾼效的字符串连接</h2><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">func</span> <span class="token function">BenchmarkSprintf</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>    b<span class="token punctuation">.</span><span class="token function">ResetTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> idx <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> idx <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> idx<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> s <span class="token builtin">string</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>            s <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%v%v"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> i<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    b<span class="token punctuation">.</span><span class="token function">StopTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">BenchmarkStringBuilder</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>    b<span class="token punctuation">.</span><span class="token function">ResetTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> idx <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> idx <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> idx<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> builder strings<span class="token punctuation">.</span>Builder        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>            builder<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token boolean">_</span> <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    b<span class="token punctuation">.</span><span class="token function">StopTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">BenchmarkBytesBuf</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>    b<span class="token punctuation">.</span><span class="token function">ResetTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> idx <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> idx <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> idx<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> buf bytes<span class="token punctuation">.</span>Buffer        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>            buf<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token boolean">_</span> <span class="token operator">=</span> buf<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    b<span class="token punctuation">.</span><span class="token function">StopTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">BenchmarkStringAdd</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>    b<span class="token punctuation">.</span><span class="token function">ResetTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> idx <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> idx <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> idx<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> s <span class="token builtin">string</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>            s <span class="token operator">+=</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    b<span class="token punctuation">.</span><span class="token function">StopTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>StringBuilder &gt; BytesBuf &gt;  StringAdd &gt; Sprintf</strong> (1535 &gt; 2216 &gt; 9502 &gt; 22369)</p></blockquote><h2 id="⾼可⽤性架构设计"><a href="#⾼可⽤性架构设计" class="headerlink" title="⾼可⽤性架构设计"></a>⾼可⽤性架构设计</h2><h3 id="⾯向错误的设计"><a href="#⾯向错误的设计" class="headerlink" title="⾯向错误的设计"></a>⾯向错误的设计</h3><h4 id="隔离"><a href="#隔离" class="headerlink" title="隔离"></a>隔离</h4><ul><li>隔离错误 — 设计</li><li>隔离错误 — 部署</li><li>重⽤ vs 隔离 (逻辑结构的重⽤ vs 部署结构的隔离)</li><li>冗余</li><li>单点失效</li><li>限流</li><li>慢响应<ul><li>A quick rejection is better than a slow response.</li></ul></li><li>不要⽆休⽌的等待<ul><li>给阻塞操作都加上⼀个期限</li></ul></li><li>错误传递</li><li>断路器</li></ul><p>![img](<a href="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown" target="_blank" rel="noopener">https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown</a> Photos/duanluqi.png)</p><h3 id="⾯向恢复的设计"><a href="#⾯向恢复的设计" class="headerlink" title="⾯向恢复的设计"></a>⾯向恢复的设计</h3><ul><li><p>健康检查</p><ul><li>池化资源耗尽 </li><li>死锁</li></ul></li><li><p>Let it Crash!</p><pre class="line-numbers language-go"><code class="language-go">  <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>           log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>“recovered <span class="token builtin">panic</span>”<span class="token punctuation">,</span>err<span class="token punctuation">)</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>构建可恢复的系统</p><ul><li>拒绝单体系统</li><li>⾯向错误和恢复的设计<ul><li>在依赖服务不可⽤时，可以继续存活</li><li>快速启动</li><li>⽆状态</li></ul></li></ul></li><li><p>与客户端协商</p></li></ul><h3 id="Chaos-Engineering"><a href="#Chaos-Engineering" class="headerlink" title="Chaos Engineering"></a>Chaos Engineering</h3><p>如果问题经常发⽣⼈们就会学习和思考解决它的⽅法</p><h4 id="Chaos-Engineering-原则"><a href="#Chaos-Engineering-原则" class="headerlink" title="Chaos Engineering 原则"></a>Chaos Engineering 原则</h4><ul><li>Build a Hypothesis around Steady State Behavior</li><li>Vary Real-world Events</li><li>Run Experiments in Production</li><li>Automate Experiments to Run Continuously</li><li>Minimize Blast Radius</li></ul><h4 id="相关开源项⽬"><a href="#相关开源项⽬" class="headerlink" title="相关开源项⽬"></a>相关开源项⽬</h4><blockquote><p><a href="https://github.com/Netﬂix/chaosmonkey" target="_blank" rel="noopener">https://github.com/Netﬂix/chaosmonkey</a></p></blockquote><blockquote><p><a href="https://github.com/easierway/service_decorators/blob/master/README.md" target="_blank" rel="noopener">https://github.com/easierway/service_decorators/blob/master/README.md</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang-4</title>
      <link href="/2019/10/28/Golang-4/"/>
      <url>/2019/10/28/Golang-4/</url>
      
        <content type="html"><![CDATA[<h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><h3 id="内置单元测试框架"><a href="#内置单元测试框架" class="headerlink" title="内置单元测试框架"></a>内置单元测试框架</h3><ul><li><p>Fail, Error: 该测试失败，该测试继续，其他测试继续执⾏</p></li><li><p>FailNow, Fatal: 该测试失败，该测试中⽌，其他测试继续执⾏</p></li><li><p>代码覆盖率</p><p>  go test -v - cover</p></li><li><p>断⾔</p></li></ul><pre><code>https://github.com/stretchr/testify</code></pre><a id="more"></a><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"testing"</span>    <span class="token string">"github.com/stretchr/testify/assert"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">TestSquare</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    inputs <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>    expected <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        ret <span class="token operator">:=</span> <span class="token function">square</span><span class="token punctuation">(</span>inputs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> expected<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// if ret != expected[i] {</span>        <span class="token comment" spellcheck="true">//     t.Errorf("input is %d, the expected is %d, the actual %d", inputs[i], expected[i], ret)</span>        <span class="token comment" spellcheck="true">// }</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestErrorInCode</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Start"</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"Error"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"End"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestFailInCode</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Start"</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"Error"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"End"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Benchmark"><a href="#Benchmark" class="headerlink" title="Benchmark"></a>Benchmark</h2><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">BenchmarkConcatStringByAdd</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//与性能测试⽆关的代码</span>    b<span class="token punctuation">.</span><span class="token function">ResetTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//测试代码</span>    <span class="token punctuation">}</span>    b<span class="token punctuation">.</span><span class="token function">StopTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//与性能测试⽆关的代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestConcatStingByAdd</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    assert <span class="token operator">:=</span> assert<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>    elems <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">}</span>    ret <span class="token operator">:=</span> <span class="token string">""</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> elem <span class="token operator">:=</span> <span class="token keyword">range</span> elems <span class="token punctuation">{</span>        ret <span class="token operator">+=</span> elem    <span class="token punctuation">}</span>    assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">"12345"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestConcatStringByBytesBuffer</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    assert <span class="token operator">:=</span> assert<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>    <span class="token keyword">var</span> buf bytes<span class="token punctuation">.</span>Buffer    elems <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> elem <span class="token operator">:=</span> <span class="token keyword">range</span> elems <span class="token punctuation">{</span>        buf<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">"12345"</span><span class="token punctuation">,</span> buf<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">BenchmarkConcatStringByAdd</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>    elems <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">}</span>    b<span class="token punctuation">.</span><span class="token function">ResetTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        ret <span class="token operator">:=</span> <span class="token string">""</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> elem <span class="token operator">:=</span> <span class="token keyword">range</span> elems <span class="token punctuation">{</span>            ret <span class="token operator">+=</span> elem        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    b<span class="token punctuation">.</span><span class="token function">StopTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">BenchmarkConcatStringByBytesBuffer</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>    elems <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">}</span>    b<span class="token punctuation">.</span><span class="token function">ResetTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> buf bytes<span class="token punctuation">.</span>Buffer        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> elem <span class="token operator">:=</span> <span class="token keyword">range</span> elems <span class="token punctuation">{</span>            buf<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    b<span class="token punctuation">.</span><span class="token function">StopTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*BenchmarkConcatStringByAdd-4                7114699           231 ns/op          16 B/op           4 allocs/opBenchmarkConcatStringByBytesBuffer-4       10781800           117 ns/op          64 B/op           1 allocs/op*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="BDD-in-Go"><a href="#BDD-in-Go" class="headerlink" title="BDD in Go"></a>BDD in Go</h2><p><a href="https://github.com/smartystreets/goconvey" target="_blank" rel="noopener">项⽬⽹站</a><br>安装  </p><blockquote><p>go get -u github.com/smartystreets/goconvey/convey</p></blockquote><p>启动 WEB UI</p><blockquote><p>$GOPATH/bin/goconvey</p></blockquote><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"testing"</span>    <span class="token comment" spellcheck="true">//类似python 的 form numpy import *</span>    <span class="token punctuation">.</span> <span class="token string">"github.com/smartystreets/goconvey/convey"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">TestSpec</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">Convey</span><span class="token punctuation">(</span><span class="token string">"Given 2 even numbers"</span><span class="token punctuation">,</span> t<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        a <span class="token operator">:=</span> <span class="token number">2</span>        b <span class="token operator">:=</span> <span class="token number">4</span>        <span class="token function">Convey</span><span class="token punctuation">(</span><span class="token string">"When add the two numbers"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            c <span class="token operator">:=</span> a <span class="token operator">+</span> b            <span class="token function">Convey</span><span class="token punctuation">(</span><span class="token string">"Then the reult is still even"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">So</span><span class="token punctuation">(</span>c<span class="token operator">&amp;</span><span class="token number">0x1</span><span class="token punctuation">,</span> ShouldEqual<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="反射编程"><a href="#反射编程" class="headerlink" title="反射编程"></a>反射编程</h2><h3 id="reﬂect-TypeOf-vs-reﬂect-ValueOf"><a href="#reﬂect-TypeOf-vs-reﬂect-ValueOf" class="headerlink" title="reﬂect.TypeOf vs. reﬂect.ValueOf"></a>reﬂect.TypeOf vs. reﬂect.ValueOf</h3><ul><li>reﬂect.TypeOf 返回类型 (reﬂect.Type)</li><li>reﬂect.ValueOf 返回值 (reﬂect.Value)</li><li>可以从 reﬂect.Value 获得类型</li><li>通过 kind 的来判断类型</li></ul><h3 id="判断类型—Kind"><a href="#判断类型—Kind" class="headerlink" title="判断类型—Kind()"></a>判断类型—Kind()</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>Invalid Kind <span class="token operator">=</span> <span class="token boolean">iota</span>Bool Int Int8 Int16 Int32 Int64Uint Uint8 Uint16 Uint32 Uint64…<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="利⽤反射编写灵活的代码"><a href="#利⽤反射编写灵活的代码" class="headerlink" title="利⽤反射编写灵活的代码"></a>利⽤反射编写灵活的代码</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 按名字访问结构的成员</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 按名字访问结构的⽅法</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">MethodByName</span><span class="token punctuation">(</span><span class="token string">"UpdateAge"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>reflect<span class="token punctuation">.</span>Value<span class="token punctuation">{</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Struct-Tag"><a href="#Struct-Tag" class="headerlink" title="Struct Tag"></a>Struct Tag</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> BasicInfo <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Name <span class="token builtin">string</span> <span class="token string">`json:"name"`</span>    Age <span class="token builtin">int</span> <span class="token string">`json:"age"`</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="访问-StructTag"><a href="#访问-StructTag" class="headerlink" title="访问 StructTag"></a>访问 StructTag</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">if</span> nameField<span class="token punctuation">,</span> ok <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span><span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>    t<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"Failed to get 'Name' field."</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"Tag:format"</span><span class="token punctuation">,</span> nameField<span class="token punctuation">.</span>Tag<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"format"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>Reﬂect.Type 和 Reﬂect.Value 都有 FieldByName ⽅法，注意他们的区别</strong></p></blockquote><h5 id="完整程序"><a href="#完整程序" class="headerlink" title="完整程序"></a>完整程序</h5><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestTypeAndValue</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> f <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">10</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">CheckType</span><span class="token punctuation">(</span>v <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    t <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>    <span class="token keyword">switch</span> t<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Float32<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Float64<span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Float"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Int<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Int32<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Int64<span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Integer"</span><span class="token punctuation">)</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Unknown"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestBasicType</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> f <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">12</span>    <span class="token function">CheckType</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>f<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> Employee <span class="token keyword">struct</span> <span class="token punctuation">{</span>    EmployeeID <span class="token builtin">string</span>    Name       <span class="token builtin">string</span> <span class="token string">`format:"normal"`</span> <span class="token comment" spellcheck="true">//Struct Tag</span>    Age        <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>Employee<span class="token punctuation">)</span> <span class="token function">UpdateAge</span><span class="token punctuation">(</span>newVal <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span>Age <span class="token operator">=</span> newVal<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestInvokeByName</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e <span class="token operator">:=</span> <span class="token operator">&amp;</span>Employee<span class="token punctuation">{</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"Mike"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//按名字获取成员</span>    t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"Name: value(%[1]v), Type(%[1]T) "</span><span class="token punctuation">,</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> nameField<span class="token punctuation">,</span> ok <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span><span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>        t<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"Failed to get 'Name' field."</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"Tag:format"</span><span class="token punctuation">,</span> nameField<span class="token punctuation">.</span>Tag<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"format"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">MethodByName</span><span class="token punctuation">(</span><span class="token string">"UpdateAge"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">Call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>reflect<span class="token punctuation">.</span>Value<span class="token punctuation">{</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"Updated Age:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="reflect-DeepEqual"><a href="#reflect-DeepEqual" class="headerlink" title="reflect.DeepEqual"></a>reflect.DeepEqual</h3><p>反射比较 slice 和 map</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> Customer <span class="token keyword">struct</span> <span class="token punctuation">{</span>    CookieID <span class="token builtin">string</span>    Name     <span class="token builtin">string</span>    Age      <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestDeepEqual</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    a <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">"three"</span><span class="token punctuation">}</span>    b <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token string">"three"</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//    t.Log(a == b)</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"a==b?"</span><span class="token punctuation">,</span> reflect<span class="token punctuation">.</span><span class="token function">DeepEqual</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>    s1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>    s2 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>    s3 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"s1 == s2?"</span><span class="token punctuation">,</span> reflect<span class="token punctuation">.</span><span class="token function">DeepEqual</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"s1 == s3?"</span><span class="token punctuation">,</span> reflect<span class="token punctuation">.</span><span class="token function">DeepEqual</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s3<span class="token punctuation">)</span><span class="token punctuation">)</span>    c1 <span class="token operator">:=</span> Customer<span class="token punctuation">{</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"Mike"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">}</span>    c2 <span class="token operator">:=</span> Customer<span class="token punctuation">{</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"Mike"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c1 <span class="token operator">==</span> c2<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">DeepEqual</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="“万能”程序（利用反射）"><a href="#“万能”程序（利用反射）" class="headerlink" title="“万能”程序（利用反射）"></a>“万能”程序（利用反射）</h2><h3 id="关于“反射”你应该知道的"><a href="#关于“反射”你应该知道的" class="headerlink" title="关于“反射”你应该知道的"></a>关于“反射”你应该知道的</h3><ul><li>提⾼了程序的灵活性</li><li>降低了程序的可读性</li><li>降低了程序的性能</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> Employee <span class="token keyword">struct</span> <span class="token punctuation">{</span>    EmployeeID <span class="token builtin">string</span>    Name       <span class="token builtin">string</span> <span class="token string">`format:"normal"`</span>    Age        <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>Employee<span class="token punctuation">)</span> <span class="token function">UpdateAge</span><span class="token punctuation">(</span>newVal <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span>Age <span class="token operator">=</span> newVal<span class="token punctuation">}</span><span class="token keyword">type</span> Customer <span class="token keyword">struct</span> <span class="token punctuation">{</span>    CookieID <span class="token builtin">string</span>    Name     <span class="token builtin">string</span>    Age      <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">fillBySettings</span><span class="token punctuation">(</span>st <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> settings <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// func (v Value) Elem() Value</span>    <span class="token comment" spellcheck="true">// Elem returns the value that the interface v contains or that the pointer v points to.</span>    <span class="token comment" spellcheck="true">// It panics if v's Kind is not Interface or Ptr.</span>    <span class="token comment" spellcheck="true">// It returns the zero Value if v is nil.</span>    <span class="token keyword">if</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Ptr <span class="token punctuation">{</span>        <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"the first param should be a pointer to the struct type."</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Elem() 获取指针指向的值</span>    <span class="token keyword">if</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Struct <span class="token punctuation">{</span>        <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"the first param should be a pointer to the struct type."</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> settings <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"settings is nil."</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> <span class="token punctuation">(</span>        field reflect<span class="token punctuation">.</span>StructField        ok    <span class="token builtin">bool</span>    <span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 核心代码</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> settings <span class="token punctuation">{</span>        <span class="token keyword">if</span> field<span class="token punctuation">,</span> ok <span class="token operator">=</span> <span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>            <span class="token keyword">continue</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> field<span class="token punctuation">.</span>Type <span class="token operator">==</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>            vstr <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span>            vstr <span class="token operator">=</span> vstr<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            vstr<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestFillNameAndAge</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    settings <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Mike"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">}</span>    e <span class="token operator">:=</span> Employee<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">fillBySettings</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>e<span class="token punctuation">,</span> settings<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    c <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Customer<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">fillBySettings</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> settings<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token operator">*</span>c<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="“不安全”编程"><a href="#“不安全”编程" class="headerlink" title="“不安全”编程"></a>“不安全”编程</h2><h3 id="“不安全”⾏为的危险性"><a href="#“不安全”⾏为的危险性" class="headerlink" title="“不安全”⾏为的危险性"></a>“不安全”⾏为的危险性</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 指针转换</span>i <span class="token operator">:=</span> <span class="token number">10</span>f <span class="token operator">:=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">float64</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="合理的冒险"><a href="#合理的冒险" class="headerlink" title="合理的冒险"></a>合理的冒险</h3><ul><li>合理类型转化</li><li>原⼦操作 (atomic)</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> Customer <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Name <span class="token builtin">string</span>    Age  <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestUnsage</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    i <span class="token operator">:=</span> <span class="token number">10</span>    f <span class="token operator">:=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">float64</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// The Cases is suitable for unsafe</span><span class="token keyword">type</span> MyInt <span class="token builtin">int</span><span class="token comment" spellcheck="true">// 合理的类型转化</span><span class="token keyword">func</span> <span class="token function">TestConvert</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span>    b <span class="token operator">:=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span>MyInt<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 原子类操作</span><span class="token keyword">func</span> <span class="token function">TestAtomic</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> shareBufPtr unsafe<span class="token punctuation">.</span>Pointer    writeDataFn <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        data <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>            data <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> i<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        atomic<span class="token punctuation">.</span><span class="token function">StorePointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>shareBufPtr<span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    readDataFn <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        data <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">LoadPointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>shareBufPtr<span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup    <span class="token function">writeDataFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>                <span class="token function">writeDataFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>                <span class="token function">readDataFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang-3</title>
      <link href="/2019/10/27/Golang-3/"/>
      <url>/2019/10/27/Golang-3/</url>
      
        <content type="html"><![CDATA[<h1 id="协程机制"><a href="#协程机制" class="headerlink" title="协程机制"></a>协程机制</h1><h2 id="Thead-vs-Groutine"><a href="#Thead-vs-Groutine" class="headerlink" title="Thead vs. Groutine"></a>Thead vs. Groutine</h2><ol><li><p>创建时默认的 stack 的⼤⼩</p><ul><li>JDK5 以后 Java Thread stack 默认为1M</li><li>Groutine 的 Stack 初始化⼤⼩为2K</li></ul></li><li><p>和 KSE（Kernel Space Entity）的对应关系</p><ul><li>Java Thread 是 1:1</li><li>Groutine 是 M:N</li></ul></li></ol><a id="more"></a><p> ![img](<a href="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown" target="_blank" rel="noopener">https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown</a> Photos/11.png)</p><h3 id="Groutine-M-N-原因"><a href="#Groutine-M-N-原因" class="headerlink" title="Groutine M:N 原因"></a>Groutine M:N 原因</h3><p>![img](<a href="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown" target="_blank" rel="noopener">https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown</a> Photos/12.jpg)</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestGroutine</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 加上 go 就是在协程里运行</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// i 传入</span>        <span class="token comment" spellcheck="true">//i 被共享，所以不可以下面这么写，加上锁才行</span>        <span class="token comment" spellcheck="true">/*        go func() {            fmt.Println(i)        }()        */</span>    <span class="token punctuation">}</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="共享内存并发机制"><a href="#共享内存并发机制" class="headerlink" title="共享内存并发机制"></a>共享内存并发机制</h2><h3 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h3><p><code>sync</code> package 内的 <code>Mutex</code> <code>RWLock</code></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestCounter</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    counter <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            counter<span class="token operator">++</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"counter = %d"</span><span class="token punctuation">,</span> counter<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//安全的</span><span class="token keyword">func</span> <span class="token function">TestCounterThreadSafe</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> mut sync<span class="token punctuation">.</span>Mutex    counter <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mut<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            mut<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            counter<span class="token operator">++</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//协程执行太快，没得到正确结果就退掉了，所以需要等待</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"counter = %d"</span><span class="token punctuation">,</span> counter<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="WaitGroup"><a href="#WaitGroup" class="headerlink" title="WaitGroup"></a>WaitGroup</h3><p>类似 java 的 CountDownLatch 和 join</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestCounterWaitGroup</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> mut sync<span class="token punctuation">.</span>Mutex    <span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup    counter <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mut<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            mut<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            counter<span class="token operator">++</span>            wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"counter = %d"</span><span class="token punctuation">,</span> counter<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CSP-并发机制-Communicating-sequential-processes"><a href="#CSP-并发机制-Communicating-sequential-processes" class="headerlink" title="CSP 并发机制 (Communicating sequential processes)"></a>CSP 并发机制 (Communicating sequential processes)</h2><p>用于描述两个独立的并发实体通过共享的通讯 channel (管道)进行通信的并发模型。</p><p>CSP中channel是第一类对象，它不关注发送消息的实体，而关注与发送消息时使用的channel。</p><h3 id="CSP-vs-Actor"><a href="#CSP-vs-Actor" class="headerlink" title="CSP vs. Actor"></a>CSP vs. Actor</h3><ul><li>和 Actor 的直接通讯不同，CSP 模式则是通过 Channel 进⾏通讯的，更松耦合⼀些</li><li>消息存储：Go 中 channel 是有容量限制并且独⽴于处理 Groutine，⽽如 Erlang，Actor 模式中的 mailbox 容量是⽆限的，接收进程也总是被动地处理消息。</li></ul><h4 id="Actor-Medel"><a href="#Actor-Medel" class="headerlink" title="Actor Medel"></a>Actor Medel</h4><p>![img](<a href="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown" target="_blank" rel="noopener">https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown</a> Photos/actor_model.png)</p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown Photos/erlang_actor.png" alt="img" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown Photos/go_channel.png" alt="img" style="zoom:50%;" /><h3 id="GO-的两种channel-机制"><a href="#GO-的两种channel-机制" class="headerlink" title="GO 的两种channel 机制"></a>GO 的两种channel 机制</h3><ul><li><p>典型的 channel：两方必须同时在，接收方存在才可以发送消息，发完后也必须等待，直到接收后才算完成。</p></li><li><p>buffered channel：channnel 有容量，若容量满了，需要接受消息方拿掉一个消息，发送方才可以放进去，对接受消息也一样，空的时候就等待</p></li></ul><h3 id="异步返回"><a href="#异步返回" class="headerlink" title="异步返回"></a>异步返回</h3><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> FutureTask<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    FutureTask<span class="token operator">&lt;</span>String<span class="token operator">></span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token string">"Do something"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> task<span class="token punctuation">;</span><span class="token punctuation">}</span>FutureTask<span class="token operator">&lt;</span>String<span class="token operator">></span> ret <span class="token operator">=</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>"Do something <span class="token keyword">else</span>”<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 简单的</span><span class="token keyword">func</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"Done"</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">otherTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"working on something else"</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Task is done."</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestService</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">otherTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// chan 通道，实现 futureTask</span><span class="token keyword">func</span> <span class="token function">AsyncService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">chan</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 声明 channel</span>    <span class="token comment" spellcheck="true">// retCh := make(chan string)</span>    <span class="token comment" spellcheck="true">// 改为 buffered channel，否则怎协程运行完会一直阻塞</span>    retCh <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ret <span class="token operator">:=</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"returned result."</span><span class="token punctuation">)</span>        retCh <span class="token operator">&lt;-</span> ret        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"service exited."</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> retCh<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*retCh &lt;- ret 往 channel 放数据&lt;-retCh 取数据*/</span><span class="token keyword">func</span> <span class="token function">TestAsyncService</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    retCh <span class="token operator">:=</span> <span class="token function">AsyncService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">otherTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>retCh<span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*原本的working on something elsereturned result.Task is done.Doneservice exited.改buffered channelworking on something elsereturned result.service exited.Task is done.Done*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多路选择和超时控制"><a href="#多路选择和超时控制" class="headerlink" title="多路选择和超时控制"></a>多路选择和超时控制</h2><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 多渠道的选择</span><span class="token comment" spellcheck="true">// retCh1 和 retCh2 都等待时，被挑选的顺序是随机的</span><span class="token keyword">select</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> ret <span class="token operator">:=</span> <span class="token operator">&lt;-</span>retCh1<span class="token punctuation">:</span>        t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"result %s"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span>    <span class="token keyword">case</span> ret <span class="token operator">:=</span><span class="token operator">&lt;-</span>retCh2<span class="token punctuation">:</span>        t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"result %s"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        t<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>“No one returned”<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 超时控制</span><span class="token keyword">select</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> ret <span class="token operator">:=</span> <span class="token operator">&lt;-</span>retCh<span class="token punctuation">:</span>        t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"result %s"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        t<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"time out"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">500</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"Done"</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">AsyncService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">chan</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    retCh <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ret <span class="token operator">:=</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"returned result."</span><span class="token punctuation">)</span>        retCh <span class="token operator">&lt;-</span> ret        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"service exited."</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> retCh<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestAsyncService</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">select</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> ret <span class="token operator">:=</span> <span class="token operator">&lt;-</span><span class="token function">AsyncService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        t<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"time out"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    retCh <span class="token operator">:=</span> <span class="token function">AsyncService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>retCh<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="channel-的关闭和⼴播"><a href="#channel-的关闭和⼴播" class="headerlink" title="channel 的关闭和⼴播"></a>channel 的关闭和⼴播</h2><h3 id="channel-的关闭"><a href="#channel-的关闭" class="headerlink" title="channel 的关闭"></a>channel 的关闭</h3><ul><li>向关闭的 channel 发送数据，会导致 panic</li><li>v, ok &lt;-ch; ok 为 bool 值，true 表示正常接受，false 表示通道关闭</li><li>所有的 channel 接收者都会在 channel 关闭时，⽴刻从阻塞等待中返回且上述 ok 值为 false。这个⼴播机制常被利⽤，进⾏向多个订阅者同时发送信号。如：退出信号。</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">dataProducer</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>            ch <span class="token operator">&lt;-</span> i        <span class="token punctuation">}</span>        <span class="token function">close</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//关闭 channel</span>        wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">dataReceiver</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> data<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">;</span> ok <span class="token punctuation">{</span>                fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestCloseChannel</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token function">dataProducer</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wg<span class="token punctuation">)</span>    wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token function">dataReceiver</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wg<span class="token punctuation">)</span>    wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token function">dataReceiver</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wg<span class="token punctuation">)</span>    wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token function">dataReceiver</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wg<span class="token punctuation">)</span>    wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="任务的取消"><a href="#任务的取消" class="headerlink" title="任务的取消"></a>任务的取消</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 获取取消通知</span><span class="token keyword">func</span> <span class="token function">isCancelled</span><span class="token punctuation">(</span>cancelChan <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">select</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>cancelChan<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//发送取消消息</span><span class="token keyword">func</span> <span class="token function">cancel_1</span><span class="token punctuation">(</span>cancelChan <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cancelChan <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//只是个随意的空结构</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//通过关闭 Channel 取消 </span><span class="token keyword">func</span> <span class="token function">cancel_2</span><span class="token punctuation">(</span>cancelChan <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">close</span><span class="token punctuation">(</span>cancelChan<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 利用广播机制</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestCancel</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cancelChan <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> cancelCh <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token function">isCancelled</span><span class="token punctuation">(</span>cancelChan<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span>                <span class="token punctuation">}</span>                time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"Done"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> cancelChan<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// cancel_1(cancelChan)</span>    <span class="token function">cancel_2</span><span class="token punctuation">(</span>cancelChan<span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Context-与任务取消"><a href="#Context-与任务取消" class="headerlink" title="Context 与任务取消"></a>Context 与任务取消</h4><p>![img](<a href="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown" target="_blank" rel="noopener">https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown</a> Photos/related_cancel.jpg)</p><h5 id="context"><a href="#context" class="headerlink" title="context"></a>context</h5><ul><li>根 Context：通过 <code>context.Background ()</code> 创建</li><li>⼦ Context：<code>context.WithCancel(parentContext)</code> 创建</li><li><code>ctx, cancel := context.WithCancel(context.Background())</code></li><li>当前 Context 被取消时，基于他的⼦ context 都会被取消</li><li>接收取消通知 &lt;- ctx.Done()</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 任务的取消 的另一种完成形式</span><span class="token keyword">func</span> <span class="token function">isCancelled</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">select</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestCancel</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithCancel</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token function">isCancelled</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span>                <span class="token punctuation">}</span>                time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"Cancelled"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常⻅见并发任务"><a href="#常⻅见并发任务" class="headerlink" title="常⻅见并发任务"></a>常⻅见并发任务</h2><h3 id="仅执⾏⼀次（类似懒汉式单例）"><a href="#仅执⾏⼀次（类似懒汉式单例）" class="headerlink" title="仅执⾏⼀次（类似懒汉式单例）"></a>仅执⾏⼀次（类似懒汉式单例）</h3><h4 id="Java-1"><a href="#Java-1" class="headerlink" title="Java"></a>Java</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton INSTANCE <span class="token operator">=</span> null<span class="token punctuation">;</span>    privata <span class="token function">SingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>INSTANCE <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span><span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>INSTANCE <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Go-1"><a href="#Go-1" class="headerlink" title="Go"></a>Go</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> once sync<span class="token punctuation">.</span>Once<span class="token keyword">var</span> obj <span class="token operator">*</span>SingletonObj<span class="token keyword">func</span> <span class="token function">GetSingletonObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>SingletonObj <span class="token punctuation">{</span>    once<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Create Singleton obj."</span><span class="token punctuation">)</span>        obj <span class="token operator">=</span> <span class="token operator">&amp;</span>SingletonObj<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> obj<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="详细版"><a href="#详细版" class="headerlink" title="详细版"></a>详细版</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> Singleton <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> singleInstance <span class="token operator">*</span>Singleton<span class="token keyword">var</span> once sync<span class="token punctuation">.</span>Once<span class="token keyword">func</span> <span class="token function">GetSingletonObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Singleton <span class="token punctuation">{</span>    once<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Create Obj"</span><span class="token punctuation">)</span>        singleInstance <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>Singleton<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> singleInstance<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestGetSingletonObj</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            obj <span class="token operator">:=</span> <span class="token function">GetSingletonObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>            wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="任何任务完成"><a href="#任何任务完成" class="headerlink" title="任何任务完成"></a>任何任务完成</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 协程没有关闭，有问题，所以使用buffered解决</span><span class="token keyword">func</span> <span class="token function">FirstResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    numOfRunner <span class="token operator">:=</span> <span class="token number">10</span>    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">,</span> numOfRunner<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numOfRunner<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ret <span class="token operator">:=</span> <span class="token function">runTask</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            ch <span class="token operator">&lt;-</span> ret        <span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestFirstResponse</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"Before:"</span><span class="token punctuation">,</span> runtime<span class="token punctuation">.</span><span class="token function">NumGoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token function">FirstResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"After:"</span><span class="token punctuation">,</span> runtime<span class="token punctuation">.</span><span class="token function">NumGoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="必需所有任务完成"><a href="#必需所有任务完成" class="headerlink" title="必需所有任务完成"></a>必需所有任务完成</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">//csp 实现 ，用WaitGroup也可以</span><span class="token keyword">func</span> <span class="token function">AllResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    numOfRunner <span class="token operator">:=</span> <span class="token number">10</span>    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">,</span> numOfRunner<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numOfRunner<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ret <span class="token operator">:=</span> <span class="token function">runTask</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            ch <span class="token operator">&lt;-</span> ret        <span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    finalRet <span class="token operator">:=</span> <span class="token string">""</span>    <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> numOfRunner<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>        finalRet <span class="token operator">+=</span> <span class="token operator">&lt;-</span>ch <span class="token operator">+</span> <span class="token string">"\n"</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> finalRet<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestAllResponse</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"Before:"</span><span class="token punctuation">,</span> runtime<span class="token punctuation">.</span><span class="token function">NumGoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token function">AllResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"After:"</span><span class="token punctuation">,</span> runtime<span class="token punctuation">.</span><span class="token function">NumGoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对象池"><a href="#对象池" class="headerlink" title="对象池"></a>对象池</h2><h3 id="使⽤buﬀered-channel实现对象池"><a href="#使⽤buﬀered-channel实现对象池" class="headerlink" title="使⽤buﬀered channel实现对象池"></a>使⽤buﬀered channel实现对象池</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> ReusableObj <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">type</span> ObjPool <span class="token keyword">struct</span> <span class="token punctuation">{</span>    bufChan <span class="token keyword">chan</span> <span class="token operator">*</span>ReusableObj <span class="token comment" spellcheck="true">//用于缓冲可重用对象</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//先预制一些可初始化对象放到里面</span><span class="token keyword">func</span> <span class="token function">NewObjPool</span><span class="token punctuation">(</span>numOfObj <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>ObjPool <span class="token punctuation">{</span>    objPool <span class="token operator">:=</span> ObjPool<span class="token punctuation">{</span><span class="token punctuation">}</span>    objPool<span class="token punctuation">.</span>bufChan <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token operator">*</span>ReusableObj<span class="token punctuation">,</span> numOfObj<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numOfObj<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        objPool<span class="token punctuation">.</span>bufChan <span class="token operator">&lt;-</span> <span class="token operator">&amp;</span>ReusableObj<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>objPool<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*一个变种函数(其实是方法)，(p *ObjPool) 这就是给这个结构体绑定函数，然后在结构体中就可以直接调用Add这个方法，GO就是以这种形式来实现面像对象的思想。如果外部结构和嵌入结构存在同名方法，则优先调用外部结构的方法类型别名不会拥有底层类型所附带的方法方法可以调用结构中的非公开字段*/</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>ObjPool<span class="token punctuation">)</span> <span class="token function">GetObj</span><span class="token punctuation">(</span>timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>ReusableObj<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">select</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> ret <span class="token operator">:=</span> <span class="token operator">&lt;-</span>p<span class="token punctuation">.</span>bufChan<span class="token punctuation">:</span>        <span class="token keyword">return</span> ret<span class="token punctuation">,</span> <span class="token boolean">nil</span>    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//超时控制</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"time out"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>ObjPool<span class="token punctuation">)</span> <span class="token function">ReleaseObj</span><span class="token punctuation">(</span>obj <span class="token operator">*</span>ReusableObj<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">select</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> p<span class="token punctuation">.</span>bufChan <span class="token operator">&lt;-</span> obj<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"overflow"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestObjPool</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    pool <span class="token operator">:=</span> <span class="token function">NewObjPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> v<span class="token punctuation">,</span> err <span class="token operator">:=</span> pool<span class="token punctuation">.</span><span class="token function">GetObj</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            t<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T\n"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>            <span class="token keyword">if</span> err <span class="token operator">:=</span> pool<span class="token punctuation">.</span><span class="token function">ReleaseObj</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                t<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Done"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="sync-Pool-对象缓存"><a href="#sync-Pool-对象缓存" class="headerlink" title="sync.Pool 对象缓存"></a>sync.Pool 对象缓存</h2><h3 id="sync-Pool-对象获取"><a href="#sync-Pool-对象获取" class="headerlink" title="sync.Pool 对象获取"></a>sync.Pool 对象获取</h3><ul><li>尝试从私有对象获取</li><li>私有对象不存在，尝试从当前 Processor 的共享池获取</li><li>如果当前 Processor 共享池也是空的，那么就尝试去其他 Processor 的共享池获取</li><li>如果所有⼦池都是空的，最后就⽤⽤户指定的 New 函数产⽣⼀个新的对象返回</li></ul><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown Photos/sync.Pool.jpg" alt="img" style="zoom:50%;" /><h3 id="sync-Pool-对象的放回"><a href="#sync-Pool-对象的放回" class="headerlink" title="sync.Pool 对象的放回"></a>sync.Pool 对象的放回</h3><ul><li>如果私有对象不存在则保存为私有对象</li><li>如果私有对象存在，放⼊当前 Processor ⼦池的共享池中私有对象</li></ul><h3 id="使⽤-sync-Pool"><a href="#使⽤-sync-Pool" class="headerlink" title="使⽤ sync.Pool"></a>使⽤ sync.Pool</h3><pre class="line-numbers language-go"><code class="language-go">pool <span class="token operator">:=</span> <span class="token operator">&amp;</span>sync<span class="token punctuation">.</span>Pool<span class="token punctuation">{</span>    New<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span>arry <span class="token operator">:=</span> pool<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>    …pool<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="sync-Pool-对象的⽣命周期"><a href="#sync-Pool-对象的⽣命周期" class="headerlink" title="sync.Pool 对象的⽣命周期"></a>sync.Pool 对象的⽣命周期</h3><ul><li>GC 会清除 sync.pool 缓存的对象</li><li>对象的缓存有效期为下⼀次GC 之前</li></ul><h3 id="sync-Pool-总结"><a href="#sync-Pool-总结" class="headerlink" title="sync.Pool 总结"></a>sync.Pool 总结</h3><ul><li>适合于通过复⽤，降低复杂对象的创建和 GC 代价</li><li>协程安全，<font color="red">会有锁的开销</font>（因此做优化时，要考虑锁的开销大还是创建对象的开销大）</li><li><font color="red">⽣命周期受 GC 影响，不适合于做连接池等，需⾃⼰管理⽣命周期的资源的池化</font></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang-2</title>
      <link href="/2019/10/22/Golang-2/"/>
      <url>/2019/10/22/Golang-2/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="封装数据和行为"><a href="#封装数据和行为" class="headerlink" title="封装数据和行为"></a>封装数据和行为</h2><h3 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> Employee <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Id   <span class="token builtin">string</span>    Name <span class="token builtin">string</span>    Age  <span class="token builtin">int</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实例创建及初始化"><a href="#实例创建及初始化" class="headerlink" title="实例创建及初始化"></a>实例创建及初始化</h3><pre class="line-numbers language-go"><code class="language-go">e <span class="token operator">:=</span> Employee<span class="token punctuation">{</span><span class="token string">"0"</span><span class="token punctuation">,</span> <span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//e := &amp;Employee{"0", "Bob", 20} 也可以</span>  <span class="token comment" spellcheck="true">// t.Log(e.String())</span>e1 <span class="token operator">:=</span> Employee<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"Mike"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">}</span>e2 <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Employee<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 注意这里返回的引用/指针，相当于 e := &amp;Employee{}</span>e2<span class="token punctuation">.</span>Id <span class="token operator">=</span> <span class="token string">"2"</span> <span class="token comment" spellcheck="true">//与其它编程语言的差异：通过实例的指针访问成员不需要使用-></span>e2<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">22</span>e2<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"Rose"</span>t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>e1<span class="token punctuation">)</span>t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span>ID<span class="token punctuation">)</span>t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>e2<span class="token punctuation">)</span>t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"e is %T"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"e2 is %T"</span><span class="token punctuation">,</span> e2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a><h2 id="行为（方法）定义"><a href="#行为（方法）定义" class="headerlink" title="行为（方法）定义"></a>行为（方法）定义</h2><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 第一种定义方式在实例对应方法被调用时，实例的成员会进行值复制</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e Employee<span class="token punctuation">)</span> <span class="token function">MyString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 地址与调用函数中会发生变化，开销更大</span>      fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Address is %x\n"</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>e<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"ID:%s-Name:%s-Age:%d"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> e<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> e<span class="token punctuation">.</span>Age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 通常为了避免内存拷贝我们使用第二种定义方式</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>Employee<span class="token punctuation">)</span> <span class="token function">MyString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 地址与调用函数中未发生变化</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Address is %x\n"</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>e<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"ID:%s/Name:%s/Age:%d"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> e<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> e<span class="token punctuation">.</span>Age<span class="token punctuation">)</span><span class="token punctuation">}</span>e <span class="token operator">:=</span> Employee<span class="token punctuation">{</span><span class="token string">"0"</span><span class="token punctuation">,</span> <span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//e := &amp;Employee{"0", "Bob", 20} 也可以，因为通过实例的指针访问成员不需要使用-></span>t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">MyString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 接口定义</span><span class="token keyword">type</span> Programer <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">WritehelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 接口实现</span><span class="token keyword">type</span> GoProgramer <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// WritehelloWorld() 签名必须一致</span><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>GoProgramer<span class="token punctuation">)</span> <span class="token function">WritehelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"fmt.Println(\"Hello World\")"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>接口为非入侵性，实现不依赖于接口定义，采用 DuckType 的方式</li><li>所以接口定义可以包含在接口使用者包内</li></ol><h3 id="接口变量"><a href="#接口变量" class="headerlink" title="接口变量"></a>接口变量</h3><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown%20Photos/Jietu20191025-104012.jpg" alt="img"></p><h2 id="自定义类型"><a href="#自定义类型" class="headerlink" title="自定义类型"></a>自定义类型</h2><pre class="line-numbers language-go"><code class="language-go"><span class="token number">1</span><span class="token punctuation">.</span> <span class="token keyword">type</span> IntConv <span class="token keyword">func</span><span class="token punctuation">(</span>op <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token number">2</span><span class="token punctuation">.</span> Type MyPoint <span class="token builtin">int</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> IntConv <span class="token keyword">func</span><span class="token punctuation">(</span>op <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token keyword">func</span> <span class="token function">timeSpent</span><span class="token punctuation">(</span>inner IntConv<span class="token punctuation">)</span> IntConv <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>        start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        ret <span class="token operator">:=</span> <span class="token function">inner</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"time spent:"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ret    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 原本的</span><span class="token keyword">func</span> <span class="token function">timeSpent</span><span class="token punctuation">(</span>inner <span class="token keyword">func</span><span class="token punctuation">(</span>op <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span>op <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>        start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        ret <span class="token operator">:=</span> <span class="token function">inner</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"time spent:"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ret    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="复合（扩展与复用）"><a href="#复合（扩展与复用）" class="headerlink" title="复合（扩展与复用）"></a>复合（扩展与复用）</h2><p><strong>Java 程序</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Pet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">speakTo</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Pet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Wang!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InheritanceTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSubClassAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Pet aDog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        aDog<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        aDog<span class="token punctuation">.</span><span class="token function">speakTo</span><span class="token punctuation">(</span><span class="token string">"Chao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">makePetSpeak</span><span class="token punctuation">(</span>Pet p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\nPet spoke."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLsp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Dog aDog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">makePetSpeak</span><span class="token punctuation">(</span>aDog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Go语言实现</strong></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> Pet <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Pet<span class="token punctuation">)</span> <span class="token function">Speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Pet<span class="token punctuation">)</span> <span class="token function">SpeakTo</span><span class="token punctuation">(</span>host <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    p<span class="token punctuation">.</span><span class="token function">Speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> host<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> Dog <span class="token keyword">struct</span> <span class="token punctuation">{</span>    p <span class="token operator">*</span>Pet<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Dog<span class="token punctuation">)</span> <span class="token function">Speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// d.p.Speak()</span>    <span class="token comment" spellcheck="true">// 取消继承，改为复合</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Wang!"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Dog<span class="token punctuation">)</span> <span class="token function">SpeakTo</span><span class="token punctuation">(</span>host <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// d.p.SpeakTo(host)</span>    d<span class="token punctuation">.</span><span class="token function">Speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> host<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestDog</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    dog <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span>    dog<span class="token punctuation">.</span><span class="token function">SpeakTo</span><span class="token punctuation">(</span><span class="token string">"Chao"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 增加</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Dog<span class="token punctuation">)</span> <span class="token function">Speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"Wang!"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestDog</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    dog <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span>    dog<span class="token punctuation">.</span><span class="token function">SpeakTo</span><span class="token punctuation">(</span><span class="token string">"Chao"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 打印的还是 ... Chao</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="匿名嵌套类型"><a href="#匿名嵌套类型" class="headerlink" title="匿名嵌套类型"></a>匿名嵌套类型</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> Pet <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Pet<span class="token punctuation">)</span> <span class="token function">Speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Pet<span class="token punctuation">)</span> <span class="token function">SpeakTo</span><span class="token punctuation">(</span>host <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    p<span class="token punctuation">.</span><span class="token function">Speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> host<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> Dog <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Pet <span class="token comment" spellcheck="true">//匿名嵌套类型，不用在定义Dog的方法，有一种继承的感觉</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestDog</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    dog <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span>    dog<span class="token punctuation">.</span><span class="token function">SpeakTo</span><span class="token punctuation">(</span><span class="token string">"Chao"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>证明go无法继承</strong></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Dog<span class="token punctuation">)</span> <span class="token function">Speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"Wang!"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestDogg</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//无法使用父类，提示不支持显示类型转换</span>    <span class="token keyword">var</span> dog Pet <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span>    dog<span class="token punctuation">.</span><span class="token function">SpeakTo</span><span class="token punctuation">(</span><span class="token string">"Chao"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//强制类型转换也不可以</span><span class="token keyword">func</span> <span class="token function">TestDogg</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> dog <span class="token operator">*</span>Dog <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span>    <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>Pet<span class="token punctuation">)</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span>    dog<span class="token punctuation">.</span><span class="token function">SpeakTo</span><span class="token punctuation">(</span><span class="token string">"Chao"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown%20Photos/Jietu20191025-113321.jpg" alt="img"></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> Code <span class="token builtin">string</span><span class="token keyword">type</span> Programer <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">WriteHelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Code<span class="token punctuation">}</span><span class="token keyword">type</span> GoProgramer <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>GoProgramer<span class="token punctuation">)</span> <span class="token function">WriteHelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Code <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"fmt.Println(\"Hello World\")"</span><span class="token punctuation">}</span><span class="token keyword">type</span> JavaProgrammer <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>JavaProgrammer<span class="token punctuation">)</span> <span class="token function">WriteHelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Code <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"System.out.println(\"Hello World\")"</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">writerFirstPragram</span><span class="token punctuation">(</span>p Programer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T %v\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">WriteHelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//%T 输出实例类型</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestPlotmorphism</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//两种写法，必须是指针</span>    goProg <span class="token operator">:=</span> <span class="token operator">&amp;</span>GoProgramer<span class="token punctuation">{</span><span class="token punctuation">}</span>    javaProg <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>JavaProgrammer<span class="token punctuation">)</span>    <span class="token function">writerFirstPragram</span><span class="token punctuation">(</span>goProg<span class="token punctuation">)</span>    <span class="token function">writerFirstPragram</span><span class="token punctuation">(</span>javaProg<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="空接口与断言"><a href="#空接口与断言" class="headerlink" title="空接口与断言"></a>空接口与断言</h3><ol><li>空接口可以表示任何类型</li><li>通过断言来将空接口转换为指定类型</li></ol><p><code>v, ok := p.(int) //ok=true 时为转换成功</code></p><p>类型 C 的 <code>void *</code></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">DoSomething</span><span class="token punctuation">(</span>p <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        if i, ok := p.(int); ok {            fmt.Println("Integer", i)            return        }        if s, ok := p.(string); ok {            fmt.Println("string", s)            return        }        fmt.Println("Unknow Type")    */</span>    <span class="token keyword">switch</span> v <span class="token operator">:=</span> p<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Integer"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"String"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Unknow Type"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestEmptyInterfaceAssertion</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">DoSomething</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token function">DoSomething</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Go-接口最佳实践"><a href="#Go-接口最佳实践" class="headerlink" title="Go 接口最佳实践"></a>Go 接口最佳实践</h3><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown%20Photos/Jietu20191025-120122.jpg" alt="img"></p><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><ol><li>没有异常机制</li><li>error 类型实现了 error 接口</li><li>可以通过 errors.New 来快速创建错误实例</li></ol><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> <span class="token builtin">error</span> <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">}</span>errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"n must be in the range[0, 100]"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">GetFibonacci</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">></span> <span class="token number">100</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"n must be in the range[0, 100]"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//第2个为错误信息</span>    <span class="token punctuation">}</span>    fibList <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        fibList <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>fibList<span class="token punctuation">,</span> fibList<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>fibList<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> fibList<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestGetFibonacci</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> v<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">GetFibonacci</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        t<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定义错误变量"><a href="#定义错误变量" class="headerlink" title="定义错误变量"></a>定义错误变量</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> ErrLessThanTwoError <span class="token builtin">error</span> <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"n must be lager than 0"</span><span class="token punctuation">)</span><span class="token keyword">var</span> ErrLargerThanTwoError <span class="token builtin">error</span> <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"n must be less than 100"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">GetFibonacci</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> ErrLessThanTwoError <span class="token comment" spellcheck="true">//第2个为错误信息</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> n <span class="token operator">></span> <span class="token number">100</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> ErrLargerThanTwoError <span class="token comment" spellcheck="true">//第2个为错误信息</span>    <span class="token punctuation">}</span>    fibList <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        fibList <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>fibList<span class="token punctuation">,</span> fibList<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>fibList<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> fibList<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestGetFibonacci</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> v<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">GetFibonacci</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> err <span class="token operator">==</span> ErrLessThanTwoError <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"too little"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> err <span class="token operator">==</span> ErrLargerThanTwoError <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"too large"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="panic-和-recover"><a href="#panic-和-recover" class="headerlink" title="panic 和 recover"></a>panic 和 recover</h2><ul><li>panic 用于不可以恢复的错误</li><li>panic 退出前会执行 defer 指定的内容</li></ul><h3 id="panic-vs-os-Exit"><a href="#panic-vs-os-Exit" class="headerlink" title="panic vs. os.Exit"></a>panic vs. os.Exit</h3><ul><li><p>os.Exit退出时不会调用 defer 指定的函数</p></li><li><p>os.Exit 退出时不输出当前调用栈信息</p></li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestPanicVxExit</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Finally"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Start"</span><span class="token punctuation">)</span>    <span class="token function">panic</span><span class="token punctuation">(</span>errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"Something wrong"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// os.Exit(-1)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*=== RUN   TestPanicVxExitStartFinally--- FAIL: TestPanicVxExit (0.00s)panic: Something wrong [recovered]    panic: Something wrong*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="recover"><a href="#recover" class="headerlink" title="recover"></a>recover</h3><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Throwable t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><pre class="line-numbers language-c++"><code class="language-c++">try{    ...}catch(...){}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//恢复错误</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestPanicVxExit</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"recovered from"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Start"</span><span class="token punctuation">)</span>    <span class="token function">panic</span><span class="token punctuation">(</span>errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"Something wrong"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*=== RUN   TestPanicVxExitStartrecovered from Something wrong--- PASS: TestPanicVxExit (0.00s)PASS*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="当心-recover"><a href="#当心-recover" class="headerlink" title="当心 recover"></a>当心 recover</h3><ul><li>形成僵尸服务进程，导致 health checck 失效（服务已经出问题了，recover 并不能解决问题）</li><li>“Let it Crash!” 往往使我们恢复不确定性错误的最好方法</li></ul><h2 id="package"><a href="#package" class="headerlink" title="package"></a>package</h2><ol><li><p>基本服用模块单元</p><p> 以首字母来表明可被包外代码访问</p></li><li><p>代码的 package 可以和所在的目录不一致</p></li><li><p>同一目录里的 Go 代码的 package 要保持一致</p></li></ol><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ol><li>通过 <code>go get</code> 来获取远程依赖<ul><li><code>go get -u</code> 强制从网络更新远程依赖</li></ul></li><li>注意代码在 GitHub 上的组织形式<ul><li>直接以代码路径开始，不要有 src，如 src/ch15/client/ 内文件引用 src/ch15/series/，引用 ch15/series即可</li></ul></li><li>被使用的函数必须大驼峰命名，否则无法被访问</li></ol><p>示例：<a href="https://github.com/MajorTee/concurrent_map" target="_blank" rel="noopener">https://github.com/MajorTee/concurrent_map</a></p><h3 id="init-方法"><a href="#init-方法" class="headerlink" title="init 方法"></a>init 方法</h3><ul><li>在 main 被执行前，所有依赖的 package 的 init 方法都会被执行</li><li>不同包的 init 函数按照包导入的依赖关系决定执行顺序</li><li>每个包可以有多个 init 函数</li><li>报的每个源文件也可以有多个 init 函数，这点比较特殊</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"testing"</span>    cm <span class="token string">"github.com/easierway/concurrent_map"</span> <span class="token comment" spellcheck="true">//别名</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">TestConcurrentMap</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    m <span class="token operator">:=</span> cm<span class="token punctuation">.</span><span class="token function">ConcurrentMap</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span>    m<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>cm<span class="token punctuation">.</span><span class="token function">StrKey</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>cm<span class="token punctuation">.</span><span class="token function">StrKey</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><h4 id="Go-未解决的依赖管理"><a href="#Go-未解决的依赖管理" class="headerlink" title="Go 未解决的依赖管理"></a>Go 未解决的依赖管理</h4><ol><li>同一环境下，不同项目使用同一包的不同版本</li><li>无法管理对包的特定版本的依赖</li></ol><h4 id="vendor-路径"><a href="#vendor-路径" class="headerlink" title="vendor 路径"></a>vendor 路径</h4><p>随着 Go 1.5 release 版本的发布，vendor ⽬录被添加到除了 GOPATH 和 GOROOT之外的依赖⽬录查找的解决⽅案。在 Go 1.6 之前，你需要⼿动 的设置环境变量</p><h5 id="查找依赖包路径的解决⽅案如下："><a href="#查找依赖包路径的解决⽅案如下：" class="headerlink" title="查找依赖包路径的解决⽅案如下："></a>查找依赖包路径的解决⽅案如下：</h5><ol><li>当前包下的 vendor ⽬录</li><li>向上级⽬录查找，直到找到 src 下的 vendor ⽬录</li><li>在 GOPATH 下⾯查找依赖包</li><li>在 GOROOT ⽬录下查找</li></ol><h5 id="常⽤的依赖管理⼯具"><a href="#常⽤的依赖管理⼯具" class="headerlink" title="常⽤的依赖管理⼯具"></a>常⽤的依赖管理⼯具</h5><p>godep <a href="https://github.com/tools/godep" target="_blank" rel="noopener">https://github.com/tools/godep</a> </p><p>glide <a href="https://github.com/Masterminds/glide" target="_blank" rel="noopener">https://github.com/Masterminds/glide</a> </p><p>dep <a href="https://github.com/golang/dep" target="_blank" rel="noopener">https://github.com/golang/dep</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang-1</title>
      <link href="/2019/10/21/Golang-1/"/>
      <url>/2019/10/21/Golang-1/</url>
      
        <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="vscode配置"><a href="#vscode配置" class="headerlink" title="vscode配置"></a>vscode配置</h2><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"go.gopath"</span><span class="token operator">:</span> <span class="token string">"/usr/local/go/bin/go"</span><span class="token punctuation">,</span><span class="token property">"go.testFlags"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"-v"</span><span class="token punctuation">,</span>    <span class="token string">"-count=1"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"go.autocompleteUnimportedPackages"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基本程序结构"><a href="#基本程序结构" class="headerlink" title="基本程序结构"></a>基本程序结构</h2><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main <span class="token comment" spellcheck="true">//包，表明代码所在的模块(包)</span><span class="token comment" spellcheck="true">//引入代码依赖</span><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"os"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//功能实现</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>源文件内第一行代码package pkgName中的pkgName也可以和源文件所在文件夹名称不同</strong>。但是，如果此包需要在其他包中使用，编译器会报错，建议package 后的名称和文件所在文件夹的名称相同。一般只有main函数所在的源文件下才会出现所在包和“package 包名”声明的包名不同的情况。</p><h2 id="应用程序入口"><a href="#应用程序入口" class="headerlink" title="应用程序入口"></a>应用程序入口</h2><ol><li>必须是 main 包：<code>package main</code></li><li>必须是 main 方法： <code>func main()</code></li><li>文件名不一定是 <code>main.go</code></li></ol><a id="more"></a><h2 id="退出返回值"><a href="#退出返回值" class="headerlink" title="退出返回值"></a>退出返回值</h2><p>与其他语言区别</p><ul><li>Go 中 main 函数不支持任何返回值</li><li>通过 <code>os.Exit(0)</code>来返回状态</li></ul><h2 id="获取命令行参数"><a href="#获取命令行参数" class="headerlink" title="获取命令行参数"></a>获取命令行参数</h2><p>与其他语言区别</p><ul><li><p>main 函数不支持传入参数</p><p>  func main(<del>arg []string</del>) </p></li><li><p>在程序中直接通过<code>os.Args</code>获取命令行参数</p></li></ul><pre class="line-numbers language-go"><code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编写测试程序"><a href="#编写测试程序" class="headerlink" title="编写测试程序"></a>编写测试程序</h2><ol><li>源码文件以<code>_test</code> 结尾：xxx_test.go</li><li>测试方法名以 Test 开头：func TestXXX(t *testing T) {…}</li></ol><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> try_test<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"testing"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">TestFirstTry</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"My first try"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h2><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">var</span> b <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">// 一起赋值</span><span class="token keyword">var</span> <span class="token punctuation">(</span>    a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span>    b     <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 使用自动类型推断</span>a <span class="token operator">:=</span> <span class="token number">1</span>b <span class="token operator">:=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">// var常用在这种方式</span><span class="token keyword">var</span> a <span class="token builtin">int</span>a <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="变量交换"><a href="#变量交换" class="headerlink" title="变量交换"></a>变量交换</h2><pre class="line-numbers language-go"><code class="language-go">a <span class="token operator">:=</span> <span class="token number">1</span>b <span class="token operator">:=</span> <span class="token number">2</span>tmp <span class="token operator">:=</span> aa <span class="token operator">=</span> bb <span class="token operator">=</span> tmp<span class="token comment" spellcheck="true">// 正确方法</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常量定义-iota"><a href="#常量定义-iota" class="headerlink" title="常量定义 (iota)"></a>常量定义 (iota)</h2><p><strong>iota 只可以用在常量定义</strong></p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 每次 const 出现时，都会让 iota 初始化为0.</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment" spellcheck="true">// a=0 </span><span class="token keyword">const</span> <span class="token punctuation">(</span>    Monday <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token operator">+</span><span class="token number">1</span> <span class="token comment" spellcheck="true">//1</span>    Tuesday        <span class="token comment" spellcheck="true">//2</span>    Wednesday             <span class="token comment" spellcheck="true">//3</span>    Thursday             <span class="token comment" spellcheck="true">//4</span>    Friday    Saturday    Sunday<span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">(</span>        Open <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token boolean">iota</span> <span class="token comment" spellcheck="true">//001</span>    Close                         <span class="token comment" spellcheck="true">//010    </span>    Pending                     <span class="token comment" spellcheck="true">//100</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 可跳过的值</span><span class="token keyword">const</span> <span class="token punctuation">(</span>    OutMute AudioOutput <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment" spellcheck="true">// 0</span>    OutMono                    <span class="token comment" spellcheck="true">// 1</span>    <span class="token boolean">_</span>                                                     <span class="token comment" spellcheck="true">// 跳过</span>    OutSurround                <span class="token comment" spellcheck="true">// 3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 定义数量级</span><span class="token keyword">const</span> <span class="token punctuation">(</span>    <span class="token boolean">_</span>  <span class="token operator">=</span> <span class="token boolean">iota</span>   <span class="token comment" spellcheck="true">// ignore first value by assigning to blank identifier</span>    KB ByteSize <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token boolean">iota</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1 &lt;&lt; (10*1)</span>    MB          <span class="token comment" spellcheck="true">// 1 &lt;&lt; (10*2)</span>    GB          <span class="token comment" spellcheck="true">// 1 &lt;&lt; (10*3)</span>    TB          <span class="token comment" spellcheck="true">// 1 &lt;&lt; (10*4)</span>    PB          <span class="token comment" spellcheck="true">// 1 &lt;&lt; (10*5)</span>    EB          <span class="token comment" spellcheck="true">// 1 &lt;&lt; (10*6)</span>    ZB          <span class="token comment" spellcheck="true">// 1 &lt;&lt; (10*7)</span>    YB          <span class="token comment" spellcheck="true">// 1 &lt;&lt; (10*8)</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">(</span>    i <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment" spellcheck="true">//0</span>    j <span class="token operator">=</span> <span class="token number">3.14</span>    k <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment" spellcheck="true">//2</span>    l        <span class="token comment" spellcheck="true">//3</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">(</span>    i <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment" spellcheck="true">//0</span>    j <span class="token operator">=</span> <span class="token number">3.14</span>    k               <span class="token comment" spellcheck="true">//3.14</span>    l        <span class="token comment" spellcheck="true">//3.14</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">(</span>    Apple<span class="token punctuation">,</span> Banana <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token comment" spellcheck="true">// 1, 2</span>    Cherimoya<span class="token punctuation">,</span> Durian                                     <span class="token comment" spellcheck="true">// 2, 3</span>    Elderberry<span class="token punctuation">,</span> Fig                                         <span class="token comment" spellcheck="true">// 3, 4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><pre class="line-numbers language-go"><code class="language-go"><span class="token builtin">bool</span><span class="token builtin">string</span><span class="token builtin">int</span> <span class="token builtin">int8</span> <span class="token builtin">int16</span> <span class="token builtin">int32</span> <span class="token builtin">int64</span><span class="token builtin">uint</span> <span class="token builtin">uint8</span> <span class="token builtin">uint16</span> <span class="token builtin">uint32</span> <span class="token builtin">uint64</span> <span class="token builtin">uintptr</span><span class="token builtin">byte</span> <span class="token comment" spellcheck="true">// uint8</span><span class="token builtin">rune</span> <span class="token comment" spellcheck="true">// int32 代表一个Unicode code point </span><span class="token builtin">float32</span> <span class="token builtin">float64</span><span class="token builtin">complex64</span> <span class="token builtin">complex128</span> <span class="token comment" spellcheck="true">//复数类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类型转化"><a href="#类型转化" class="headerlink" title="类型转化"></a>类型转化</h2><ol><li>Go 语言不允许任何类型隐式类型转换</li><li>别名和原有类型也不能进行隐式类型转换</li></ol><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> MyInt <span class="token builtin">int64</span><span class="token keyword">func</span> <span class="token function">TestImplucit</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">var</span> b <span class="token builtin">int64</span>    <span class="token keyword">var</span> c MyInt    b <span class="token operator">=</span> a <span class="token comment" spellcheck="true">// wrong</span>    c <span class="token operator">=</span> b <span class="token comment" spellcheck="true">// wrong</span>    b <span class="token operator">=</span> <span class="token function">int64</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    c <span class="token operator">=</span> <span class="token function">MyInt</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>        t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类型的预定义值"><a href="#类型的预定义值" class="headerlink" title="类型的预定义值"></a>类型的预定义值</h2><ol><li>math.MaxInt64</li><li>math.MaxFloat64</li><li>math.MaxUint32</li></ol><h2 id="指针类型"><a href="#指针类型" class="headerlink" title="指针类型"></a>指针类型</h2><ol><li>不支持指针运算来访问连续的地址空间</li><li>String 是值类型，其默认的初始值为空字符串， 而不是nil</li></ol><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestPoint</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    a <span class="token operator">:=</span> <span class="token number">1</span>    aPtr <span class="token operator">:=</span> <span class="token operator">&amp;</span>a    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> aPtr<span class="token punctuation">)</span>                      <span class="token comment" spellcheck="true">// 1 0xc00009a158</span>    t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"%T %T"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> aPtr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//int *int</span>      aPtr <span class="token operator">=</span> aPtr <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">//wrong</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestSting</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> s <span class="token builtin">string</span>     t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"*"</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//**</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//0</span>    <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//字符串判断</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>没有前置自增 ++a –a</p><p>只有后置如 a– a++</p><h3 id="用-比较数组"><a href="#用-比较数组" class="headerlink" title="用 == 比较数组"></a>用 == 比较数组</h3><ul><li>相同维数且含有相同个数元素的数组才可以比较</li><li>每个元素都相等的才相等</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestCompareArray</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span>    b <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span>    c <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">454</span><span class="token punctuation">}</span>    d <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span>      e <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span>    <span class="token comment" spellcheck="true">//t.Log(a == c) //直接报错</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>a <span class="token operator">==</span> d<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span>      t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>a <span class="token operator">==</span> e<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="amp-按位清零"><a href="#amp-按位清零" class="headerlink" title="&amp;^ 按位清零"></a>&amp;^ 按位清零</h3><p>只要右边操作数上某位为一，就把左边相应位清零，否则保留</p><pre class="line-numbers language-go"><code class="language-go"><span class="token number">1</span> <span class="token operator">&amp;^</span> <span class="token number">0</span> <span class="token operator">--</span> <span class="token number">1</span><span class="token number">1</span> <span class="token operator">&amp;^</span> <span class="token number">1</span> <span class="token operator">--</span> <span class="token number">0</span><span class="token number">0</span> <span class="token operator">&amp;^</span> <span class="token number">1</span> <span class="token operator">--</span> <span class="token number">0</span><span class="token number">0</span> <span class="token operator">&amp;^</span> <span class="token number">0</span> <span class="token operator">--</span> <span class="token number">0</span><span class="token keyword">const</span> <span class="token punctuation">(</span>    Readable <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token boolean">iota</span>    Writeable    Executavle<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">TestBitClear</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    a <span class="token operator">:=</span> <span class="token number">7</span> <span class="token comment" spellcheck="true">//0111</span>    a <span class="token operator">=</span> a <span class="token operator">&amp;^</span> Readable <span class="token comment" spellcheck="true">//Readable 清零</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>a<span class="token operator">&amp;</span>Readable <span class="token operator">==</span> Readable<span class="token punctuation">,</span> a<span class="token operator">&amp;</span>Writeable <span class="token operator">==</span> Writeable<span class="token punctuation">,</span> a<span class="token operator">&amp;</span>Executavle <span class="token operator">==</span> Executavle<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="循环和条件"><a href="#循环和条件" class="headerlink" title="循环和条件"></a>循环和条件</h2><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><p>Go 语言仅支持循环关键字 for</p><p>for <del>(</del>j := 7; j &lt; 9; j++<del>)</del> 不需要括号</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">//表示while循环</span><span class="token comment" spellcheck="true">// while(n&lt;5)</span>n <span class="token operator">:=</span> <span class="token number">0</span><span class="token keyword">for</span> n <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token punctuation">{</span>  n<span class="token operator">++</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//无限循环</span><span class="token comment" spellcheck="true">//while(true)</span>n<span class="token operator">:=</span><span class="token number">0</span><span class="token keyword">for</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应 for each</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// idx 索引值，e 为实际值</span><span class="token comment" spellcheck="true">// 不用索引值时用_代替</span><span class="token keyword">for</span> idx<span class="token punctuation">,</span> e <span class="token operator">:=</span> <span class="token keyword">range</span> arr<span class="token punctuation">{</span>        t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="if条件"><a href="#if条件" class="headerlink" title="if条件"></a>if条件</h3><p>if 条件也是不需要括号</p><h4 id="主要区别"><a href="#主要区别" class="headerlink" title="主要区别"></a>主要区别</h4><ol><li><p>condition 表达式结果必须为布尔值</p></li><li><p>支持变量赋值：</p><pre class="line-numbers language-go"><code class="language-go"> <span class="token keyword">if</span> <span class="token keyword">var</span> dec<span class="token punctuation">;</span> condition <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token keyword">if</span> a <span class="token operator">:=</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span> a <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* v, err err表示方法返回错误信息，然后根据err==nil处理 */</span> <span class="token keyword">if</span> v<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">someFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>   t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="switch条件"><a href="#switch条件" class="headerlink" title="switch条件"></a>switch条件</h3><ol><li>条件表达式不限制为常量或者整数</li><li>单个 case 中，可以出现多个结果选项，用逗号分隔</li><li>与 C 语言等规则相反，Go 语言不需要用 break 来明确推出一个 case</li><li>可以不设定 switch 之后的条件表达式，在此种情况下，整个 switch 结构与多个 if… else… 的逻辑作用等同</li></ol><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> i <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//有变量</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span>            t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"Even"</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span>            t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"Odd"</span><span class="token punctuation">)</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"not 0-3"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//没有变量</span>        <span class="token keyword">case</span> i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"Even"</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">0x1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"Odd"</span><span class="token punctuation">)</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"not 0-3"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数组和切片"><a href="#数组和切片" class="headerlink" title="数组和切片"></a>数组和切片</h2><h3 id="数组的声明"><a href="#数组的声明" class="headerlink" title="数组的声明"></a>数组的声明</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token comment" spellcheck="true">//声明并初始化为默认零值</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>b <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//声明同时初始化</span>arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//用三个点来数后面的长度</span>c <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//多维数组初始化</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><pre class="line-numbers language-go"><code class="language-go">    arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> e <span class="token operator">:=</span> <span class="token keyword">range</span> arr <span class="token punctuation">{</span>        t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组截取"><a href="#数组截取" class="headerlink" title="数组截取"></a>数组截取</h4><p>a[开始索引（包含），结束索引（不包含）]</p><pre class="line-numbers language-go"><code class="language-go">arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//2</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//2, 3, 4, 5</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//2345</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//123</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//所有</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>不支持负数</strong></p><h3 id="切片内部结构"><a href="#切片内部结构" class="headerlink" title="切片内部结构"></a>切片内部结构</h3><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown%20Photos/Jietu20191023-113508.jpg" alt="image"></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestSliceInit</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> s0 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s0<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s0<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0 0</span>    s0 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s0<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s0<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s0<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1 1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> s0 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>s1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span>s2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//len, cap</span>t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//4 4</span>t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//3 5</span>t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//s2[3] 没有初始化，报错</span>s2 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//0 0 0 1</span><span class="token comment" spellcheck="true">//由此体会len cap区别</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>[]type, len, cap</code></p><p>其中len个元素会被初始化为默认零值，未初始化元素不可以访问</p><h4 id="切片共享存储结构"><a href="#切片共享存储结构" class="headerlink" title="切片共享存储结构"></a>切片共享存储结构</h4><p>多个切片指向同一存储地址</p><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown%20Photos/Jietu20191023-114802.jpg" alt="img"></p><h5 id="切片的增长"><a href="#切片的增长" class="headerlink" title="切片的增长"></a>切片的增长</h5><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestSliceGrowing</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">)</span>        t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意Q2 := year[3:6]，summer := year[5:8] 之后的cap变化</p></blockquote><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestSliceShareMemory</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    year <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"Jan"</span><span class="token punctuation">,</span> <span class="token string">"Feb"</span><span class="token punctuation">,</span> <span class="token string">"Mar"</span><span class="token punctuation">,</span> <span class="token string">"Apr"</span><span class="token punctuation">,</span> <span class="token string">"May"</span><span class="token punctuation">,</span> <span class="token string">"Jun"</span><span class="token punctuation">,</span> <span class="token string">"Jul"</span><span class="token punctuation">,</span> <span class="token string">"Aug"</span><span class="token punctuation">,</span> <span class="token string">"Sep"</span><span class="token punctuation">,</span> <span class="token string">"Oct"</span><span class="token punctuation">,</span> <span class="token string">"Nov"</span><span class="token punctuation">,</span> <span class="token string">"Dec"</span><span class="token punctuation">}</span>    Q2 <span class="token operator">:=</span> year<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>Q2<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>Q2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>Q2<span class="token punctuation">)</span><span class="token punctuation">)</span>                         <span class="token comment" spellcheck="true">// [Apr May Jun] 3 9</span>  summer <span class="token operator">:=</span> year<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>summer<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>summer<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>summer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[Jun Jul Aug] 3 7</span>  summer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Unkonw"</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>Q2<span class="token punctuation">)</span>                                                             <span class="token comment" spellcheck="true">//[Apr May Unkonw]</span>  t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span>                                                <span class="token comment" spellcheck="true">//[Jan Feb Mar Apr May Unkonw Jul Aug Sep Oct Nov Dec]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组-vs-切片"><a href="#数组-vs-切片" class="headerlink" title="数组 vs. 切片"></a>数组 vs. 切片</h3><ol><li>容量是否可以伸缩</li><li>是否可以进行比较</li></ol><p>切片只有为空（ <strong>nil</strong> ）的时候才可以比较</p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="声明-1"><a href="#声明-1" class="headerlink" title="声明"></a>声明</h3><pre class="line-numbers language-go"><code class="language-go">m <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token string">"one"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">}</span>m1 <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>m1<span class="token punctuation">[</span><span class="token string">"one"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>m2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token comment" spellcheck="true">/*初始化cap*/</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 没有初始len 因为无法默认初始化</span><span class="token comment" spellcheck="true">// s2 := make([]int, 3, 5) //len, cap</span><span class="token keyword">func</span> <span class="token function">TestInitMap</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    m1 <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>m1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"len m1 = %d"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">)</span>    m2 <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    m2<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">16</span>    t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"len m2 = %d"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">)</span>    m3 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"len m3 = %d"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>m3<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//无法求cap(m3)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="零值与不存在"><a href="#零值与不存在" class="headerlink" title="零值与不存在"></a>零值与不存在</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestAccessNotExistingKey</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    m1 <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>m1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0</span>    m1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>m1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//0</span>  <span class="token comment" spellcheck="true">//都是0.如何判断是不存在key还是本来就是0呢？</span>    <span class="token keyword">if</span> v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> m1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//key, bool</span>        t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"key exist"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"key 3 is not exist"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过判断返回nil来判断元素是否存在</p><h3 id="遍历-1"><a href="#遍历-1" class="headerlink" title="遍历"></a>遍历</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestTravelMap</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    m1 <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> m1 <span class="token punctuation">{</span>        t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Map与工厂模式"><a href="#Map与工厂模式" class="headerlink" title="Map与工厂模式"></a>Map与工厂模式</h3><ul><li>Map 的 value 可以是一个方法</li><li>与 Go 的 Dock type 接口方式一起，可以方便的实现单一方法对象的工厂模式</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestMapWithFunValue</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    m <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token keyword">func</span><span class="token punctuation">(</span>op <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>op <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> op <span class="token punctuation">}</span>    m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>op <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> op <span class="token operator">*</span> op <span class="token punctuation">}</span>    m<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>op <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> op <span class="token operator">*</span> op <span class="token operator">*</span> op <span class="token punctuation">}</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3 9 27</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现Set"><a href="#实现Set" class="headerlink" title="实现Set"></a>实现Set</h2><p>Go 内置集合中没有set实现，可以map（map类型的key是不能重复），其本质就是一个List，只是List里的元素不能重复。</p><ol><li>元素的唯一性</li><li>基本操作<ol><li>添加元素</li><li>判断元素是否存在</li><li>删除元素</li><li>元素个数</li></ol></li></ol><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestMapForSet</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    mySet <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    mySet<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>    n <span class="token operator">:=</span> <span class="token number">1</span>    <span class="token keyword">if</span> mySet<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token punctuation">{</span>        t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"%d is existing"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"%d is not existing"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    mySet<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>mySet<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">delete</span><span class="token punctuation">(</span>mySet<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    n <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">if</span> mySet<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token punctuation">{</span>        t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"%d is existing"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"%d is not existing"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token number">1</span> is existing<span class="token number">2</span><span class="token number">1</span> is not existing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ol><li>string 是数据类型，不是引用或指针类型</li><li>string 是只读的 byte slice，len 函数可以它所包含的 byte 数</li><li>string 的 byte 数组可以存放任何数据</li></ol><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestString</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> s <span class="token builtin">string</span> <span class="token comment" spellcheck="true">// 初始化为默认零值</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>    s <span class="token operator">=</span> <span class="token string">"hello"</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// s[1] = '3' //string 是不可变的 byte slice</span>    s <span class="token operator">=</span> <span class="token string">"\xE4\xB8\xA5"</span> <span class="token comment" spellcheck="true">// 可以存储任何二进制数据</span>    <span class="token comment" spellcheck="true">//</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token number">0</span><span class="token number">5</span>严<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Unicode-UTF8"><a href="#Unicode-UTF8" class="headerlink" title="Unicode UTF8"></a>Unicode UTF8</h3><ol><li>Unicode 是一种字符集（code point）</li><li>UTF8 是 Unicode 的存储实现（转换为字节序列的规则）</li></ol><pre class="line-numbers language-go"><code class="language-go">s <span class="token operator">=</span> <span class="token string">"中"</span>t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//是byte 数</span>c <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"中 unicode %x"</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"中 UFT8 %x"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 中</span><span class="token comment" spellcheck="true">// 3</span><span class="token comment" spellcheck="true">// 中 unicode 4e2d</span><span class="token comment" spellcheck="true">// 中 UFT8 e4b8ad</span><span class="token builtin">string</span><span class="token operator">/</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>  <span class="token punctuation">[</span><span class="token number">0xE4</span><span class="token punctuation">,</span><span class="token number">0xB8</span><span class="token punctuation">,</span><span class="token number">0xAD</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestStringToRune</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    s <span class="token operator">:=</span> <span class="token string">"中华人民共和国"</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> c <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">{</span>        t<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"%[1]c %[1]d"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>中 <span class="token number">20013</span>华 <span class="token number">21326</span>人 <span class="token number">20154</span>民 <span class="token number">27665</span>共 <span class="token number">20849</span>和 <span class="token number">21644</span>国 <span class="token number">22269</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用字符串函数"><a href="#常用字符串函数" class="headerlink" title="常用字符串函数"></a>常用字符串函数</h3><ol><li><a href="https://golang.org/pkg/strings" target="_blank" rel="noopener">strings 包</a></li><li><a href="https://golang.org/pkg/strconv" target="_blank" rel="noopener">strconv 包</a></li></ol><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestStringFn</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    s <span class="token operator">:=</span> <span class="token string">"A,B,C"</span>    parts <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> part <span class="token operator">:=</span> <span class="token keyword">range</span> parts <span class="token punctuation">{</span>        t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>part<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>parts<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*ABCA-B-C*/</span><span class="token keyword">func</span> <span class="token function">TestStringConv</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    s <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"str"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span>    <span class="token keyword">if</span> i<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">+</span> i<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*str1020*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意 strconv.Atoi() 返回两个值，一个 bool 类型</strong></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><strong>函数是一等公民</strong></p><ol><li>可以有多个返回值</li><li>所有参数都是值传递：slice, map, channel 会有传引用的错觉</li><li>函数可以作为变量的值</li><li>函数可以作为参数和返回值</li></ol><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">returnMultiValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestFn</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    a<span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token function">returnMultiValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 1 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">timeSpent</span><span class="token punctuation">(</span>inner <span class="token keyword">func</span><span class="token punctuation">(</span>op <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span>op <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>        start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        ret <span class="token operator">:=</span> <span class="token function">inner</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"time spent:"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ret    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">slowFun</span><span class="token punctuation">(</span>op <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> op<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestFn</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    tsSF <span class="token operator">:=</span> <span class="token function">timeSpent</span><span class="token punctuation">(</span>slowFun<span class="token punctuation">)</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token function">tsSF</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// time spent: 1.004492699</span><span class="token comment" spellcheck="true">// 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数：可变长参数及-defer"><a href="#函数：可变长参数及-defer" class="headerlink" title="函数：可变长参数及 defer"></a>函数：可变长参数及 defer</h3><h4 id="可变长"><a href="#可变长" class="headerlink" title="可变长"></a>可变长</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Sum</span><span class="token punctuation">(</span>ops <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>  s <span class="token operator">:=</span> <span class="token number">0</span>  <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> op<span class="token operator">:=</span> <span class="token keyword">range</span> ops <span class="token punctuation">{</span>    s <span class="token operator">+=</span> op  <span class="token punctuation">}</span>  <span class="token keyword">return</span> s<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h4><p>类似 finally 函数，函数返回之前执行</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Clear resources"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestDefer</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 匿名函数</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"Clear resources"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 非匿名函数</span>  <span class="token keyword">defer</span> <span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"Started"</span><span class="token punctuation">)</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"Fatal error"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//程序报错，defer 仍会执行</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"End"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 报错，这行代码执行不到</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C学习（四）</title>
      <link href="/2019/10/06/C%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2019/10/06/C%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="多维数组、指针本质"><a href="#多维数组、指针本质" class="headerlink" title="多维数组、指针本质"></a>多维数组、指针本质</h1><h2 id="数组指针类型"><a href="#数组指针类型" class="headerlink" title="数组指针类型"></a>数组指针类型</h2><h3 id="1）-通过数组类型定义数组指针"><a href="#1）-通过数组类型定义数组指针" class="headerlink" title="1） 通过数组类型定义数组指针:"></a>1） 通过数组类型定义数组指针:</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span><span class="token punctuation">(</span>ArrayType<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token operator">*</span>aArrayType<span class="token operator">*</span> pointer<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>数组指针： 用数组类型加*定义一个数组指针</p><a id="more"></a><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//1</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//声明一个数组类型</span>    <span class="token keyword">typedef</span> <span class="token keyword">int</span><span class="token punctuation">(</span>MYINT5<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//用数组类型 加*， 定义一个数组指针变量</span>    MYINT5 <span class="token operator">*</span>array<span class="token punctuation">;</span>    array <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token operator">*</span>array<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token operator">/</span>    <span class="token operator">/</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n%d %d"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>array<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2）声明一个数组指针类型"><a href="#2）声明一个数组指针类型" class="headerlink" title="2）声明一个数组指针类型"></a>2）声明一个数组指针类型</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>MyPointer<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>MyPointer myPoint<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>数组指针： 定义一个数组指针类型， 然后用类型定义变量 </p><pre class="line-numbers language-c"><code class="language-c"><span class="token punctuation">{</span>    <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//声明一个数组指针类型</span>    <span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>MyPointer<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//用数组指针类型， 去定义一个变量</span>    MyPointer mypoint<span class="token punctuation">;</span>        mypoint<span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token operator">*</span>mypoint<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token operator">/</span>    <span class="token operator">/</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n%d %d"</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>mypoint<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3）-直接定义"><a href="#3）-直接定义" class="headerlink" title="3） 直接定义"></a>3） 直接定义</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>pointer<span class="token punctuation">)</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    pointer 为数组指针变量名<br>​    type 为指向的数组的类型<br>​    n 为指向的数组的大小<br>__注意这个地方是 type 类型（比如 int （*pointer） [10]） __</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//3 数组指针： 直接定义一个数组指针变量</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> c<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//直接声明一个数组指针变量</span>    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>pointer<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>c<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token operator">*</span>pointer<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n%d %d"</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>pointer<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多维数组本质"><a href="#多维数组本质" class="headerlink" title="多维数组本质"></a>多维数组本质</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">char</span> myarray<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> 和 <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//myarray 名称到底是什么？</span><span class="token comment" spellcheck="true">// 多维数组 char a[i][j] ==> *(*(a+i)+j)转换技巧分析</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//&amp;c + 1;</span>    <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//b 代表数组首元素的地址   &amp;b 代表这个数组的地址     &amp;b+1 相当于 指针后移4*10 个单位</span>    <span class="token comment" spellcheck="true">//a + 1 = 5*4</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a:%d, a+1:%d \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//4*5</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>tmp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//a 的本质是一个数组指针， 每次往后跳一维的维数</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义了一个数组指针 变量</span>        <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>myArrayPoint<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//告诉编译给我开辟四个字节内存</span>        myArrayPoint <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//myArrayPoint[i][j] = ++tmp;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d \n"</span><span class="token punctuation">,</span> myArrayPoint<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*    char cbuf[30];         // cbuf（1 级指针） 代表数组首元素的地址。。。 &amp;cbuf（二级指针） 代表    整个数组的地址    char array[10][30]; //array 是二级指针    (array+i)             //相当于 整个第 i 行的数组地址 //二级指针 &amp;cbuf    (*(array+i))         //一维数组的首地址 cbuf    (*(array+i)) +j     //相当于第 i 行第 j 列的地址了   &amp;array[i][j]    *((*(array+i)) +j)  //相当于第 i 行第 j 列的地址了  &lt;====>array[i][j]    */</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>多维数组本质就 是一个数组指针</strong></p><h2 id="多维数组做函数参数退化原因"><a href="#多维数组做函数参数退化原因" class="headerlink" title="多维数组做函数参数退化原因"></a>多维数组做函数参数退化原因</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">printfArray1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//二维数组当作一维来打印</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">printfArray2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>array<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">printfArrr3</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printfArray411</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一维退化过程</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>二维退化过程</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> DIM(a) (sizeof(a)/sizeof(*a))</span><span class="token function">DIM</span><span class="token punctuation">(</span>some<span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>some<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>some<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>二级指针作为形参在函数参数传递后，因为只传递了指针，所以DIM(p) = 1，而在原位置为 n 个元素</p><h2 id="数组的自我结束"><a href="#数组的自我结束" class="headerlink" title="数组的自我结束"></a>数组的自我结束</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> keywords<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"while"</span><span class="token punctuation">,</span>    <span class="token string">"case"</span><span class="token punctuation">,</span>    <span class="token string">"sttic"</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>keywords<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">//出错</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//修改为</span><span class="token keyword">char</span><span class="token operator">*</span> keywords1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"while"</span><span class="token punctuation">,</span>    <span class="token string">"case"</span><span class="token punctuation">,</span>    <span class="token string">"sttic"</span><span class="token punctuation">,</span>    <span class="token string">'\0'</span><span class="token punctuation">}</span><span class="token keyword">char</span><span class="token operator">*</span> keywords2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"while"</span><span class="token punctuation">,</span>    <span class="token string">"case"</span><span class="token punctuation">,</span>    <span class="token string">"sttic"</span><span class="token punctuation">,</span>     <span class="token number">0</span><span class="token punctuation">}</span><span class="token keyword">char</span><span class="token operator">*</span> keywords3<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"while"</span><span class="token punctuation">,</span>    <span class="token string">"case"</span><span class="token punctuation">,</span>    <span class="token string">"sttic"</span><span class="token punctuation">,</span>    <span class="token constant">NULL</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//其中一种都可以</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>keywords<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">//没问题</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C学习（五）</title>
      <link href="/2019/10/04/C%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2019/10/04/C%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><h2 id="名字重定义"><a href="#名字重定义" class="headerlink" title="名字重定义"></a>名字重定义</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Teacher<span class="token punctuation">{</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span>Teacher<span class="token punctuation">;</span>Teacher t1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分配内存</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类型定义变量的方法"><a href="#类型定义变量的方法" class="headerlink" title="类型定义变量的方法"></a>类型定义变量的方法</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> Teacher<span class="token punctuation">{</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span>Teacher<span class="token punctuation">;</span><span class="token keyword">struct</span> _Student<span class="token punctuation">{</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> tile<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">char</span> addr<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义类型的同时， 定义变量；</span><span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> tile<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">char</span> addr<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>s3<span class="token punctuation">,</span>s4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//匿名类型 直接定义结构体变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a><h1 id="初始化变量"><a href="#初始化变量" class="headerlink" title="初始化变量"></a>初始化变量</h1><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//1)</span>Teacher t4 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name2"</span><span class="token punctuation">,</span> <span class="token string">"tile2"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"addr2"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2)</span><span class="token keyword">struct</span> Dog1<span class="token punctuation">{</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> tile<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">char</span> addr<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>d5 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"dog"</span><span class="token punctuation">,</span> <span class="token string">"gongzhu"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3)</span><span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> tile<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">char</span> addr<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>d6 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"dog"</span><span class="token punctuation">,</span> <span class="token string">"gongzhu"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结构体变量的引用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结构体变量的引用"><a href="#结构体变量的引用" class="headerlink" title="结构体变量的引用"></a>结构体变量的引用</h2><pre class="line-numbers language-c"><code class="language-c">t1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"lili"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> t1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>t1.</code> 是寻址操作， 计算 <code>age</code> 相对于 <code>t1</code> 的偏移量，cpu进行，没有操作内存</p><pre class="line-numbers language-c"><code class="language-c">Teacher <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>t2<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="结构体的操作"><a href="#结构体的操作" class="headerlink" title="结构体的操作"></a>结构体的操作</h2><pre class="line-numbers language-c"><code class="language-c">Teacher t1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name2"</span><span class="token punctuation">,</span> <span class="token string">"tile2"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"addr2"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Teacher t2<span class="token punctuation">;</span>t2 <span class="token operator">=</span> t1<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> t2<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> name2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结构体作为函数参数"><a href="#结构体作为函数参数" class="headerlink" title="结构体作为函数参数"></a>结构体作为函数参数</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span>Teacher from<span class="token punctuation">,</span> Teacher to<span class="token punctuation">)</span><span class="token punctuation">{</span>    to <span class="token operator">=</span> from<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">copy</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此时只是把t1给了form， t2给了to，跟原本的t1，t2没关系</span><span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span>Teacher<span class="token operator">*</span> from<span class="token punctuation">,</span> Teacher<span class="token operator">*</span> to<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">*</span>to <span class="token operator">=</span> <span class="token operator">*</span>from<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这样才可以把结构体内 内容拷贝</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结构体和指针"><a href="#结构体和指针" class="headerlink" title="结构体和指针"></a>结构体和指针</h2><h3 id="一级指针"><a href="#一级指针" class="headerlink" title="一级指针"></a>一级指针</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> Teacher<span class="token punctuation">{</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> otherName<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//需要自己分配内存</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span>Teacher<span class="token punctuation">;</span>Teacher <span class="token operator">*</span>pArr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>pArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>pArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>otherName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二级指针"><a href="#二级指针" class="headerlink" title="二级指针"></a>二级指针</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> Teacher<span class="token punctuation">{</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> otherName<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//需要自己分配内存</span>    <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> someName<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span>Teacher<span class="token punctuation">;</span>pArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>otherName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>pArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>someName <span class="token operator">=</span> p<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结构体的深浅拷贝"><a href="#结构体的深浅拷贝" class="headerlink" title="结构体的深浅拷贝"></a>结构体的深浅拷贝</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> Teacher<span class="token punctuation">{</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> otherName<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//需要自己分配内存</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span>Teacher<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span>Teacher<span class="token operator">*</span> from<span class="token punctuation">,</span> Teacher<span class="token operator">*</span> to<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">*</span>to <span class="token operator">=</span> <span class="token operator">*</span>from<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只是个浅拷贝</span>    <span class="token comment" spellcheck="true">//memcpy(to, form, sizeof(Teacher)) // 一样</span><span class="token punctuation">}</span>t1<span class="token punctuation">.</span>otherName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//*otherName拷贝出现问题</span><span class="token comment" spellcheck="true">// t1.otherName t2.otherName是同一个地址值，但是指向的内存空间并没有拷贝  《== 浅拷贝</span><span class="token comment" spellcheck="true">//解决</span><span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span>Teacher<span class="token operator">*</span> from<span class="token punctuation">,</span> Teacher<span class="token operator">*</span> to<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">*</span>to <span class="token operator">=</span> <span class="token operator">*</span>from<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只是个浅拷贝</span>    <span class="token comment" spellcheck="true">//memcpy(to, form, sizeof(Teacher)) // 一样</span>    to<span class="token punctuation">.</span>otherName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>otherName<span class="token punctuation">,</span> from<span class="token punctuation">.</span>otherName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结构体的偏移量"><a href="#结构体的偏移量" class="headerlink" title="结构体的偏移量"></a>结构体的偏移量</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Teacher<span class="token punctuation">{</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> otherName<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//需要自己分配内存</span><span class="token punctuation">}</span>Teacher<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Teacher t1<span class="token punctuation">;</span>    Teacher <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    p1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编译和运行都没问题，只在cpu，没操作内存</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//int offsize = (int)&amp;(p1->age);</span>        <span class="token keyword">int</span> offsize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Teacher<span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> offsize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>p1<span class="token operator">-></span>age<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>p<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> offsize<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> 64 , p1.name占了64</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一旦结构体定义下来，则其中的成员内存布局就确定了</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C学习（三）</title>
      <link href="/2019/10/04/C%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2019/10/04/C%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="二级指针"><a href="#二级指针" class="headerlink" title="二级指针"></a>二级指针</h1><h2 id="对空间的释放"><a href="#对空间的释放" class="headerlink" title="对空间的释放"></a>对空间的释放</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">get_mem</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">get_mem</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">free_mem</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//注意不是**p</span>        <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a><h4 id="反例"><a href="#反例" class="headerlink" title="反例"></a>反例</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">free_mem1</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> p<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//传递一级指针</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//注意不是**p</span>        <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">free_mem2</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> vovo<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//传递一级指针</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>vovo <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">free</span><span class="token punctuation">(</span>vovo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//注意不是**p</span>        vovo <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在此函数内对p = NULL，只是把一个名字一样的形参置为NULL，对实参无影响，如 <code>free_mem2</code>，造成野指针问题</p><h2 id="二级指针内存模型"><a href="#二级指针内存模型" class="headerlink" title="二级指针内存模型"></a>二级指针内存模型</h2><h3 id="第一种，指针数组"><a href="#第一种，指针数组" class="headerlink" title="第一种，指针数组"></a>第一种，指针数组</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 第一种，指针数组</span><span class="token keyword">char</span><span class="token operator">*</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token string">"vv"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> arrSize <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> str <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>arr<span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> str2 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意跟一级的区别</span><span class="token keyword">char</span> buff<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：此种方式 <code>arr</code> 在栈上分配了一个存 <code>n</code> 个指针地址的数组，<code>n</code> 个地址指向常量区</strong></p><h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//第二种</span><span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"12312"</span><span class="token punctuation">,</span> <span class="token string">"sadfgasg"</span><span class="token punctuation">,</span> <span class="token string">"sagd"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// sort </span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> tmpBuf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>tmpBuf<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> tmpBuf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//求数组元素个数也不同,需要自己手动遍历</span><span class="token keyword">int</span> arrSize <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// =10,只求出来10行</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多维数组跟一维数组作为参数传递退化问题不同</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不行，并且作指针加减运算步长也不一样，交换数组时，是交换的内存块</span><span class="token keyword">char</span><span class="token operator">*</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以，交换数组时，是交换的指针指向</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：此种方式内存全分配到栈区，一个<code>arr</code>内存内分别依次放了所有的数据，此种步长与其他不同</strong></p><h3 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//num个元素</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sprinf</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span>i<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//释放</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//传递方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：此种方式<code>p</code>在栈区存一个二级指针地址，指向堆区的一个存了<code>num</code>个地址的内存块，<code>num</code>个地址又分别指向堆上的内存块</strong></p><h2 id="三级指针"><a href="#三级指针" class="headerlink" title="三级指针"></a>三级指针</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">getMem</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">getMem</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sprinf</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span>i<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>p3 <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">free</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    tmp <span class="token operator">=</span> <span class="token operator">*</span>p3<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>p3 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三级指针初始化易错点"><a href="#三级指针初始化易错点" class="headerlink" title="三级指针初始化易错点"></a>三级指针初始化易错点</h2><p>当使用一个<strong>二级指针</strong>拷贝三级指针中二级指针地址，使用拷贝的二级指针malloc一块空间，跟三级指针中二级指针地址关联性出现问题</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> str <span class="token operator">=</span> <span class="token constant">NULL</span>；<span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> tmpStr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token operator">*</span>str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//是对的</span>tmpStr <span class="token operator">=</span> <span class="token operator">*</span>str<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*str: %p, tmpStr:%p"</span><span class="token punctuation">,</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> tmpStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-> *str: 011E60F8, tmpStr:011E60F8</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> str <span class="token operator">=</span> <span class="token constant">NULL</span>；<span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> tmpStr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>tmpStr <span class="token operator">=</span> <span class="token operator">*</span>str<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//由于*str初始化他们都指向了0</span>tmpStr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此时tmpStr指向了0xaa11,str还是0</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*str: %p, tmpStr:%p"</span><span class="token punctuation">,</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> tmpStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-> *str: CCCCCCCC, tmpStr:00E860F8</span><span class="token comment" spellcheck="true">// 可以在*str = tmpStr;来解决</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对它的<strong>一级指针</strong>也是一样</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> realTmpStr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token operator">*</span>tmpStr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>realTmpStr <span class="token operator">=</span> <span class="token operator">*</span>tmpStr<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>问题原因开始未初始化的指针都指向0，初始化后指向一个新地址，而原指针依旧指向0。</p><p>如<strong><code>A-&gt;B-&gt;0-&gt;0，tmp = B，tmp-&gt;0xaa-&gt;0</code></strong>，此时原指针依旧 <strong><code>A-&gt;B-&gt;0-&gt;0</code></strong>，<strong><code>-&gt;</code></strong>寻址路线在创建时就固定了，只改变中间的地址值，<strong><code>-&gt;</code></strong>寻址路线未改变，因此出现问题</p><p><strong>先使用二级指针操作，最后将三级指针指向二级指针最好的方法</strong></p><h2 id="一些常用字符串函数"><a href="#一些常用字符串函数" class="headerlink" title="一些常用字符串函数"></a>一些常用字符串函数</h2><h3 id="strstr-char-str-char-sub"><a href="#strstr-char-str-char-sub" class="headerlink" title="strstr(char* str, char* sub)"></a><code>strstr(char* str, char* sub)</code></h3><p>查找 str 中第一个 sub 匹配位置</p><h3 id="strcpy-char-str-char-sub"><a href="#strcpy-char-str-char-sub" class="headerlink" title="strcpy(char* str, char* sub)"></a><code>strcpy(char* str, char* sub)</code></h3><p>sub 内容拷贝到 str</p><h3 id="strncpy-char-dest-const-char-src-size-t-n"><a href="#strncpy-char-dest-const-char-src-size-t-n" class="headerlink" title="strncpy(char* dest, const char* src, size_t n)"></a><code>strncpy(char* dest, const char* src, size_t n)</code></h3><p>sub 内容拷贝到 str n个字符</p><h3 id="strcat-char-dest-const-char-src"><a href="#strcat-char-dest-const-char-src" class="headerlink" title="strcat(char* dest,  const char* src)"></a><code>strcat(char* dest,  const char* src)</code></h3><p>dest 后拼接src</p><h3 id="strncat-char-dest-const-char-src-size-t-n"><a href="#strncat-char-dest-const-char-src-size-t-n" class="headerlink" title="strncat(char* dest, const char* src, size_t n)"></a><code>strncat(char* dest, const char* src, size_t n)</code></h3><p>dest 后拼接src的n个字符</p><h3 id="strcmp-char-str-char-sub"><a href="#strcmp-char-str-char-sub" class="headerlink" title="strcmp(char* str, char* sub)"></a><code>strcmp(char* str, char* sub)</code></h3><p>比较</p><h3 id="strcmp-const-char-dest-const-char-src-size-t-n"><a href="#strcmp-const-char-dest-const-char-src-size-t-n" class="headerlink" title="strcmp(const char* dest, const char* src, size_t n)"></a><code>strcmp(const char* dest, const char* src, size_t n)</code></h3><p>比较前n个</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac下配置APUE编程环境</title>
      <link href="/2019/10/04/Mac%E4%B8%8B%E9%85%8D%E7%BD%AEAPUE%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83/"/>
      <url>/2019/10/04/Mac%E4%B8%8B%E9%85%8D%E7%BD%AEAPUE%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="Mac下配置APUE编程环境"><a href="#Mac下配置APUE编程环境" class="headerlink" title="Mac下配置APUE编程环境"></a>Mac下配置APUE编程环境</h1><p>下载<a href="http://www.apuebook.com/" target="_blank" rel="noopener">源代码</a></p><pre class="line-numbers language-shell"><code class="language-shell">cd apue.3e #进入目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同时修改include/apue.h文件 130行，在<code>#endif  /* _APUE_H */</code>之前加上一条语句</p><pre class="line-numbers language-shell"><code class="language-shell">#include "error.c"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">void    WAIT_CHILD(void);#include "error.c"#endif  /* _APUE_H */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>之后编译</p><pre class="line-numbers language-shell"><code class="language-shell">makecp ./include/apue.h /usr/local/include/cp ./lib/error.c /usr/local/include/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果之前编译了，就到<code>/usr/local/include/</code>修改也可以</p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C学习（二）</title>
      <link href="/2019/10/03/C%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2019/10/03/C%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><h2 id="指针释放问题（野指针）"><a href="#指针释放问题（野指针）" class="headerlink" title="指针释放问题（野指针）"></a>指针释放问题（野指针）</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意要先给空间才能cpy值</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">"111111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 不小心进行两次free</span><span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然第一次 p 指向的地址 <code>0xaa11</code> 区域的东西 free 了，但是 p 本身还是指向 <code>0xaa11</code> ，此时一段垃圾区域（野指针），再free就出现问题了</p><p>因此需要</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a><h2 id="指针或函数共享内存块"><a href="#指针或函数共享内存块" class="headerlink" title="指针或函数共享内存块"></a>指针或函数共享内存块</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> p1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> p2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>p2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    p1 <span class="token operator">=</span> p2 <span class="token operator">+</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时 p1，p2 共享同一内存空间，可以类比两个函数也共享同一内存空间</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>    <span class="token function">other</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">other</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">*</span>e<span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二级指针"><a href="#二级指针" class="headerlink" title="二级指针"></a>二级指针</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> p1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> p2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//直接修改</span>p1 <span class="token operator">=</span> <span class="token number">0x11</span><span class="token punctuation">;</span>p2 <span class="token operator">=</span> <span class="token number">0x22</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//间接修改</span>p2 <span class="token operator">=</span> <span class="token operator">&amp;</span>p1<span class="token punctuation">;</span><span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token number">0xaa</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> p1 = 0xaa</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跟共享内存结合</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">getMem1</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">0xcc</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">getMem2</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>    p <span class="token operator">=</span> <span class="token number">0xcc</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改无效,只是形参，不是对地址值操作</span><span class="token punctuation">}</span><span class="token function">getMem1</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对p1的地址值位置内存进行操作</span><span class="token function">getMem1</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改无效</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写个例子</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">char</span><span class="token operator">*</span> p1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> p2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">getMem</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"len1: %d, len2: %d \n"</span><span class="token punctuation">,</span> len1<span class="token punctuation">,</span> len2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// len1: 7, len2: 7</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"len1: %s, len2: %s \n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// len1: 1234565, len2: abcdefg</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"len1: %c, len2: %c \n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>p1<span class="token punctuation">,</span> <span class="token operator">*</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// len1: 1, len2: a</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p1 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">free</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>        p1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p2 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">free</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>        p2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">getMem</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> myp1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> mylen1<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> myp2<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> mylen2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span><span class="token operator">*</span> temp1<span class="token punctuation">,</span> <span class="token operator">*</span> temp2<span class="token punctuation">;</span>    temp1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>temp1<span class="token punctuation">,</span> <span class="token string">"1234565"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    temp2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>temp2<span class="token punctuation">,</span> <span class="token string">"abcdefg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//间接赋值</span>    <span class="token operator">*</span>myp1 <span class="token operator">=</span> temp1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//一级指针间接赋值</span>    <span class="token operator">*</span>myp2 <span class="token operator">=</span> temp2<span class="token punctuation">;</span>    <span class="token operator">*</span>mylen1 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>temp1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//二级指针间接赋值</span>    <span class="token operator">*</span>mylen2 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>temp2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 指定长度</span><span class="token keyword">char</span> buff<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//其它值为0</span><span class="token comment" spellcheck="true">// 不指定</span><span class="token keyword">char</span> buff<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//是个数组，不是字符串，字符串以0结尾 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串初始化字符数组"><a href="#字符串初始化字符数组" class="headerlink" title="字符串初始化字符数组"></a>字符串初始化字符数组</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">char</span> buff<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abcdef"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作为字符数组长度为7个字节，作为字符串是6个</span><span class="token comment" spellcheck="true">// 求字符长度</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 6</span><span class="token comment" spellcheck="true">// 数组所占内存空间大小</span><span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="和"><a href="#和" class="headerlink" title="[] 和 *"></a>[] 和 *</h4><blockquote><p>buff[i] ===&gt; buff[0+i] ===&gt; *(buff+i)</p></blockquote><p>buff 是一个<font color=red>常量</font>指针，析构内存时，保证buff所指向的内存空间安全释放</p><h2 id="指针易错点"><a href="#指针易错点" class="headerlink" title="指针易错点"></a>指针易错点</h2><h3 id="char-越界"><a href="#char-越界" class="headerlink" title="char 越界"></a>char 越界</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">char</span> buff<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//还要考虑 \0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="优先级问题"><a href="#优先级问题" class="headerlink" title="优先级问题"></a>优先级问题</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token operator">++</span>比<span class="token operator">*</span>优先级高，因此注意<span class="token operator">*</span>p<span class="token operator">++</span>的问题<span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">++</span>  <span class="token operator">-></span>p指向的数据自加<span class="token operator">*</span>p<span class="token operator">++</span>    <span class="token operator">-></span>p地址值自加<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="注意二级指针自加问题"><a href="#注意二级指针自加问题" class="headerlink" title="注意二级指针自加问题"></a>注意二级指针自加问题</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//两种方式</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> buffa <span class="token operator">=</span> buff1<span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> buffb <span class="token operator">=</span> <span class="token operator">*</span>buff2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//*((*buff1copy)++) = *(source + i);</span><span class="token operator">*</span><span class="token operator">*</span>buffa <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>source <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token operator">*</span>buffa<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token operator">*</span>buffb<span class="token operator">++</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>source <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一种方式行不通，虽然因为<em>buffa</em>拷贝<em>buff1</em>，同时建立<strong>A-&gt;B-&gt;C</strong>，但是当<strong>B</strong>改变了，那么<em>buffa</em>和<em>buff1</em>所指向的内存位置同时改变，因此拷贝没有意义</p><p>第二种方式有效，等于使用一个<strong>D = B-&gt;C</strong>，其中<strong>B</strong>改变了，使<strong>C</strong>一直增长，但原始的<strong>A-&gt;B-&gt;C</strong>还在指向<strong>C</strong>的首地址</p><h2 id="const-问题"><a href="#const-问题" class="headerlink" title="const 问题"></a>const 问题</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> c<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//c不可以修改</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token keyword">const</span> d<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 类似char buff[],首地址不可以修改，char*不可修改</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token keyword">const</span> e<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>c 是一个指向常量整形数的指针，所指向的内存空间不可以修改，本身地址值可以修改</p><p>d 是一个常量指针，它所指向的内存空间可以修改，本身地址值不可以修改</p><p>e 是一个指向常量整形数的常量指针,指向的内存空间以及本身均不可以修改</p><h3 id="绕过-const-变量"><a href="#绕过-const-变量" class="headerlink" title="绕过 const 变量"></a>绕过 const 变量</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> 100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C学习（一）</title>
      <link href="/2019/10/02/C%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2019/10/02/C%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><h2 id="C语言中地址值赋值"><a href="#C语言中地址值赋值" class="headerlink" title="C语言中地址值赋值"></a>C语言中地址值赋值</h2><blockquote><p>直接赋值</p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 若 a 地址值 &amp;a = 1245024;</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">1245024</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->300</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>间接赋值</p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span><span class="token operator">*</span> p<span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token number">1245024</span><span class="token punctuation">;</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//->200</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a><p>注意类比 <strong>*((*int)1245024)</strong> 和  <strong>*p</strong> 关系</p><blockquote><p>c++ 使用引用起别名</p></blockquote><pre class="line-numbers language-c++"><code class="language-c++">int b = &a;b = 400;printf("%d", a); //->400<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="数据类型重命名"><a href="#数据类型重命名" class="headerlink" title="数据类型重命名"></a>数据类型重命名</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> Teacher<span class="token punctuation">{</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span>Teacher<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Teacher2<span class="token punctuation">{</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span>Teacher2<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> u32<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><ul><li><strong>指针变量</strong> 和 其所指向的<strong>内存空间</strong>完全不同</li></ul><blockquote><p>函数中 malloc 的内存（堆）， 和全局区的字符串常量，可以被main函数（或其它函数）使用</p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// C语言</span><span class="token comment" spellcheck="true">// 堆</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">getMem1</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注意malloc， 需要自己释放，否则一直存在</span>    p1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>cahr<span class="token punctuation">)</span><span class="token operator">*</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p1 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> NUll<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> p1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 栈</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">getMem2</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 临时变量 栈区存放</span>    <span class="token keyword">char</span> buff<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token string">"123456789"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// return 了内存块的首地址值</span>    <span class="token keyword">return</span> buff<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">mian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span><span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    tmp <span class="token operator">=</span> <span class="token function">getMem1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> NUll<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> <span class="token string">"1112222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ->1112222</span>    tmp <span class="token operator">=</span> <span class="token function">getMem2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> 空</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>栈的生长方向和内存块（<code>int num[64]</code>）的生长方向是两个东西</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// C语言</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a: %p, b: %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> a: 004FFD18, b: 004FFD0C</span><span class="token comment" spellcheck="true">// 证明debug模式下栈的生长方向向下</span><span class="token comment" spellcheck="true">// -> a: 00AFF694, b: 00AFF698</span><span class="token comment" spellcheck="true">// 证明Release模式下栈的生长方向向上</span><span class="token keyword">char</span> buff<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buff: %p, buff+1: %p\n"</span><span class="token punctuation">,</span> buff<span class="token punctuation">,</span> buff<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 实在自己的内存块加一，因此注意不同栈的生长方向时，内存首地址指向的位置</span><span class="token comment" spellcheck="true">// -> buff: 00EFFDA0, buff+1: 00EFFDA1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>堆的生长方向都是向上</li></ul><pre class="line-numbers language-c"><code class="language-c">dui1<span class="token punctuation">:</span> 01417F20<span class="token punctuation">,</span> dui2<span class="token punctuation">:</span> 01417F50dui1<span class="token punctuation">:</span> <span class="token number">010861E8</span><span class="token punctuation">,</span> dui2<span class="token punctuation">:</span> 0108BFD8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="地址值计算"><a href="#地址值计算" class="headerlink" title="地址值计算"></a>地址值计算</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 地址值计算 </span><span class="token keyword">int</span> c<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c: %p, c+1: %p, c&amp;: %p, &amp;c+1: %p \n"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -> c: 006FFAD8, c+1: 006FFADC, c&amp;: 006FFAD8, &amp;c+1: 006FFB00</span><span class="token comment" spellcheck="true">// debug模式下 c&amp;+1 - &amp;c = 40</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内存四区"><a href="#内存四区" class="headerlink" title="内存四区"></a>内存四区</h2><ul><li>栈区</li><li>堆区</li><li>全局区（字符串常量和全局变量）</li><li>代码区</li></ul><blockquote><p>C 语言编译器为一个程序只建立一套四区</p></blockquote><p>##　指针强化</p><h3 id="铁律1：指针是一种数据类型"><a href="#铁律1：指针是一种数据类型" class="headerlink" title="铁律1：指针是一种数据类型"></a>铁律1：指针是一种数据类型</h3><ol><li><p>指针也是一种变量，占有内存空间，用来保存内存地址，测试指针变量占有内存空间大小（不同的指针类型就不一样）</p></li><li><p><strong>*p</strong> 操作内存</p><ul><li>在指针声明时，<code>*</code> 号表示所声明的变量为指针</li><li>在指针使用时，<code>*</code>号表示 操作 指针所指向的内存空间中的值</li><li><strong>*p</strong> 相当于通过地址（<code>p</code> 变量的值）找到一块内存，然后操作内存</li><li><strong>*p</strong> 放在等号的左边  赋值（给内存赋值）</li><li><strong>*p</strong> 放在等号的右边  取值（从内存获取值）</li></ul></li></ol><ol start="3"><li><p>指针变量和它指向的内存块是两个不同的概念</p><ul><li><p>给 <strong>p</strong> 赋值 <code>p = 0x1111</code>，只改变指针指向，不会改变所指的内容；<code>p++</code></p></li><li><p>给 <strong>*p</strong> 赋值 <code>*p = 100</code>， 不会改变指针变量指向，只会改变所指的内存块的值  </p></li><li><p><code>=</code> 的左边 <strong>*p</strong> 表示 给内存赋值， <code>=</code> 右边 <strong>*p</strong> 表示取值 含义不同！</p></li><li><p><code>=</code> 的左边 <code>char *p</code></p></li><li><p><font color=red>保证所指的内存块能修改</font></p></li></ul></li><li><p>指针是一种数据类型，是指它指向的内存空间的数据类型  </p><ul><li><p>指针步长（p++），根据所致内存空间的数据类型来确定（因此步长不确定）</p><p><code>p++ -&gt; (unsigned char)p+sizeof(a);</code></p><p>结论：指针的步长，根据所指内存空间类型来定。</p></li></ul></li></ol><p>​    </p><p>注意：建立指针指向谁，就把把谁的地址赋值给指针。图和代码和二为一。    </p><p>​            不断的给指针变量赋值，就是不断的改变指针变量（和所指向内存空间没有关系）。</p><h3 id="铁律2：间接赋值（-p）是指针存在的最大意义"><a href="#铁律2：间接赋值（-p）是指针存在的最大意义" class="headerlink" title="铁律2：间接赋值（*p）是指针存在的最大意义"></a>铁律2：间接赋值（*p）是指针存在的最大意义</h3><ol><li><p>两码事：指针变量和它指向的内存块变量</p></li><li><p>条件反射：指针指向某个变量，就是把某个变量地址否给指针</p></li><li><p><strong>*p</strong> 间接赋值成立条件：3个条件 </p><ul><li><p><font color=red>2个变量（通常一个实参，一个形参(两个函数之间的话)）</font></p></li><li><p><font color=red>建立关系，实参取地址赋给形参指针 </font></p></li><li><p><font color=red>*p 形参去间接修改实参的值 </font></p></li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> iNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//实参</span><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>iNum<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//建立关系</span><span class="token operator">*</span>p <span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//间接赋值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>引申：函数调用时,用n指针（形参）改变n-1指针（实参）的值。**</p><p>改变0级指针（<code>int iNum = 1</code>）的值有2种方式</p><p>改变1级指针（<code>char *p = 0x1111</code> ）的值，有2种方式</p><p>改变2级指针的（<code>char **pp1 = 0x1111</code> ）的值，有2种方式</p></li></ol><p>   函数调用时，形 参传给实参，用实参取地址，传给形参，在被调用函数里面用<strong>*p</strong>，来改变实参，把运算结果传出来。</p><p>   指针作为函数参数的精髓。</p><h3 id="铁律3：理解指针必须和内存四区概念相结合"><a href="#铁律3：理解指针必须和内存四区概念相结合" class="headerlink" title="铁律3：理解指针必须和内存四区概念相结合"></a><strong>铁律3：理解指针必须和内存四区概念相结合</strong></h3><ol><li><p>主调函数 被调函数 </p><p>a)  主调函数可把堆区、栈区、全局数据内存地址传给被调用函数</p><p>b)  被调用函数只能返回堆区、全局数据</p></li><li><p>内存分配方式</p><p>a)  指针做函数参数，是有<font color=red>输入和输出特性</font>的。</p></li></ol><h3 id="铁律4：应用指针必须和函数调用相结合（指针做函数参数）"><a href="#铁律4：应用指针必须和函数调用相结合（指针做函数参数）" class="headerlink" title="铁律4：应用指针必须和函数调用相结合（指针做函数参数）"></a>铁律4：应用指针必须和函数调用相结合（指针做函数参数）</h3><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/tielv.png" alt="img"> </p><p>指针做函数参数，问题的实质不是指针，而是看内存块，内存块是1维、2维。</p><ol><li><p>如果基础类int变量，不需要用指针；</p></li><li><p>若内存块是1维、2维。</p></li></ol><h3 id="铁律5：一级指针典型用法（指针做函数参数）"><a href="#铁律5：一级指针典型用法（指针做函数参数）" class="headerlink" title="铁律5：一级指针典型用法（指针做函数参数）"></a>铁律5：一级指针典型用法（指针做函数参数）</h3><p>一级指针做输入</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">showbuf</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">showArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> iNum<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一级指针做输出</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">geLen</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> pFileName<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> pfileLen<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>理解</p><blockquote><p>主调函数还是被调用函数分配内存</p><p>被调用函数是在heap/stack上分配内存</p></blockquote><h3 id="铁律6：二级指针典型用法（指针做函数参数）"><a href="#铁律6：二级指针典型用法（指针做函数参数）" class="headerlink" title="铁律6：二级指针典型用法（指针做函数参数）"></a>铁律6：二级指针典型用法（指针做函数参数）</h3><p>二级指针做输入</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> arc <span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> arg<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 字符串数组</span><span class="token keyword">int</span> <span class="token function">shouMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">int</span> iLine<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>二级指针做输出</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Demo64_GetTeacher</span><span class="token punctuation">(</span>Teacher<span class="token operator">*</span><span class="token operator">*</span> ppTeacher<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">Demo65_GetTeacher_Free</span><span class="token punctuation">(</span>Teacher<span class="token operator">*</span><span class="token operator">*</span> ppTeacher<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> dataLen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">getData_Free</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">getData_Free2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 避免野指针</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>理解</p><blockquote><p>主调函数还是被调用函数分配内存<br>被调用函数是在heap/stack上分配内存</p></blockquote><h3 id="铁律7：-三级指针输出典型用法"><a href="#铁律7：-三级指针输出典型用法" class="headerlink" title="铁律7： 三级指针输出典型用法"></a>铁律7： 三级指针输出典型用法</h3><p>三级指针做输出</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">getFileAllLine</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> content<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> pLine<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">getFileAllLine_Free</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> content<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> pLine<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>理解</p><blockquote><p>主调函数还是被调用函数分配内存<br>被调用函数是在heap/stack上分配内存</p></blockquote><h3 id="铁律8：杂项，指针用法几点扩充"><a href="#铁律8：杂项，指针用法几点扩充" class="headerlink" title="铁律8：杂项，指针用法几点扩充"></a>铁律8：杂项，指针用法几点扩充</h3><ol><li>野指针 2种 free 形式</li></ol><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> dataLen<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">getData_Free</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">getData_Free2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>2次调用</p><p>主调函数第一次调用被调用函数求长度；根据长度，分配内存，调用被调用函数。</p></li><li><p>返回值char <em>/int/char *</em></p></li><li><p>C程序书写结构</p><p>商业软件，每一个出错的地方都要有日志，日志级别</p></li></ol><h3 id="铁律9：一般应用禁用-malloc-new"><a href="#铁律9：一般应用禁用-malloc-new" class="headerlink" title="铁律9：一般应用禁用 malloc/new"></a>铁律9：一般应用禁用 <code>malloc/new</code></h3>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程相关</title>
      <link href="/2019/09/20/%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3/"/>
      <url>/2019/09/20/%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<ul><li><strong><em>synchronized</em> 关键字对某个对象加锁而不是代码块</strong></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//等同于在方法的代码执行时要synchronized(this)</span>    count<span class="token operator">--</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" count = "</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果是<strong>静态方法</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//这里等同于synchronized(yxxy.c_004.T.class)</span>    count<span class="token operator">--</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" count = "</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>同步和非同步方法是否可以同时调用</strong>。</p><a id="more"></a><p><strong>对业务写方法加锁，对业务读方法不加锁，容易产生脏读问题（dirtyRead）。</strong></p><p>一个同步方法可以调用另外一个同步方法，一个线程已经拥有某个对象的锁，再次申请的时候仍然会得到该对象的锁，也就是说synchronized获得的锁是可重入的（ 这里是继承中有可能发生的情形，子类调用父类的同步方法）。</p><p>程序在执行过程中，如果出现异常，默认情况锁会被释放，所以，在并发处理的过程中，有异常要多加小心，不然可能会发生不一致的情况。比如，在一个web app处理过程中，多个servlet线程共同访问同一个资源，这时如果异常处理不合适，在第一个线程中处理完第一个任务抛出异常，其他线程就会进入同步代码区，有可能会访问到异常产生时的数据。因此要非常小心的处理同步业务逻辑中的异常。</p><ul><li><strong><em>volatile</em> 关键字，使一个变量在多个线程间可见</strong></li></ul><p>A B线程都用到一个变量，java默认是A线程中保留一份copy，这样如果B线程修改了该变量，则A线程未必知道，使用volatile关键字，会让所有线程都会读到变量的修改值。</p><p>在下面的代码中，running是存在于堆内存的t对象中<br>当线程t1开始运行的时候，会把running值从内存中读到t1线程的工作区，在运行过程中直接使用这个copy，并不会每次都去读取堆内存，这样，当主线程修改running的值之后，t1线程感知不到，所以不会停止运行。使用volatile，将会强制所有线程都去堆内存中读取running的值。<br>可以阅读<a href="http://www.cnblogs.com/nexiyi/p/java_memory_model_and_thread.html" target="_blank" rel="noopener">这篇文章</a> 进行更深入的理解</p><p>volatile并不能保证多个线程共同修改running变量时所带来的不一致问题，也就是说volatile不能替代synchronized。synchronized可以保证可见性和原子性，volatile只能保证可见性。</p><p>解决同样的问题的更高效的方法，使用AtomXXX类。AtomXXX类本身方法都是原子性的，<strong>但不能保证多个方法连续调用是原子性的。</strong></p><pre class="line-numbers language-java"><code class="language-java">AtomicInteger count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> count<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//count++</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>锁粒度</strong>：synchronized优化-&gt;同步代码块中的语句越少越好。</p><p>锁定某对象o，如果o的属性发生改变，不影响锁的使用。但是<strong>如果o变成另外一个对象，则锁定的对象发生改变</strong>，应该避免将锁定对象的引用变成另外的对象</p><p><strong>不要以字符串常量对象作为锁定对象（常量池的原因）</strong></p><p><strong>wait会释放锁，而notify不会释放锁</strong></p><blockquote><p>例子：这两个方法都是在锁对象上执行，如锁的wait方法执行，当前有锁的线程就等待（同时释放锁），其它线程将其唤醒后，需要其他线程wait方法执行释放锁，然后它才重新得到锁，继续执行</p><p>可以使用CountDownLatch方法简化，Latch的等待不需要锁定对象的</p></blockquote><p>使用<em>Latch（门闩）</em>替代wait notify来进行通知，好处是通信方式简单，同时也可以指定等待时间。使用await和countdown方法替代wait和notify，CountDownLatch不涉及锁定，当count的值为零时当前线程继续运行。当不涉及同步，只是涉及线程通信的时候，用synchronized + wait/notify就显得太重了，这时应该考虑countdownlatch/cyclicbarrier/semaphore</p><ul><li><strong>reentrantlock 用于替代 synchronized</strong></li></ul><p>reentrantlock 需要注意的是，必须要<strong>必须要必须要手动释放锁</strong></p><p>使用 synchronized 锁定的话如果遇到异常，jvm会自动释放锁，但是<strong>lock必须手动释放锁</strong>，因此经常在finally中进行锁的释放</p><p>使用reentrantlock可以进行“尝试锁定”-&gt; tryLock，这样无法锁定，或者在指定时间内无法锁定，线程可以决定是否继续等待</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">boolean</span> locked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>    locked <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等5秒</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m2 ..."</span> <span class="token operator">+</span> locked<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>locked<span class="token punctuation">)</span> lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 ReentrantLock 还可以调用 lockInterruptibly 方法，可以<strong>对线程interrupt方法做出响应</strong>，在一个线程等待锁的过程中，可以被打断</p><p>ReentrantLock还可以指定为<strong>公平锁</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> ReentrantLock lock<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//参数为true表示为公平锁，有性能损失</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ReentrantLock的Condition的使用</p><p><strong>可以更加精确的指定哪些线程被唤醒</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> Condition producer <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> Condition consumer <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>ThreadLocal线程局部变量</strong></p><ul><li>ThreadLocal是使用空间换时间，synchronized是使用时间换空间</li><li>比如在hibernate中session就存在与ThreadLocal中，避免synchronized的使用</li></ul><p><em>单例内部类方式</em></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"single"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getSingle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Inner<span class="token punctuation">.</span>s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>同步容器类</em></p><p>1：Vector Hashtable ：<strong>早期使用synchronized实现 __<br>2：ArrayList HashSet ：</strong>未考虑多线程安全（未实现同步）__<br>3：HashSet vs Hashtable   StringBuilder vs StringBuffer<br>4：Collections.synchronized***<strong>工厂方法使用的也是synchronized</strong></p><p>使用早期的同步容器以及Collections.synchronized***方法的不足之处，请<a href="http://blog.csdn.net/itm_hadf/article/details/7506529" target="_blank" rel="noopener">阅读</a>：</p><p>使用新的<a href="http://xuganggogo.iteye.com/blog/321630" target="_blank" rel="noopener">并发容器</a></p><ol><li>对于map/set的选择使用</li></ol><ul><li><p>不需要并发</p><ul><li>HashMap</li><li>TreeMap（红黑树）</li><li>LinkedHashMap（保存了记录的插入顺序）</li></ul></li><li><p>需要并发        </p><p>  并发量不高</p></li><li><p>Hashtable（并发量不高）</p><ul><li><p>Collections.sychronizedXXX（不高）</p><p>更高并发</p></li><li><p>ConcurrentHashMap</p></li><li><p>ConcurrentSkipListMap （排序）</p></li></ul></li></ul><ol start="2"><li>队列</li></ol><ul><li>不需要锁<ul><li>ArrayList</li><li>LinkedList</li></ul></li><li>需要锁，并发不高<ul><li>Collections.synchronizedXXX</li><li>CopyOnWriteList（写时复制，写慢，读快，不需要锁也可以保持同步）</li></ul></li><li>需要锁，并发高<br>  Queue<ul><li>CocurrentLinkedQueue （非阻塞式的并发队列，注意没有concurrentArrayQueue）</li><li>BlockingQueue（阻塞式的）<ul><li>LinkedBQ</li><li>ArrayBQ</li><li>TransferQueue（生产者来了一个直接给消费者）</li><li>SynchronusQueue（容量为0，有消费者再给）</li></ul></li><li>DelayQueue执行定时任务</li></ul></li></ul><p>Executor （认识ExecutorService,阅读API文档，认识submit方法，扩展了execute方法，具有一个返回值ExecutorService submit）</p><p>Callable = Runnable（识Callable，对Runnable进行了扩展， 对Callable的调用，可以有返回值）<br>Executors<br>ThreadPool<br>Future（延时汇总）</p><p>fixed（固定个数的）</p><blockquote><p>ExecutorService service = Executors.newFixedThreadPool(5); <em>//execute submit</em></p></blockquote><p> cached（弹性的）</p><blockquote><p>ExecutorService service = Executors.newCachedThreadPool();</p></blockquote><p> single （只有一个）</p><blockquote><p>ExecutorService service = Executors.newSingleThreadExecutor();</p></blockquote><p>scheduled (定时）</p><blockquote><p>ScheduledExecutorService service = Executors.newScheduledThreadPool(4);</p></blockquote><p>workstealing （任务窃取）</p><blockquote><p>ExecutorService service = Executors.newWorkStealingPool();</p></blockquote><p>forkjoin</p><ul><li><em>RecursiveAction</em> 没有返回值</li><li><em>RecursiveTask</em> 有返回值</li></ul><p>ThreadpoolExecutor</p><p>PStreamAPI</p><blockquote><p>nums.parallelStream().forEach(T14_ParallelStreamAPI::isPrime);</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CAS无锁算法</title>
      <link href="/2019/09/18/CAS%E6%97%A0%E9%94%81%E7%AE%97%E6%B3%95/"/>
      <url>/2019/09/18/CAS%E6%97%A0%E9%94%81%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="非阻塞同步算法与CAS-Compare-and-Swap-无锁算法"><a href="#非阻塞同步算法与CAS-Compare-and-Swap-无锁算法" class="headerlink" title="非阻塞同步算法与CAS(Compare and Swap)无锁算法"></a>非阻塞同步算法与CAS(Compare and Swap)无锁算法</h2><h4 id="锁（lock）的代价"><a href="#锁（lock）的代价" class="headerlink" title="锁（lock）的代价"></a>锁（lock）的代价</h4><p>锁是用来做并发最简单的方式，当然其代价也是最高的。内核态的锁的时候需要操作系统进行一次上下文切换，加锁、释放锁会导致比较多的上下文切换和调度延时，等待锁的线程会被挂起直至锁释放。在上下文切换的时候，cpu之前缓存的指令和数据都将失效，对性能有很大的损失。操作系统对多线程的锁进行判断就像两姐妹在为一个玩具在争吵，然后操作系统就是能决定他们谁能拿到玩具的父母，这是很慢的。用户态的锁虽然避免了这些问题，但是其实它们只是在没有真实的竞争时才有效。</p><p>Java在JDK1.5之前都是靠synchronized关键字保证同步的，这种通过使用一致的锁定协议来协调对共享状态的访问，可以确保无论哪个线程持有守护变量的锁，都采用独占的方式来访问这些变量，如果出现多个线程同时访问锁，那第一些线线程将被挂起，当线程恢复执行时，必须等待其它线程执行完他们的时间片以后才能被调度执行，在挂起和恢复执行过程中存在着很大的开销。锁还存在着其它一些缺点，当一个线程正在等待锁时，它不能做任何事。如果一个线程在持有锁的情况下被延迟执行，那么所有需要这个锁的线程都无法执行下去。如果被阻塞的线程优先级高，而持有锁的线程优先级低，将会导致优先级反转(Priority Inversion)。</p><a id="more"></a><h4 id="乐观锁与悲观锁"><a href="#乐观锁与悲观锁" class="headerlink" title="乐观锁与悲观锁"></a>乐观锁与悲观锁</h4><p>独占锁是一种悲观锁，synchronized就是一种独占锁，它假设最坏的情况，并且只有在确保其它线程不会造成干扰的情况下执行，会导致其它所有需要锁的线程挂起，等待持有锁的线程释放锁。而另一个更加有效的锁就是乐观锁。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。</p><h4 id="volatile的问题"><a href="#volatile的问题" class="headerlink" title="volatile的问题"></a>volatile的问题</h4><p>与锁相比，volatile变量是一和更轻量级的同步机制，因为在使用这些变量时不会发生上下文切换和线程调度等操作，但是volatile变量也存在一些局限：不能用于构建原子的复合操作，因此当一个变量依赖旧值时就不能使用volatile变量。（参考：<a href="http://www.cnblogs.com/lucifer1982/archive/2008/03/23/1116981.html" target="_blank" rel="noopener">谈谈volatiile</a>）</p><p><strong>volatile只能保证变量对各个线程的可见性，但不能保证原子性</strong>。为什么？见我的另外一篇文章：《<a href="http://www.cnblogs.com/Mainz/p/3556430.html" target="_blank" rel="noopener">为什么volatile不能保证原子性而Atomic可以？</a>》</p><h4 id="Java中的原子操作-atomic-operations"><a href="#Java中的原子操作-atomic-operations" class="headerlink" title="Java中的原子操作( atomic operations)"></a>Java中的原子操作( atomic operations)</h4><p>原子操作指的是在一步之内就完成而且不能被中断。原子操作在多线程环境中是线程安全的，无需考虑同步的问题。在java中，下列操作是原子操作：</p><ul><li>all assignments of primitive types except for long and double</li><li>all assignments of references</li><li>all operations of java.concurrent.Atomic* classes</li><li>all assignments to volatile longs and doubles</li></ul><p>问题来了，为什么long型赋值不是原子操作呢？例如：</p><pre class="line-numbers language-java"><code class="language-java">`<span class="token keyword">long</span>` `foo <span class="token operator">=</span> 65465498L<span class="token punctuation">;</span>`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实时上java会分两步写入这个long变量，先写32位，再写后32位。这样就线程不安全了。如果改成下面的就线程安全了：</p><pre class="line-numbers language-java"><code class="language-java">`<span class="token keyword">private</span>` `<span class="token keyword">volatile</span>` `<span class="token keyword">long</span>` `foo<span class="token punctuation">;</span>`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为volatile内部已经做了synchronized.</p><h4 id="CAS无锁算法"><a href="#CAS无锁算法" class="headerlink" title="CAS无锁算法"></a>CAS无锁算法</h4><p>要实现无锁（lock-free）的非阻塞算法有多种实现方法，其中<a href="http://en.wikipedia.org/wiki/Compare-and-swap" target="_blank" rel="noopener">CAS（比较与交换，Compare and swap）</a>是一种有名的无锁算法。CAS, CPU指令，在大多数处理器架构，包括IA32、Space中采用的都是CAS指令，CAS的语义是“我认为V的值应该为A，如果是，那么将V的值更新为B，否则不修改并告诉V的值实际为多少”，CAS是项<strong>乐观锁</strong>技术，当多个线程尝试使用CAS同时更新同一个变量时，只有其中一个线程能更新变量的值，而其它线程都失败，失败的线程并不会被挂起，而是被告知这次竞争中失败，并可以再次尝试。CAS有3个操作数，内存值V，旧的预期值A，要修改的新值B。当且仅当预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做。CAS无锁算法的C实现如下：</p><pre class="line-numbers language-java"><code class="language-java">`<span class="token keyword">int</span>` `<span class="token function">compare_and_swap</span> <span class="token punctuation">(</span>``<span class="token keyword">int</span>``<span class="token operator">*</span> reg<span class="token punctuation">,</span> ``<span class="token keyword">int</span>` `oldval<span class="token punctuation">,</span> ``<span class="token keyword">int</span>` `newval<span class="token punctuation">)</span> ``<span class="token punctuation">{</span>``  ``<span class="token function">ATOMIC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>``  ``<span class="token keyword">int</span>` `old_reg_val <span class="token operator">=</span> <span class="token operator">*</span>reg<span class="token punctuation">;</span>``  ``<span class="token keyword">if</span>` `<span class="token punctuation">(</span>old_reg_val <span class="token operator">==</span> oldval<span class="token punctuation">)</span> ``     ``<span class="token operator">*</span>reg <span class="token operator">=</span> newval<span class="token punctuation">;</span>``  ``<span class="token function">END_ATOMIC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>``  ``<span class="token keyword">return</span>` `old_reg_val<span class="token punctuation">;</span>``<span class="token punctuation">}</span>`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="CAS（乐观锁算法）的基本假设前提"><a href="#CAS（乐观锁算法）的基本假设前提" class="headerlink" title="CAS（乐观锁算法）的基本假设前提"></a>CAS（乐观锁算法）的基本假设前提</h4><p>CAS比较与交换的伪代码可以表示为：</p><p>do{<br>       备份旧数据；<br>       基于旧数据构造新数据；<br>}while(!CAS( 内存地址，备份的旧数据，新数据 ))  </p><p><a href="https://images0.cnblogs.com/blog/28306/201402/191145372245230.png" target="_blank" rel="noopener"><img src="https://images0.cnblogs.com/blog/28306/201402/191145387966044.png" alt="ConcurrencyCAS"></a> </p><p>（上图的解释：CPU去更新一个值，但如果想改的值不再是原来的值，操作就失败，因为很明显，有其它操作先改变了这个值。）</p><p>就是指当两者进行比较时，如果相等，则证明共享数据没有被修改，替换成新值，然后继续往下运行；如果不相等，说明共享数据已经被修改，放弃已经所做的操作，然后重新执行刚才的操作。容易看出 CAS 操作是基于共享数据不会被修改的假设，采用了类似于数据库的 commit-retry 的模式。当同步冲突出现的机会很少时，这种假设能带来较大的性能提升。</p><h4 id="CAS的开销（CPU-Cache-Miss-problem）"><a href="#CAS的开销（CPU-Cache-Miss-problem）" class="headerlink" title="CAS的开销（CPU Cache Miss problem）"></a>CAS的开销（CPU Cache Miss problem）</h4><p>前面说过了，CAS（比较并交换）是CPU指令级的操作，只有一步原子操作，所以非常快。而且CAS避免了请求操作系统来裁定锁的问题，不用麻烦操作系统，直接在CPU内部就搞定了。但CAS就没有开销了吗？不！有cache miss的情况。这个问题比较复杂，首先需要了解CPU的硬件体系结构：</p><p><a href="https://images0.cnblogs.com/blog/28306/201402/191145402051274.png" target="_blank" rel="noopener"><img src="https://images0.cnblogs.com/blog/28306/201402/191145414444218.png" alt="2014-02-19_11h35_45"></a></p><p>上图可以看到一个8核CPU计算机系统，每个CPU有cache（CPU内部的高速缓存，寄存器），管芯内还带有一个互联模块，使管芯内的两个核可以互相通信。在图中央的系统互联模块可以让四个管芯相互通信，并且将管芯与主存连接起来。数据以“缓存线”为单位在系统中传输，“缓存线”对应于内存中一个 2 的幂大小的字节块，大小通常为 32 到 256 字节之间。当 CPU 从内存中读取一个变量到它的寄存器中时，必须首先将包含了该变量的缓存线读取到 CPU 高速缓存。同样地，CPU 将寄存器中的一个值存储到内存时，不仅必须将包含了该值的缓存线读到 CPU 高速缓存，还必须确保没有其他 CPU 拥有该缓存线的拷贝。</p><p>比如，如果 CPU0 在对一个变量执行“比较并交换”（CAS）操作，而该变量所在的缓存线在 CPU7 的高速缓存中，就会发生以下经过简化的事件序列：</p><ul><li>CPU0 检查本地高速缓存，没有找到缓存线。</li><li>请求被转发到 CPU0 和 CPU1 的互联模块，检查 CPU1 的本地高速缓存，没有找到缓存线。</li><li>请求被转发到系统互联模块，检查其他三个管芯，得知缓存线被 CPU6和 CPU7 所在的管芯持有。</li><li>请求被转发到 CPU6 和 CPU7 的互联模块，检查这两个 CPU 的高速缓存，在 CPU7 的高速缓存中找到缓存线。</li><li>CPU7 将缓存线发送给所属的互联模块，并且刷新自己高速缓存中的缓存线。</li><li>CPU6 和 CPU7 的互联模块将缓存线发送给系统互联模块。</li><li>系统互联模块将缓存线发送给 CPU0 和 CPU1 的互联模块。</li><li>CPU0 和 CPU1 的互联模块将缓存线发送给 CPU0 的高速缓存。</li><li>CPU0 现在可以对高速缓存中的变量执行 CAS 操作了</li></ul><p>以上是刷新不同CPU缓存的开销。最好情况下的 CAS 操作消耗大概 40 纳秒，超过 60 个时钟周期。这里的“最好情况”是指对某一个变量执行 CAS 操作的 CPU 正好是最后一个操作该变量的CPU，所以对应的缓存线已经在 CPU 的高速缓存中了，类似地，最好情况下的锁操作（一个“round trip 对”包括获取锁和随后的释放锁）消耗超过 60 纳秒，超过 100 个时钟周期。这里的“最好情况”意味着用于表示锁的数据结构已经在获取和释放锁的 CPU 所属的高速缓存中了。锁操作比 CAS 操作更加耗时，是因深入理解并行编程<br>为锁操作的数据结构中需要两个原子操作。缓存未命中消耗大概 140 纳秒，超过 200 个时钟周期。需要在存储新值时查询变量的旧值的 CAS 操作，消耗大概 300 纳秒，超过 500 个时钟周期。想想这个，在执行一次 CAS 操作的时间里，CPU 可以执行 500 条普通指令。这表明了细粒度锁的局限性。</p><p>以下是cache miss cas 和lock的性能对比：</p><p><a href="https://images0.cnblogs.com/blog/28306/201402/191145426722461.png" target="_blank" rel="noopener"><img src="https://images0.cnblogs.com/blog/28306/201402/191145436475092.png" alt="2014-02-19_11h43_23"></a></p><h4 id="JVM对CAS的支持：AtomicInt-AtomicLong-incrementAndGet"><a href="#JVM对CAS的支持：AtomicInt-AtomicLong-incrementAndGet" class="headerlink" title="JVM对CAS的支持：AtomicInt, AtomicLong.incrementAndGet()"></a>JVM对CAS的支持：AtomicInt, AtomicLong.incrementAndGet()</h4><p>在JDK1.5之前，如果不编写明确的代码就无法执行CAS操作，在JDK1.5中引入了底层的支持，在int、long和对象的引用等类型上都公开了CAS的操作，并且JVM把它们编译为底层硬件提供的最有效的方法，在运行CAS的平台上，运行时把它们编译为相应的机器指令，如果处理器/CPU不支持CAS指令，那么JVM将使用自旋锁。因此，值得注意的是，<strong>CAS解决方案与平台/编译器紧密相关（比如x86架构下其对应的汇编指令是lock cmpxchg，如果想要64Bit的交换，则应使用lock cmpxchg8b。在.NET中我们可以使用Interlocked.CompareExchange函数）</strong>。</p><p>在原子类变量中，如java.util.concurrent.atomic中的AtomicXXX，都使用了这些底层的JVM支持为数字类型的引用类型提供一种高效的CAS操作，而在java.util.concurrent中的大多数类在实现时都直接或间接的使用了这些原子变量类。</p><p>AtomicLong.incrementAndGet 的实现用了乐观锁技术，调用了<a href="http://stackoverflow.com/questions/5574241/interesting-uses-of-sun-misc-unsafe" target="_blank" rel="noopener">sun.misc.Unsafe</a>类库里面的 CAS算法，用CPU指令来实现无锁自增。所以，AtomicLong.incrementAndGet的自增比用synchronized的锁效率倍增。</p><pre class="line-numbers language-java"><code class="language-java">`<span class="token keyword">public</span>` `<span class="token keyword">final</span>` `<span class="token keyword">int</span>` `<span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  ``        ``<span class="token keyword">for</span>` `<span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  ``            ``<span class="token keyword">int</span>` `current <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ``            ``<span class="token keyword">int</span>` `next <span class="token operator">=</span> current <span class="token operator">+</span> ``<span class="token number">1</span>``<span class="token punctuation">;</span>  ``            ``<span class="token keyword">if</span>` `<span class="token punctuation">(</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span>  ``                ``<span class="token keyword">return</span>` `current<span class="token punctuation">;</span>  ``        ``<span class="token punctuation">}</span>  ``<span class="token punctuation">}</span>  ``  ` `<span class="token keyword">public</span>` `<span class="token keyword">final</span>` `<span class="token keyword">boolean</span>` `<span class="token function">compareAndSet</span><span class="token punctuation">(</span>``<span class="token keyword">int</span>` `expect<span class="token punctuation">,</span> ``<span class="token keyword">int</span>` `update<span class="token punctuation">)</span> <span class="token punctuation">{</span>  ``    ``<span class="token keyword">return</span>` `unsafe<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span>``<span class="token keyword">this</span>``<span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> expect<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span>  ``<span class="token punctuation">}</span>`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面是测试代码：可以看到用AtomicLong.incrementAndGet的性能比用synchronized高出几倍。</p><p><a href="https://images0.cnblogs.com/blog/28306/201402/121727088765464.png" target="_blank" rel="noopener"><img src="https://images0.cnblogs.com/blog/28306/201402/121727125108810.png" alt="2014-02-12_14h56_39"></a></p><p><a href="https://www.cnblogs.com/Mainz/p/3546347.html#" target="_blank" rel="noopener">+ View Code</a></p><h4 id="CAS的例子：非阻塞堆栈"><a href="#CAS的例子：非阻塞堆栈" class="headerlink" title="CAS的例子：非阻塞堆栈"></a>CAS的例子：非阻塞堆栈</h4><p>下面是比非阻塞自增稍微复杂一点的CAS的例子：非阻塞堆栈/<code>ConcurrentStack</code> 。<code>ConcurrentStack</code> 中的 <code>push()</code> 和 <code>pop()</code> 操作在结构上与<code>NonblockingCounter</code> 上相似，只是做的工作有些冒险，希望在 “提交” 工作的时候，底层假设没有失效。<code>push()</code> 方法观察当前最顶的节点，构建一个新节点放在堆栈上，然后，如果最顶端的节点在初始观察之后没有变化，那么就安装新节点。如果 CAS 失败，意味着另一个线程已经修改了堆栈，那么过程就会重新开始。</p><pre class="line-numbers language-java"><code class="language-java">`<span class="token keyword">public</span>` `<span class="token keyword">class</span>` `ConcurrentStack<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>``    ``AtomicReference<span class="token operator">&lt;</span>Node<span class="token operator">&lt;</span>E<span class="token operator">>></span> head <span class="token operator">=</span> ``<span class="token keyword">new</span>` `AtomicReference<span class="token operator">&lt;</span>Node<span class="token operator">&lt;</span>E<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>``    ``<span class="token keyword">public</span>` `<span class="token keyword">void</span>` `<span class="token function">push</span><span class="token punctuation">(</span>E item<span class="token punctuation">)</span> <span class="token punctuation">{</span>``        ``Node<span class="token operator">&lt;</span>E<span class="token operator">></span> newHead <span class="token operator">=</span> ``<span class="token keyword">new</span>` `Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>``        ``Node<span class="token operator">&lt;</span>E<span class="token operator">></span> oldHead<span class="token punctuation">;</span>``        ``<span class="token keyword">do</span>` `<span class="token punctuation">{</span>``            ``oldHead <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>``            ``newHead<span class="token punctuation">.</span>next <span class="token operator">=</span> oldHead<span class="token punctuation">;</span>``        ``<span class="token punctuation">}</span> ``<span class="token keyword">while</span>` `<span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>oldHead<span class="token punctuation">,</span> newHead<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>``    ``<span class="token punctuation">}</span>``    ``<span class="token keyword">public</span>` `E <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>``        ``Node<span class="token operator">&lt;</span>E<span class="token operator">></span> oldHead<span class="token punctuation">;</span>``        ``Node<span class="token operator">&lt;</span>E<span class="token operator">></span> newHead<span class="token punctuation">;</span>``        ``<span class="token keyword">do</span>` `<span class="token punctuation">{</span>``            ``oldHead <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>``            ``<span class="token keyword">if</span>` `<span class="token punctuation">(</span>oldHead <span class="token operator">==</span> ``null``<span class="token punctuation">)</span> ``                ``<span class="token keyword">return</span>` `null``<span class="token punctuation">;</span>``            ``newHead <span class="token operator">=</span> oldHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>``        ``<span class="token punctuation">}</span> ``<span class="token keyword">while</span>` `<span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>oldHead<span class="token punctuation">,</span>newHead<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>``        ``<span class="token keyword">return</span>` `oldHead<span class="token punctuation">.</span>item<span class="token punctuation">;</span>``    ``<span class="token punctuation">}</span>``    ``<span class="token keyword">static</span>` `<span class="token keyword">class</span>` `Node<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>``        ``<span class="token keyword">final</span>` `E item<span class="token punctuation">;</span>``        ``Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">;</span>``        ``<span class="token keyword">public</span>` `<span class="token function">Node</span><span class="token punctuation">(</span>E item<span class="token punctuation">)</span> <span class="token punctuation">{</span> ``<span class="token keyword">this</span>``<span class="token punctuation">.</span>item <span class="token operator">=</span> item<span class="token punctuation">;</span> <span class="token punctuation">}</span>``    ``<span class="token punctuation">}</span>``<span class="token punctuation">}</span>`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在轻度到中度的争用情况下，非阻塞算法的性能会超越阻塞算法，因为 CAS 的多数时间都在第一次尝试时就成功，而发生争用时的开销也不涉及线程挂起和上下文切换，只多了几个循环迭代。没有争用的 CAS 要比没有争用的锁便宜得多（这句话肯定是真的，因为没有争用的锁涉及 CAS 加上额外的处理），而争用的 CAS 比争用的锁获取涉及更短的延迟。</p><p>在高度争用的情况下（即有多个线程不断争用一个内存位置的时候），基于锁的算法开始提供比非阻塞算法更好的吞吐率，因为当线程阻塞时，它就会停止争用，耐心地等候轮到自己，从而避免了进一步争用。但是，这么高的争用程度并不常见，因为多数时候，线程会把线程本地的计算与争用共享数据的操作分开，从而给其他线程使用共享数据的机会。</p><h4 id="CAS的例子3：非阻塞链表"><a href="#CAS的例子3：非阻塞链表" class="headerlink" title="CAS的例子3：非阻塞链表"></a>CAS的例子3：非阻塞链表</h4><p>以上的示例（自增计数器和堆栈）都是非常简单的非阻塞算法，一旦掌握了在循环中使用 CAS，就可以容易地模仿它们。对于更复杂的数据结构，非阻塞算法要比这些简单示例复杂得多，因为修改链表、树或哈希表可能涉及对多个指针的更新。CAS 支持对单一指针的原子性条件更新，但是不支持两个以上的指针。所以，要构建一个非阻塞的链表、树或哈希表，需要找到一种方式，可以用 CAS 更新多个指针，同时不会让数据结构处于不一致的状态。</p><p>在链表的尾部插入元素，通常涉及对两个指针的更新：“尾” 指针总是指向列表中的最后一个元素，“下一个” 指针从过去的最后一个元素指向新插入的元素。因为需要更新两个指针，所以需要两个 CAS。在独立的 CAS 中更新两个指针带来了两个需要考虑的潜在问题：如果第一个 CAS 成功，而第二个 CAS 失败，会发生什么？如果其他线程在第一个和第二个 CAS 之间企图访问链表，会发生什么？</p><p>对于非复杂数据结构，构建非阻塞算法的 “技巧” 是确保数据结构总处于一致的状态（甚至包括在线程开始修改数据结构和它完成修改之间），还要确保其他线程不仅能够判断出第一个线程已经完成了更新还是处在更新的中途，还能够判断出如果第一个线程走向 AWOL，完成更新还需要什么操作。如果线程发现了处在更新中途的数据结构，它就可以 “帮助” 正在执行更新的线程完成更新，然后再进行自己的操作。当第一个线程回来试图完成自己的更新时，会发现不再需要了，返回即可，因为 CAS 会检测到帮助线程的干预（在这种情况下，是建设性的干预）。</p><p>这种 “帮助邻居” 的要求，对于让数据结构免受单个线程失败的影响，是必需的。如果线程发现数据结构正处在被其他线程更新的中途，然后就等候其他线程完成更新，那么如果其他线程在操作中途失败，这个线程就可能永远等候下去。即使不出现故障，这种方式也会提供糟糕的性能，因为新到达的线程必须放弃处理器，导致上下文切换，或者等到自己的时间片过期（而这更糟）。</p><pre class="line-numbers language-java"><code class="language-java">`<span class="token keyword">public</span>` `<span class="token keyword">class</span>` `LinkedQueue <span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>``    ``<span class="token keyword">private</span>` `<span class="token keyword">static</span>` `<span class="token keyword">class</span>` `Node <span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>``        ``<span class="token keyword">final</span>` `E item<span class="token punctuation">;</span>``        ``<span class="token keyword">final</span>` `AtomicReference<span class="token operator">&lt;</span>Node<span class="token operator">&lt;</span>E<span class="token operator">>></span> next<span class="token punctuation">;</span>``        ``<span class="token function">Node</span><span class="token punctuation">(</span>E item<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>``            ``<span class="token keyword">this</span>``<span class="token punctuation">.</span>item <span class="token operator">=</span> item<span class="token punctuation">;</span>``            ``<span class="token keyword">this</span>``<span class="token punctuation">.</span>next <span class="token operator">=</span> ``<span class="token keyword">new</span>` `AtomicReference<span class="token operator">&lt;</span>Node<span class="token operator">&lt;</span>E<span class="token operator">>></span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>``        ``<span class="token punctuation">}</span>``    ``<span class="token punctuation">}</span>``    ``<span class="token keyword">private</span>` `AtomicReference<span class="token operator">&lt;</span>Node<span class="token operator">&lt;</span>E<span class="token operator">>></span> head``        ``<span class="token operator">=</span> ``<span class="token keyword">new</span>` `AtomicReference<span class="token operator">&lt;</span>Node<span class="token operator">&lt;</span>E<span class="token operator">>></span><span class="token punctuation">(</span>``<span class="token keyword">new</span>` `Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span>``null``<span class="token punctuation">,</span> ``null``<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>``    ``<span class="token keyword">private</span>` `AtomicReference<span class="token operator">&lt;</span>Node<span class="token operator">&lt;</span>E<span class="token operator">>></span> tail <span class="token operator">=</span> head<span class="token punctuation">;</span>``    ``<span class="token keyword">public</span>` `<span class="token keyword">boolean</span>` `<span class="token function">put</span><span class="token punctuation">(</span>E item<span class="token punctuation">)</span> <span class="token punctuation">{</span>``        ``Node<span class="token operator">&lt;</span>E<span class="token operator">></span> newNode <span class="token operator">=</span> ``<span class="token keyword">new</span>` `Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> ``null``<span class="token punctuation">)</span><span class="token punctuation">;</span>``        ``<span class="token keyword">while</span>` `<span class="token punctuation">(</span>``<span class="token boolean">true</span>``<span class="token punctuation">)</span> <span class="token punctuation">{</span>``            ``Node<span class="token operator">&lt;</span>E<span class="token operator">></span> curTail <span class="token operator">=</span> tail<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>``            ``Node<span class="token operator">&lt;</span>E<span class="token operator">></span> residue <span class="token operator">=</span> curTail<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>``            ``<span class="token keyword">if</span>` `<span class="token punctuation">(</span>curTail <span class="token operator">==</span> tail<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>``                ``<span class="token keyword">if</span>` `<span class="token punctuation">(</span>residue <span class="token operator">==</span> ``null``<span class="token punctuation">)</span> ``<span class="token comment" spellcheck="true">/* A */</span>` `<span class="token punctuation">{</span>``                    ``<span class="token keyword">if</span>` `<span class="token punctuation">(</span>curTail<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>``null``<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span><span class="token punctuation">)</span> ``<span class="token comment" spellcheck="true">/* C */</span>` `<span class="token punctuation">{</span>``                        ``tail<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>curTail<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span> ``<span class="token comment" spellcheck="true">/* D */</span>` `<span class="token punctuation">;</span>``                        ``<span class="token keyword">return</span>` `<span class="token boolean">true</span>``<span class="token punctuation">;</span>``                    ``<span class="token punctuation">}</span>``                ``<span class="token punctuation">}</span> ``<span class="token keyword">else</span>` `<span class="token punctuation">{</span>``                    ``tail<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>curTail<span class="token punctuation">,</span> residue<span class="token punctuation">)</span> ``<span class="token comment" spellcheck="true">/* B */</span>``<span class="token punctuation">;</span>``                ``<span class="token punctuation">}</span>``            ``<span class="token punctuation">}</span>``        ``<span class="token punctuation">}</span>``    ``<span class="token punctuation">}</span>``<span class="token punctuation">}</span>`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>具体算法相见<a href="http://www.ibm.com/developerworks/cn/java/j-jtp04186/" target="_blank" rel="noopener">IBM Developerworks</a></p><h4 id="Java的ConcurrentHashMap的实现原理"><a href="#Java的ConcurrentHashMap的实现原理" class="headerlink" title="Java的ConcurrentHashMap的实现原理"></a>Java的ConcurrentHashMap的实现原理</h4><p>Java5中的ConcurrentHashMap，线程安全，设计巧妙，用桶粒度的锁，避免了put和get中对整个map的锁定，尤其在get中，只对一个HashEntry做锁定操作，性能提升是显而易见的。</p><p><a href="https://images0.cnblogs.com/blog/28306/201402/121727157448397.png" target="_blank" rel="noopener"><img src="https://images0.cnblogs.com/blog/28306/201402/121727197879329.png" alt="8aea11a8-4184-3f1f-aba7-169aa5e0797a"></a></p><p>具体实现中使用了锁分离机制，在<a href="http://www.iteye.com/topic/344876" target="_blank" rel="noopener">这个帖子</a>中有非常详细的讨论。<a href="https://www.ibm.com/developerworks/java/library/j-jtp08223/" target="_blank" rel="noopener">这里</a>有关于Java内存模型结合ConcurrentHashMap的分析。以下是JDK6的ConcurrentHashMap的源码：</p><p><a href="https://www.cnblogs.com/Mainz/p/3546347.html#" target="_blank" rel="noopener">+ View Code</a></p><h4 id="Java的ConcurrentLinkedQueue实现方法"><a href="#Java的ConcurrentLinkedQueue实现方法" class="headerlink" title="Java的ConcurrentLinkedQueue实现方法"></a>Java的ConcurrentLinkedQueue实现方法</h4><p><a href="http://docs.oracle.com/javase/1.5.0/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html" target="_blank" rel="noopener">ConcurrentLinkedQueue</a>也是同样使用了CAS指令，但其性能并不高因为<a href="http://www.infoq.com/articles/scalable-java-components/" target="_blank" rel="noopener">太多CAS</a>操作。其源码如下：</p><p><a href="https://www.cnblogs.com/Mainz/p/3546347.html#" target="_blank" rel="noopener">+ View Code</a></p><h4 id="高并发环境下优化锁或无锁（lock-free）的设计思路"><a href="#高并发环境下优化锁或无锁（lock-free）的设计思路" class="headerlink" title="高并发环境下优化锁或无锁（lock-free）的设计思路"></a>高并发环境下优化锁或无锁（lock-free）的设计思路</h4><p>服务端编程的3大性能杀手：1、大量线程导致的线程切换开销。2、锁。3、非必要的内存拷贝。在高并发下,对于纯内存操作来说,单线程是要比多线程快的, 可以比较一下多线程程序在压力测试下cpu的sy和ni百分比。高并发环境下要实现高吞吐量和线程安全，两个思路：一个是用优化的锁实现，一个是lock-free的无锁结构。但非阻塞算法要比基于锁的算法复杂得多。开发非阻塞算法是相当专业的训练，而且要证明算法的正确也极为困难，不仅和具体的目标机器平台和编译器相关，而且需要复杂的技巧和严格的测试。虽然Lock-Free编程非常困难，但是它通常可以带来比基于锁编程更高的吞吐量。所以Lock-Free编程是大有前途的技术。它在线程中止、优先级倒置以及信号安全等方面都有着良好的表现。</p><ul><li><strong>优化锁实现的例子</strong>：Java中的<a href="http://www.docjar.com/html/api/java/util/concurrent/ConcurrentHashMap.java.html" target="_blank" rel="noopener">ConcurrentHashMap</a>，设计巧妙，用桶粒度的锁和锁分离机制，避免了put和get中对整个map的锁定，尤其在get中，只对一个HashEntry做锁定操作，性能提升是显而易见的（详细分析见《<a href="http://www.ibm.com/developerworks/cn/java/java-lo-concurrenthashmap/" target="_blank" rel="noopener">探索 ConcurrentHashMap 高并发性的实现机制</a>》）。</li><li><strong>Lock-free无锁的例子</strong>：CAS（CPU的Compare-And-Swap指令）的利用和LMAX的<a href="http://lmax-exchange.github.io/disruptor/" target="_blank" rel="noopener">disruptor</a>无锁消息队列数据结构等。有兴趣了解LMAX的<a href="http://lmax-exchange.github.io/disruptor/" target="_blank" rel="noopener">disruptor</a>无锁消息队列数据结构的可以移步<a href="http://www.slideshare.net/guynir/the-edge-2012-disruptor-guy-raz-nir-published" target="_blank" rel="noopener">slideshare</a>。</li></ul><p><a href="http://lmax-exchange.github.io/disruptor/" target="_blank" rel="noopener">disruptor</a>无锁消息队列数据结构的类图和<a href="http://disruptor.googlecode.com/files/Disruptor-1.0.pdf" target="_blank" rel="noopener">技术文档下载</a></p><p><a href="https://images0.cnblogs.com/blog/28306/201402/121727220603460.png" target="_blank" rel="noopener"><img src="https://images0.cnblogs.com/blog/28306/201402/121727239741075.png" alt="2014-02-12_16h55_36"></a></p><p>另外，在设计思路上除了尽量减少资源争用以外，还可以借鉴<a href="http://javasogo.iteye.com/blog/1060114" target="_blank" rel="noopener">nginx/node.js</a>等单线程大循环的机制，用单线程或CPU数相同的线程开辟大的队列，并发的时候任务压入队列，线程轮询然后一个个顺序执行。由于每个都采用异步I/O，没有阻塞线程。这个大队列可以使用RabbitMQueue，或是JDK的同步队列（性能稍差），或是使用<a href="http://lmax-exchange.github.io/disruptor/" target="_blank" rel="noopener">Disruptor无锁队列</a>(Java)。任务处理可以全部放在内存（多级缓存、读写分离、ConcurrentHashMap、甚至分布式缓存Redis）中进行增删改查。最后用Quarz维护定时把缓存数据同步到DB中。当然，这只是中小型系统的思路，如果是大型分布式系统会非常复杂，需要分而治理，用SOA的思路，参考<a href="http://www.iteye.com/topic/1128561" target="_blank" rel="noopener">这篇文章的图</a>。（注：Redis是单线程的纯内存数据库，单线程无需锁，而Memcache是多线程的带CAS算法，两者都使用epoll，no-blocking io）</p><p><a href="https://images0.cnblogs.com/blog/28306/201402/121727267405520.png" target="_blank" rel="noopener"><img src="https://images0.cnblogs.com/blog/28306/201402/121727294975265.png" alt="png;base643f17317a5d7e7fe9"></a></p><h4 id="深入JVM的OS的无锁非阻塞算法"><a href="#深入JVM的OS的无锁非阻塞算法" class="headerlink" title="深入JVM的OS的无锁非阻塞算法"></a>深入JVM的OS的无锁非阻塞算法</h4><p>如果深入 JVM 和操作系统，会发现非阻塞算法无处不在。<strong>垃圾收集器</strong>使用非阻塞算法加快并发和平行的垃圾搜集；<strong>调度器</strong>使用非阻塞算法有效地调度线程和进程，实现内在锁。在 Mustang（Java 6.0）中，基于锁的 <code>SynchronousQueue</code> 算法被新的非阻塞版本代替。很少有开发人员会直接使用 <code>SynchronousQueue</code>，但是通过 <code>Executors.newCachedThreadPool()</code> 工厂构建的线程池用它作为工作队列。比较缓存线程池性能的对比测试显示，<strong>新的非阻塞同步队列</strong>实现提供了几乎是当前实现 3 倍的速度。在 Mustang 的后续版本（代码名称为 Dolphin）中，已经规划了进一步的改进。</p>]]></content>
      
      
      <categories>
          
          <category> 底层 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Copy-On-Write容器</title>
      <link href="/2019/09/18/Copy-On-Write%E5%AE%B9%E5%99%A8/"/>
      <url>/2019/09/18/Copy-On-Write%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>Copy-On-Write简称COW，是一种用于程序设计中的优化策略。其基本思路是，从一开始大家都在共享同一个内容，当某个人想要修改这个内容的时候，才会真正把内容Copy出去形成一个新的内容然后再改，这是一种延时懒惰策略。从JDK1.5开始Java并发包里提供了两个使用CopyOnWrite机制实现的并发容器,它们是CopyOnWriteArrayList和CopyOnWriteArraySet。CopyOnWrite容器非常有用，可以在非常多的并发场景中使用到。</p><a id="more"></a><h4 id="什么是CopyOnWrite容器"><a href="#什么是CopyOnWrite容器" class="headerlink" title="什么是CopyOnWrite容器"></a>什么是CopyOnWrite容器</h4><p>CopyOnWrite容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。这样做的好处是我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。</p><h4 id="CopyOnWriteArrayList的实现原理"><a href="#CopyOnWriteArrayList的实现原理" class="headerlink" title="CopyOnWriteArrayList的实现原理"></a>CopyOnWriteArrayList的实现原理</h4><p>在使用CopyOnWriteArrayList之前，我们先阅读其源码了解下它是如何实现的。以下代码是向ArrayList里添加元素，可以发现在添加的时候是需要加锁的，否则多线程写的时候会Copy出N个副本出来。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>T e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 复制出新数组</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> newElements <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 把新元素添加到新数组里</span>        newElements<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 把原数组引用指向新数组</span>        <span class="token function">setArray</span><span class="token punctuation">(</span>newElements<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setArray</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    array <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>读的时候不需要加锁，如果读的时候有多个线程正在向ArrayList添加数据，读还是会读到旧的数据，因为写的时候不会锁住旧的ArrayList。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>JDK中并没有提供CopyOnWriteMap，我们可以参考CopyOnWriteArrayList来实现一个，基本代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CopyOnWriteMap</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span><span class="token punctuation">,</span> Cloneable <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> Map<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> internalMap<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CopyOnWriteMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        internalMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Map<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> newMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span><span class="token punctuation">(</span>internalMap<span class="token punctuation">)</span><span class="token punctuation">;</span>            V val <span class="token operator">=</span> newMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            internalMap <span class="token operator">=</span> newMap<span class="token punctuation">;</span>            <span class="token keyword">return</span> val<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> V <span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> internalMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">putAll</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token operator">></span> newData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Map<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> newMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span><span class="token punctuation">(</span>internalMap<span class="token punctuation">)</span><span class="token punctuation">;</span>            newMap<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>newData<span class="token punctuation">)</span><span class="token punctuation">;</span>            internalMap <span class="token operator">=</span> newMap<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现很简单，只要了解了CopyOnWrite机制，我们可以实现各种CopyOnWrite容器，并且在不同的应用场景中使用。</p><h4 id="CopyOnWrite的应用场景"><a href="#CopyOnWrite的应用场景" class="headerlink" title="CopyOnWrite的应用场景"></a>CopyOnWrite的应用场景</h4><p>CopyOnWrite并发容器用于读多写少的并发场景。比如白名单，黑名单，商品类目的访问和更新场景，假如我们有一个搜索网站，用户在这个网站的搜索框中，输入关键字搜索内容，但是某些关键字不允许被搜索。这些不能被搜索的关键字会被放在一个黑名单当中，黑名单每天晚上更新一次。当用户搜索时，会检查当前关键字在不在黑名单当中，如果在，则提示不能搜索。实现代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ifeve<span class="token punctuation">.</span>book<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ifeve<span class="token punctuation">.</span>book<span class="token punctuation">.</span>forkjoin<span class="token punctuation">.</span>CopyOnWriteMap<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 黑名单服务 * * @author fangtengfei * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlackListServiceImpl</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> CopyOnWriteMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Boolean<span class="token operator">></span> blackListMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Boolean<span class="token operator">></span><span class="token punctuation">(</span>            <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isBlackList</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> blackListMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addBlackList</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        blackListMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 批量添加黑名单     *     * @param ids     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addBlackList</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Boolean<span class="token operator">></span> ids<span class="token punctuation">)</span> <span class="token punctuation">{</span>        blackListMap<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码很简单，但是使用CopyOnWriteMap需要注意两件事情：</p><p>\1. 减少扩容开销。根据实际需要，初始化CopyOnWriteMap的大小，避免写时CopyOnWriteMap扩容的开销。</p><p>\2. 使用批量添加。因为每次添加，容器每次都会进行复制，所以减少添加次数，可以减少容器的复制次数。如使用上面代码里的addBlackList方法。</p><h4 id="CopyOnWrite的缺点"><a href="#CopyOnWrite的缺点" class="headerlink" title="CopyOnWrite的缺点"></a>CopyOnWrite的缺点</h4><p>CopyOnWrite容器有很多优点，但是同时也存在两个问题，即内存占用问题和数据一致性问题。所以在开发的时候需要注意一下。</p><p><strong>内存占用问题</strong>。因为CopyOnWrite的写时复制机制，所以在进行写操作的时候，内存里会同时驻扎两个对象的内存，旧的对象和新写入的对象（注意:在复制的时候只是复制容器里的引用，只是在写的时候会创建新对象添加到新容器里，而旧容器的对象还在使用，所以有两份对象内存）。如果这些对象占用的内存比较大，比如说200M左右，那么再写入100M数据进去，内存就会占用300M，那么这个时候很有可能造成频繁的Yong GC和Full GC。之前我们系统中使用了一个服务由于每晚使用CopyOnWrite机制更新大对象，造成了每晚15秒的Full GC，应用响应时间也随之变长。</p><p>针对内存占用问题，可以通过压缩容器中的元素的方法来减少大对象的内存消耗，比如，如果元素全是10进制的数字，可以考虑把它压缩成36进制或64进制。或者不使用CopyOnWrite容器，而使用其他的并发容器，如<a href="http://ifeve.com/concurrenthashmap/" target="_blank" rel="noopener">ConcurrentHashMap</a>。</p><p><strong>数据一致性问题</strong>。CopyOnWrite容器只能保证数据的最终一致性，不能保证数据的实时一致性。所以如果你希望写入的的数据，马上能读到，请不要使用CopyOnWrite容器。</p><p>关于C++的STL中，曾经也有过Copy-On-Write的玩法，参见陈皓的《<a href="http://blog.csdn.net/haoel/article/details/24058" target="_blank" rel="noopener">C++ STL String类中的Copy-On-Write</a>》，后来，因为有很多线程安全上的事，就被去掉了。</p>]]></content>
      
      
      <categories>
          
          <category> 底层 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跳表（SkipList）</title>
      <link href="/2019/09/18/%E8%B7%B3%E8%A1%A8%EF%BC%88SkipList%EF%BC%89/"/>
      <url>/2019/09/18/%E8%B7%B3%E8%A1%A8%EF%BC%88SkipList%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="二分查找和AVL树查找"><a href="#二分查找和AVL树查找" class="headerlink" title="二分查找和AVL树查找"></a>二分查找和AVL树查找</h2><p>二分查找要求元素可以随机访问，所以决定了需要把元素存储在连续内存。这样查找确实很快，但是插入和删除元素的时候，为了保证元素的有序性，就需要大量的移动元素了。<br>如果需要的是一个能够进行<font color=red>二分查找</font>，又能<font color=red>快速添加和删除元素</font>的数据结构，首先就是二叉查找树，二叉查找树在最坏情况下可能变成一个链表。<br>于是，就出现了平衡二叉树，根据平衡算法的不同有AVL树，B-Tree，B+Tree，红黑树等，但是AVL树实现起来比较复杂，平衡操作较难理解，这时候就可以用SkipList跳跃表结构。</p><h2 id="什么是跳表"><a href="#什么是跳表" class="headerlink" title="什么是跳表"></a>什么是跳表</h2><p>传统意义的单链表是一个线性结构，向有序的链表中插入一个节点需要O(n)的时间，查找操作需要O(n)的时间。</p><a id="more"></a><p>跳跃表的简单示例：</p><p><img src="https://github.com/MajorTee/markdp/raw/master/Markdown%20Photos/tiaobiaoshili.jpg" alt="img"></p><p>如果我们使用上图所示的跳跃表，就可以减少查找所需时间为O(n/2)，因为我们可以先通过每个节点的最上面的指针先进行查找，这样子就能跳过一半的节点。</p><p>比如我们想查找19，首先和6比较，大于6之后，在和9进行比较，然后在和12进行比较……最后比较到21的时候，发现21大于19，说明查找的点在17和21之间，从这个过程中，我们可以看出，查找的时候跳过了3、7、12等点，因此查找的复杂度为O(n/2)。</p><p>查找的过程如下图：</p><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown%20Photos/chazhaoguocheng.jpg" alt="img"></p><p>其实，上面基本上就是跳跃表的思想，每一个结点不单单只包含指向下一个结点的指针，可能包含很多个指向后续结点的指针，这样就可以跳过一些不必要的结点，从而加快查找、删除等操作。对于一个链表内每一个结点包含多少个指向后续元素的指针，后续节点个数是通过一个随机函数生成器得到，这样子就构成了一个跳跃表。</p><p>随机生成的跳跃表可能如下图所示：</p><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown%20Photos/suijitiaobiao.jpg" alt="img"></p><p>跳跃表其实也是一种通过“<font color=red>空间来换取时间</font>”的一个算法，通过在每个节点中增加了向前的指针，从而提升查找的效率。</p><p>“Skip lists are data structures  that use probabilistic  balancing rather  than  strictly  enforced balancing. As a result, the algorithms  for insertion  and deletion in skip lists  are much simpler and significantly  faster  than  equivalent  algorithms  for balanced trees.  ”</p><blockquote><p>译文：跳跃表使用<font color=red>概率均衡技术</font>而不是使用强制性均衡技术，<font color=red>因此，对于插入和删除结点比传统上的平衡树算法更为简洁高效</font>。 </p></blockquote><p>跳表是一种随机化的数据结构，目前开源软件 Redis 和 LevelDB 都有用到它。</p><h2 id="SkipList的操作"><a href="#SkipList的操作" class="headerlink" title="SkipList的操作"></a>SkipList的操作</h2><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>查找就是给定一个key，查找这个key是否出现在跳跃表中，如果出现，则返回其值，如果不存在，则返回不存在。我们结合一个图就是讲解查找操作，如下图所示：</p><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown%20Photos/chazhao1.jpg" alt="img"></p><p>如果我们想查找19是否存在？如何查找呢？我们从头结点开始，首先和9进行判断，此时大于9，然后和21进行判断，小于21，此时这个值肯定在9结点和21结点之间，此时，我们和17进行判断，大于17，然后和21进行判断，小于21，此时肯定在17结点和21结点之间，此时和19进行判断，找到了。具体的示意图如图所示：</p><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown%20Photos/chazhao2" alt="img"></p><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>插入包含如下几个操作：1、查找到需要插入的位置   2、申请新的结点    3、调整指针。<br>我们结合下图进行讲解，查找路径如下图的灰色的线所示  申请新的结点如17结点所示， 调整指向新结点17的指针以及17结点指向后续结点的指针。这里有一个小技巧，就是使用update数组保存大于17结点的位置，update数组的内容如红线所示，这些位置才是有可能更新指针的位置。</p><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown%20Photos/charu.png" alt="img"></p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除操作类似于插入操作，包含如下3步：</p><ol><li>查找到需要删除的结点 </li><li>删除结点</li><li>调整指针</li></ol><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown%20Photos/delete.png" alt="img"></p><p><strong>Key-Value数据结构</strong><br>目前常用的key-value数据结构有三种：Hash表、红黑树、SkipList，它们各自有着不同的优缺点（不考虑删除操作）：<br>Hash表：插入、查找最快，为O(1)；如使用链表实现则可实现无锁；数据有序化需要显式的排序操作。<br>红黑树：插入、查找为O(logn)，但常数项较小；无锁实现的复杂性很高，一般需要加锁；数据天然有序。<br>SkipList：插入、查找为O(logn)，但常数项比红黑树要大；底层结构为链表，可无锁实现；数据天然有序。</p><p>如果要实现一个key-value结构，需求的功能有插入、查找、迭代、修改，那么首先Hash表就不是很适合了，因为迭代的时间复杂度比较高；而红黑树的插入很可能会涉及多个结点的旋转、变色操作，因此需要在外层加锁，这无形中降低了它可能的并发度。而SkipList底层是用链表实现的，可以实现为lock free，同时它还有着不错的性能（单线程下只比红黑树略慢），非常适合用来实现我们需求的那种key-value结构。<br>LevelDB、Reddis的底层存储结构就是用的SkipList。</p><h2 id="基于锁的并发"><a href="#基于锁的并发" class="headerlink" title="基于锁的并发"></a>基于锁的并发</h2><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ol><li>编程模型简单，如果小心控制上锁顺序，一般来说不会有死锁的问题；</li><li>可以通过调节锁的粒度来调节性能。<h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3></li><li>所有基于锁的算法都有死锁的可能；</li><li>上锁和解锁时进程要从用户态切换到内核态，并可能伴随有线程的调度、上下文切换等，开销比较重；</li><li>对共享数据的读与写之间会有互斥。<h2 id="无锁编程（lock-free）"><a href="#无锁编程（lock-free）" class="headerlink" title="无锁编程（lock free）"></a>无锁编程（lock free）</h2>常见的lock free编程一般是基于CAS(Compare And Swap)操作：CAS(void <em>ptr, Any oldValue, Any newValue);<br>即查看内存地址ptr处的值，如果为oldValue则将其改为newValue，并返回true，否则返回false。X86平台上的CAS操作一般是通过CPU的CMPXCHG指令来完成的。CPU在执行此指令时会首先锁住CPU总线，禁止其它核心对内存的访问，然后再查看或修改</em>ptr的值。简单的说CAS利用了CPU的硬件锁来实现对共享资源的串行使用。<h3 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h3></li><li>开销较小：不需要进入内核，不需要切换线程；</li><li>没有死锁：总线锁最长持续为一次read+write的时间；</li><li>只有写操作需要使用CAS，读操作与串行代码完全相同，可实现读写不互斥。<h3 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h3></li><li>编程非常复杂，两行代码之间可能发生任何事，很多常识性的假设都不成立。</li><li>CAS模型覆盖的情况非常少，无法用CAS实现原子的复数操作。</li></ol><p>而在性能层面上，CAS与mutex/readwrite lock各有千秋，简述如下：</p><ol><li>单线程下CAS的开销大约为10次加法操作，mutex的上锁+解锁大约为20次加法操作，而readwrite lock的开销则更大一些。</li><li>CAS的性能为固定值，而mutex则可以通过改变临界区的大小来调节性能；</li><li>如果临界区中真正的修改操作只占一小部分，那么用CAS可以获得更大的并发度。</li><li>多核CPU中线程调度成本较高，此时更适合用CAS。<br>跳表和红黑树的性能相当，最主要的优势就是当调整(插入或删除)时，红黑树需要使用旋转来维护平衡性，这个操作需要动多个节点，在并发时候很难控制。而跳表插入或删除时只需定位后插入，插入时只需添加插入的那个节点及其多个层的复制，以及定位和插入的原子性维护。所以它更加可以利用CAS操作来进行无锁编程。</li></ol><h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><p>JDK为我们提供了很多Map接口的实现，使得我们可以方便地处理Key-Value的数据结构。</p><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown%20Photos/ConcurrentHashMap.jpg" alt="img"></p><p>当我们希望快速存取&lt;Key, Value&gt;键值对时我们可以使用HashMap。<br>当我们希望在多线程并发存取&lt;Key, Value&gt;键值对时，我们会选择ConcurrentHashMap。<br>TreeMap则会帮助我们保证数据是按照Key的自然顺序或者compareTo方法指定的排序规则进行排序。<br><strong>OK，那么当我们需要多线程并发存取&lt;Key, Value&gt;数据并且希望保证数据有序时，我们需要怎么做呢？</strong><br>也许，我们可以选择ConcurrentTreeMap。不好意思，JDK没有提供这么好的数据结构给我们。<br>当然，我们可以自己添加lock来实现ConcurrentTreeMap，但是随着并发量的提升，lock带来的性能开销也随之增大。<br>Don’t cry……，JDK6里面引入的ConcurrentSkipListMap也许可以满足我们的需求。</p><p><strong>什么是ConcurrentSkipListMap</strong><br>ConcurrentSkipListMap提供了一种线程安全的并发访问的排序映射表。内部是SkipList（跳表）结构实现，在理论上能够O(log(n))时间内完成查找、插入、删除操作。<br><strong>存储结构</strong><br>ConcurrentSkipListMap存储结构跳跃表（SkipList）：<br>1、最底层的<font color=red>数据节点</font>按照关键字升序排列。<br>2、包含多级索引，每个级别的<font color=red>索引节点</font>按照其<strong>关联数据节点</strong>的关键字升序排列。<br>3、高级别索引是其低级别索引的子集。<br>4、如果关键字key在级别level=i的索引中出现，则级别level&lt;=i的所有索引中都包含key。<br><font color=purple>注：类比一下数据库的索引、B+树。</font></p><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown%20Photos/cunchujiegou.png" alt="img"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcurrentSkipListMap</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMap</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">ConcurrentNavigableMap</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">,</span>               Cloneable<span class="token punctuation">,</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/**  Special value used to identify base-level header*/</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object BASE_HEADER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//该值用于标记数据节点的头结点</span>    <span class="token comment" spellcheck="true">/** The topmost head index of the skiplist.*/</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> HeadIndex<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最高级别索引的索引头</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/** Nodes hold keys and values, and are singly linked in sorted order, possibly with some intervening marker nodes.      The list is headed by a dummy node accessible as head.node. The value field is declared only as Object because it      takes special non-V values for marker and header nodes. */</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//保存键值对的数据节点，并且是有序的单链表。</span>        <span class="token keyword">final</span> K key<span class="token punctuation">;</span>        <span class="token keyword">volatile</span> Object value<span class="token punctuation">;</span>        <span class="token keyword">volatile</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//后继数据节点</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/** Index nodes represent the levels of the skip list.         Note that even though both Nodes and Indexes have forward-pointing fields, they have different types and are handled         in different ways, that can't nicely be captured by placing field in a shared abstract class.     */</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Index</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//索引节点</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> node<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//索引节点关联的数据节点</span>        <span class="token keyword">final</span> Index<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> down<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//下一级别索引节点（关联的数据节点相同）</span>        <span class="token keyword">volatile</span> Index<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> right<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前索引级别中，后继索引节点</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**  Nodes heading each level keep track of their level.*/</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">HeadIndex</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Index</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//索引头</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> level<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//索引级别</span>        <span class="token function">HeadIndex</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> node<span class="token punctuation">,</span> Index<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> down<span class="token punctuation">,</span> Index<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> level<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> down<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>level <span class="token operator">=</span> level<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>查找</strong></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.</span>    <span class="token keyword">public</span> V <span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">doGet</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> V <span class="token function">doGet</span><span class="token punctuation">(</span>Object okey<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Comparable<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> K<span class="token operator">></span> key <span class="token operator">=</span> <span class="token function">comparable</span><span class="token punctuation">(</span>okey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Loop needed here and elsewhere in case value field goes null just as it is about to be returned, in which case we</span>        <span class="token comment" spellcheck="true">// lost a race with a deletion, so must retry.</span>        <span class="token comment" spellcheck="true">// 这里采用循环的方式来查找数据节点，是为了防止返回刚好被删除的数据节点，一旦出现这样的情况，需要重试。</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> n <span class="token operator">=</span> <span class="token function">findNode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根据key查找数据节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            Object v <span class="token operator">=</span> n<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">!=</span> null<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>V<span class="token punctuation">)</span>v<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**Returns node holding key or null if no such, clearing out any deleted nodes seen along the way.         Repeatedly traverses at base-level looking for key starting at predecessor returned from findPredecessor,        processing base-level deletions as encountered. Some callers rely on this side-effect of clearing deleted nodes.     * Restarts occur, at traversal step centered on node n, if:     *     *   (1) After reading n's next field, n is no longer assumed predecessor b's current successor, which means that     *       we don't have a consistent 3-node snapshot and so cannot unlink any subsequent deleted nodes encountered.     *     *   (2) n's value field is null, indicating n is deleted, in which case we help out an ongoing structural deletion     *       before retrying.  Even though there are cases where such  unlinking doesn't require restart, they aren't sorted out     *       here because doing so would not usually outweigh cost of  restarting.     *     *   (3) n is a marker or n's predecessor's value field is null, indicating (among other possibilities) that     *       findPredecessor returned a deleted node. We can't unlink the node because we don't know its predecessor, so rely     *       on another call to findPredecessor to notice and return some earlier predecessor, which it will do. This check is     *       only strictly needed at beginning of loop, (and the b.value check isn't strictly needed at all) but is done     *       each iteration to help avoid contention with other threads by callers that will fail to be able to change     *       links, and so will retry anyway.     *     * The traversal loops in doPut, doRemove, and findNear all include the same three kinds of checks. And specialized     * versions appear in findFirst, and findLast and their variants. They can't easily share code because each uses the     * reads of fields held in locals occurring in the orders they were performed.     *     * @param key the key     * @return node holding key, or null if no such     */</span><span class="token keyword">private</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">findNode</span><span class="token punctuation">(</span>Comparable<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> K<span class="token operator">></span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> b <span class="token operator">=</span> <span class="token function">findPredecessor</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根据key查找前驱数据节点</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> n <span class="token operator">=</span> b<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> f <span class="token operator">=</span> n<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//1、b的后继节点两次读取不一致，重试</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> b<span class="token punctuation">.</span>next<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// inconsistent read </span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            Object v <span class="token operator">=</span> n<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2、数据节点的值为null，表示该数据节点标记为已删除，移除该数据节点并重试。</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// n is deleted</span>                n<span class="token punctuation">.</span><span class="token function">helpDelete</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//3、b节点被标记为删除，重试</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> n <span class="token operator">||</span> b<span class="token punctuation">.</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// b is deleted</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//找到返回</span>                <span class="token keyword">return</span> n<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//给定key小于当前可以，不存在</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            b <span class="token operator">=</span> n<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//否则继续查找</span>            n <span class="token operator">=</span> f<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**Returns a base-level node with key strictly less than given key, or the base-level header if there is no such node.         Also unlinks indexes to deleted nodes found along the way.  Callers rely on this side-effect of clearing indices to deleted nodes.     * @param key the key      * @return a predecessor of key     */</span>    <span class="token comment" spellcheck="true">//返回“小于且最接近给定key”的数据节点，如果不存在这样的数据节点就返回最低级别的索引头。</span>    <span class="token keyword">private</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">findPredecessor</span><span class="token punctuation">(</span>Comparable<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> K<span class="token operator">></span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// don't postpone errors</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Index<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> q <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从顶层索引开始查找</span>            Index<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> r <span class="token operator">=</span> q<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> n <span class="token operator">=</span> r<span class="token punctuation">.</span>node<span class="token punctuation">;</span>                    K k <span class="token operator">=</span> n<span class="token punctuation">.</span>key<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token punctuation">.</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//数据节点的值为null,表示该数据节点标记为已删除，断开连接并重试</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">unlink</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// restart</span>                        r <span class="token operator">=</span> q<span class="token punctuation">.</span>right<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// reread r</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//给定key大于当前key，继续往右查找</span>                        q <span class="token operator">=</span> r<span class="token punctuation">;</span>                        r <span class="token operator">=</span> r<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//执行到这里有两种情况：</span>                <span class="token comment" spellcheck="true">//1、当前级别的索引查找结束</span>                <span class="token comment" spellcheck="true">//2、给定key小于等于当前key</span>                Index<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> d <span class="token operator">=</span> q<span class="token punctuation">.</span>down<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在下一级别索引中查找</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果还存在更低级别的索引，在更低级别的索引中继续查找</span>                    q <span class="token operator">=</span> d<span class="token punctuation">;</span>                    r <span class="token operator">=</span> d<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span>                    <span class="token keyword">return</span> q<span class="token punctuation">.</span>node<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果当前已经是最低级别的索引，当前索引节点关联的数据节点即为所求</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>插入</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Associates the specified value with the specified key in this map. * If the map previously contained a mapping for the key, the old value is replaced. * * @param key key with which the specified value is to be associated * @param value value to be associated with the specified key * @return the previous value associated with the specified key, or *         &lt;tt>null&lt;/tt> if there was no mapping for the key * @throws ClassCastException if the specified key cannot be compared *         with the keys currently in the map * @throws NullPointerException if the specified key or value is null */</span><span class="token keyword">public</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">doPut</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Main insertion method.  Adds element if not present, or replaces value if present and onlyIfAbsent is false. * @param kkey the key * @param value  the value that must be associated with key * @param onlyIfAbsent if should not insert if already present * @return the old value, or null if newly inserted */</span><span class="token keyword">private</span> V <span class="token function">doPut</span><span class="token punctuation">(</span>K kkey<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Comparable<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> K<span class="token operator">></span> key <span class="token operator">=</span> <span class="token function">comparable</span><span class="token punctuation">(</span>kkey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> b <span class="token operator">=</span> <span class="token function">findPredecessor</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查找前驱数据节点</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> n <span class="token operator">=</span> b<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> f <span class="token operator">=</span> n<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//1、b的后继两次读取不一致，重试</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> b<span class="token punctuation">.</span>next<span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">// inconsistent read</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                Object v <span class="token operator">=</span> n<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//2、数据节点的值为null,表示该数据节点标记为已删除，移除该数据节点并重试。</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// n is deleted</span>                    n<span class="token punctuation">.</span><span class="token function">helpDelete</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//3、b节点被标记为已删除，重试</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> n <span class="token operator">||</span> b<span class="token punctuation">.</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// b is deleted</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> c <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//给定key大于当前可以，继续寻找合适的插入点</span>                    b <span class="token operator">=</span> n<span class="token punctuation">;</span>                    n <span class="token operator">=</span> f<span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//找到</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>onlyIfAbsent <span class="token operator">||</span> n<span class="token punctuation">.</span><span class="token function">casValue</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span> <span class="token punctuation">(</span>V<span class="token punctuation">)</span>v<span class="token punctuation">;</span>                    <span class="token keyword">else</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// restart if lost race to replace value</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// else c &lt; 0; fall through</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//没有找到，新建数据节点</span>            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> z <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>kkey<span class="token punctuation">,</span> value<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">.</span><span class="token function">casNext</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// restart if lost race to append to b</span>            <span class="token keyword">int</span> level <span class="token operator">=</span> <span class="token function">randomLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//随机的索引级别</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>level <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">insertIndex</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Creates and adds index nodes for the given node. * @param z the node * @param level the level of the index */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">insertIndex</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> z<span class="token punctuation">,</span> <span class="token keyword">int</span> level<span class="token punctuation">)</span> <span class="token punctuation">{</span>    HeadIndex<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> h <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> h<span class="token punctuation">.</span>level<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>level <span class="token operator">&lt;=</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//索引级别已经存在，在当前索引级别以及底层索引级别上都添加该节点的索引</span>        Index<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> idx <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> level<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//首先得到一个包含1~level个索引级别的down关系的链表，最后的inx为最高level索引 </span>            idx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Index</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addIndex</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> h<span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Adds given index nodes from given level down to 1.新增索引</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Add a new level 新增索引级别</span>        <span class="token comment" spellcheck="true">/* To reduce interference by other threads checking for empty levels in tryReduceLevel, new levels are added         * with initialized right pointers. Which in turn requires keeping levels in an array to access them while         * creating new head index nodes from the opposite direction. */</span>        level <span class="token operator">=</span> max <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        Index<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> idxs <span class="token operator">=</span> <span class="token punctuation">(</span>Index<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Index</span><span class="token punctuation">[</span>level<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        Index<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> idx <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> level<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            idxs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> idx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Index</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        HeadIndex<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> oldh<span class="token punctuation">;</span>        <span class="token keyword">int</span> k<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            oldh <span class="token operator">=</span> head<span class="token punctuation">;</span>            <span class="token keyword">int</span> oldLevel <span class="token operator">=</span> oldh<span class="token punctuation">.</span>level<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新head</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>level <span class="token operator">&lt;=</span> oldLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// lost race to add level</span>                k <span class="token operator">=</span> level<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            HeadIndex<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> newh <span class="token operator">=</span> oldh<span class="token punctuation">;</span>            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> oldbase <span class="token operator">=</span> oldh<span class="token punctuation">.</span>node<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> oldLevel<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> level<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>                newh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeadIndex</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>oldbase<span class="token punctuation">,</span> newh<span class="token punctuation">,</span> idxs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">casHead</span><span class="token punctuation">(</span>oldh<span class="token punctuation">,</span> newh<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                k <span class="token operator">=</span> oldLevel<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">addIndex</span><span class="token punctuation">(</span>idxs<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> oldh<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考：</p><p>JDK 1.7源码</p><p><a href="http://blog.csdn.net/ict2014/article/details/17394259" target="_blank" rel="noopener">http://blog.csdn.net/ict2014/article/details/17394259</a></p><p><a href="http://blog.sina.com.cn/s/blog_72995dcc01017w1t.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_72995dcc01017w1t.html</a></p><p><a href="https://yq.aliyun.com/articles/38381" target="_blank" rel="noopener">https://yq.aliyun.com/articles/38381</a></p><p><a href="http://www.2cto.com/kf/201212/175026.html" target="_blank" rel="noopener">http://www.2cto.com/kf/201212/175026.html</a></p><p><a href="http://ifeve.com/cas-skiplist/" target="_blank" rel="noopener">http://ifeve.com/cas-skiplist/</a></p>]]></content>
      
      
      <categories>
          
          <category> 底层实现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>volatile不具有原子性</title>
      <link href="/2019/09/17/volatile%E4%B8%8D%E5%85%B7%E6%9C%89%E5%8E%9F%E5%AD%90%E6%80%A7/"/>
      <url>/2019/09/17/volatile%E4%B8%8D%E5%85%B7%E6%9C%89%E5%8E%9F%E5%AD%90%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>来源于这篇<a href="https://www.jianshu.com/p/f74044782927" target="_blank" rel="noopener">文章</a>:</p></blockquote><a id="more"></a><p>我们知道对于可见性，Java提供了volatile关键字来保证<strong>可见性</strong>、<strong>有序性</strong>。<strong>但不保证原子性</strong>。</p><p>普通的共享变量不能保证可见性，因为普通共享变量被修改之后，什么时候被写入主存是不确定的，当其他线程去读取时，此时内存中可能还是原来的旧值，因此无法保证可见性。</p><blockquote><p>背景：为了提高处理速度，处理器不直接和内存进行通信，而是先将系统内存的数据读到内部缓存（L1，L2或其他）后再进行操作，但操作完不知道何时会写到内存。</p></blockquote><ul><li><p><strong>如果对声明了volatile的变量进行写操作</strong>，JVM就会向处理器发送一条指令，将这个变量所在缓存行的数据写回到系统内存。但是，就算写回到内存，如果其他处理器缓存的值还是旧的，再执行计算操作就会有问题。</p></li><li><p>在多处理器下，为了保证各个处理器的缓存是一致的，就会<strong>实现缓存一致性协议</strong>，每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期了，当处理器发现自己缓存行对应的内存地址被修改，就会将当前处理器的缓存行设置成无效状态，当处理器对这个数据进行修改操作的时候，会重新从系统内存中把数据读到处理器缓存里。</p></li></ul><p><strong>总结下来</strong>：</p><ul><li>第一：使用volatile关键字会强制将修改的值立即写入主存；</li><li>第二：使用volatile关键字的话，当线程2进行修改时，会导致线程1的工作内存中缓存变量的缓存行无效（反映到硬件层的话，就是CPU的L1或者L2缓存中对应的缓存行无效）；</li><li>第三：由于线程1的工作内存中缓存变量的缓存行无效，所以线程1再次读取变量的值时会去主存读取。</li></ul><p><strong>最重要的是</strong>：</p><ul><li>可见性：对一个volatile变量的读，总是能看到（任意线程）对这个volatile变量最后的写入。</li><li>原子性：仅仅对任意单个volatile变量的读/写具有原子性，但类似于volatile++这种复合操作不具有原子性。</li></ul><blockquote><p>举2个例子，例子来源于这篇<a href="https://www.cnblogs.com/dolphin0520/p/3920373.html" target="_blank" rel="noopener">文章</a>:</p></blockquote><p>例子是这样的：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//线程1</span><span class="token keyword">boolean</span> stop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stop<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//线程2</span>stop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原文：这段代码是很典型的一段代码，很多人在中断线程时可能都会采用这种标记办法。但是事实上，这段代码会完全运行正确么？即一定会将线程中断么？不一定，也许在大多数时候，这个代码能够把线程中断，但是也有可能会导致无法中断线程（虽然这个可能性很小，但是只要一旦发生这种情况就会造成死循环了）。</p><p>　　下面解释一下这段代码为何有可能导致无法中断线程。在前面已经解释过，每个线程在运行过程中都有自己的工作内存，那么线程1在运行的时候，会将stop变量的值拷贝一份放在自己的工作内存当中。<br>　　<br>　　那么当线程2更改了stop变量的值之后，但是还没来得及写入主存当中，线程2转去做其他事情了，那么线程1由于不知道线程2对stop变量的更改，因此还会一直循环下去。<br>　　<br>　　但是用volatile修饰之后就变得不一样了：<br>　　第一：使用volatile关键字会强制将修改的值立即写入主存；<br>　　第二：使用volatile关键字的话，当线程2进行修改时，会导致线程1的工作内存中缓存变量stop的缓存行无效（反映到硬件层的话，就是CPU的L1或者L2缓存中对应的缓存行无效）；<br>　　第三：由于线程1的工作内存中缓存变量stop的缓存行无效，所以线程1再次读取变量stop的值时会去主存读取。<br>　　<br><strong>到这里可能看起来没什么问题,我们来看例子2</strong>：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> inc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        inc<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>         <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Test test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                        test<span class="token punctuation">.</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">activeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//保证前面的线程都执行完</span>            Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>inc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原文：大家想一下这段程序的输出结果是多少？也许有些朋友认为是10000。但是事实上运行它会发现每次运行结果都不一致，都是一个小于10000的数字。</p><p>　　可能有的朋友就会有疑问，不对啊，上面是对变量inc进行自增操作，由于volatile保证了可见性，那么在每个线程中对inc自增完之后，在其他线程中都能看到修改后的值啊，所以有10个线程分别进行了1000次操作，那么最终inc的值应该是1000*10=10000。<br>　　<br>　　这里面就有一个误区了，volatile关键字能保证可见性没有错，但是上面的程序错在没能保证原子性。可见性只能保证每次读取的是最新的值，但是volatile没办法保证对变量的操作的原子性。<br>　　<br>　　在前面已经提到过，自增操作是不具备原子性的，它包括读取变量的原始值、进行加1操作、写入工作内存。那么就是说自增操作的三个子操作可能会分割开执行，就有可能导致下面这种情况出现：<br>　　假如某个时刻变量inc的值为10，线程1对变量进行自增操作，线程1先读取了变量inc的原始值，然后线程1被阻塞了；<br>　　<br>　　然后线程2对变量进行自增操作，线程2也去读取变量inc的原始值，由于线程1只是对变量inc进行读取操作，而没有对变量进行修改操作，所以不会导致线程2的工作内存中缓存变量inc的缓存行无效，所以线程2会直接去主存读取inc的值，发现inc的值时10，然后进行加1操作，并把11写入工作内存，最后写入主存。<br>　　<br>　　然后线程1接着进行加1操作，由于已经读取了inc的值，注意此时在线程1的工作内存中inc的值仍然为10，所以线程1对inc进行加1操作后inc的值为11，然后将11写入工作内存，最后写入主存。<br>那么两个线程分别进行了一次自增操作后，inc只增加了1。<br>　　<br>　　解释到这里，可能有朋友会有疑问，不对啊，前面不是保证一个变量在修改volatile变量时，会让缓存行无效吗？然后其他线程去读就会读到新的值，对，这个没错。这个就是上面的happens-before规则中的volatile变量规则，但是要注意，线程1对变量进行读取操作之后，被阻塞了的话，并没有对inc值进行修改。然后虽然volatile能保证线程2对变量inc的值读取是从内存中读取的，但是线程1没有进行修改，所以线程2根本就不会看到修改的值。</p><p><strong>大家是不是有这样的疑问</strong>：“线程1在读取inc为10后被阻塞了，没有进行修改所以不会去通知其他线程，此时线程2拿到的还是10，这点可以理解。但是后来线程2修改了inc变成11后写回主内存，这下是修改了，线程1再次运行时，难道不会去主存中获取最新的值吗？按照volatile的定义，如果volatile修饰的变量发生了变化，其他线程应该去主存中拿变化后的值才对啊？”</p><p><strong>是不是还有</strong>：例子1中线程1先将stop=flase读取到了工作内存中，然后去执行循环操作，线程2将stop=true写入到主存后，为什么线程1的工作内存中stop=false会变成无效的？</p><p><strong>其实严格的说，对任意单个volatile变量的读/写具有原子性，但类似于volatile++这种复合操作不具有原子性。</strong>在《Java并发编程的艺术》中有这一段描述：“在多处理器下，为了保证各个处理器的缓存是一致的，就会<strong>实现缓存一致性协议</strong>，每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期了，当处理器发现自己缓存行对应的内存地址被修改，就会将当前处理器的缓存行设置成无效状态，当处理器对这个数据进行<strong>修改操作</strong>的时候，会重新从系统内存中把数据读到处理器缓存里。”<strong>我们需要注意的是，这里的修改操作，是指的一个操作</strong>。</p><ul><li>例子1中，因为是while语句，线程会不断读取stop的值来判断是否为false，<strong>每一次判断都是一个操作</strong>。这里是从缓存中读取。单个读取操作是具有原子性的，所以当例子1中的线程2修改了stop时，由于volatile变量的可见性，线程1再读取stop时是最新的值，为true。</li><li>而例子2中，为什么自增操作会出现那样的结果呢？可以知道自增操作是三个原子操作组合而成的复合操作。在一个操作中，读取了inc变量后，是不会再读取的inc的，所以它的值还是之前读的10，它的下一步是自增操作。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM内存模型</title>
      <link href="/2019/09/17/JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
      <url>/2019/09/17/JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>　　多任务和高并发是衡量一台计算机处理器的能力重要指标之一。一般衡量一个服务器性能的高低好坏，使用每秒事务处理数（Transactions Per Second，TPS）这个指标比较能说明问题，它代表着一秒内服务器平均能响应的请求数，而TPS值与程序的并发能力有着非常密切的关系。在讨论Java内存模型和线程之前，先简单介绍一下硬件的效率与一致性。</p><a id="more"></a><h2 id="2-硬件的效率与一致性"><a href="#2-硬件的效率与一致性" class="headerlink" title="2.硬件的效率与一致性"></a>2.硬件的效率与一致性</h2><p>　　由于计算机的存储设备与处理器的运算能力之间有几个数量级的差距，所以现代计算机系统都不得不加入一层读写速度尽可能接近处理器运算速度的高速缓存（cache）来作为内存与处理器之间的缓冲：将运算需要使用到的数据复制到缓存中，让运算能快速进行，当运算结束后再从缓存同步回内存之中没这样处理器就无需等待缓慢的内存读写了。<br>　　基于高速缓存的存储交互很好地解决了处理器与内存的速度矛盾，但是引入了一个新的问题：缓存一致性（Cache Coherence）。在多处理器系统中，每个处理器都有自己的高速缓存，而他们又共享同一主存，如下图所示：多个处理器运算任务都涉及同一块主存，需要一种协议可以保障数据的一致性，这类协议有MSI、MESI、MOSI及Dragon Protocol等。Java虚拟机内存模型中定义的内存访问操作与硬件的缓存访问操作是具有可比性的，后续将介绍Java内存模型。</p><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/huancunmoxing.jpg" alt="img"></p><p>　　除此之外，为了使得处理器内部的运算单元能竟可能被充分利用，处理器可能会对输入代码进行乱起执行（Out-Of-Order Execution）优化，处理器会在计算之后将对乱序执行的代码进行结果重组，保证结果准确性。与处理器的乱序执行优化类似，Java虚拟机的即时编译器中也有类似的指令重排序（Instruction Recorder）优化。</p><h2 id="3-Java内存模型"><a href="#3-Java内存模型" class="headerlink" title="3.Java内存模型"></a>3.Java内存模型</h2><p>　　定义Java内存模型并不是一件容易的事情，这个模型必须定义得足够严谨，才能让Java的并发操作不会产生歧义；但是，也必须得足够宽松，使得虚拟机的实现能有足够的自由空间去利用硬件的各种特性（寄存器、高速缓存等）来获取更好的执行速度。经过长时间的验证和修补，在JDK1.5发布后，Java内存模型就已经成熟和完善起来了。</p><h3 id="3-1-主内存与工作内存"><a href="#3-1-主内存与工作内存" class="headerlink" title="3.1 主内存与工作内存"></a>3.1 主内存与工作内存</h3><p>　　Java内存模型的主要目标是定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样底层细节。此处的变量与Java编程时所说的变量不一样，指包括了实例字段、静态字段和构成数组对象的元素，但是不包括局部变量与方法参数，后者是线程私有的，不会被共享。</p><p>　　Java内存模型中规定了所有的变量都存储在主内存中，每条线程还有自己的工作内存（可以与前面将的处理器的高速缓存类比），线程的工作内存中保存了该线程使用到的变量到主内存副本拷贝，线程对变量的所有操作（读取、赋值）都必须在工作内存中进行，而不能直接读写主内存中的变量。不同线程之间无法直接访问对方工作内存中的变量，线程间变量值的传递均需要在主内存来完成，线程、主内存和工作内存的交互关系如下图所示，和上图很类似。</p><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/neicunmoxing.jpg" alt="img"></p><p>这里的主内存、工作内存与Java内存区域的Java堆、栈、方法区不是同一层次内存划分。</p><h3 id="3-2-内存间交互操作"><a href="#3-2-内存间交互操作" class="headerlink" title="3.2 内存间交互操作"></a>3.2 内存间交互操作</h3><p>　　关于主内存与工作内存之间的具体交互协议，即一个变量如何从主内存拷贝到工作内存、如何从工作内存同步到主内存之间的实现细节，Java内存模型定义了以下八种操作来完成：</p><ul><li>lock（锁定）：作用于主内存的变量，把一个变量标识为一条线程独占状态。</li><li>unlock（解锁）：作用于主内存变量，把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。</li><li>read（读取）：作用于主内存变量，把一个变量值从主内存传输到线程的工作内存中，以便随后的load动作使用</li><li>load（载入）：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中。</li><li>use（使用）：作用于工作内存的变量，把工作内存中的一个变量值传递给执行引擎，每当虚拟机遇到一个需要使用变量的值的字节码指令时将会执行这个操作。</li><li>assign（赋值）：作用于工作内存的变量，它把一个从执行引擎接收到的值赋值给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。</li><li>store（存储）：作用于工作内存的变量，把工作内存中的一个变量的值传送到主内存中，以便随后的write的操作。</li><li>write（写入）：作用于主内存的变量，它把store操作从工作内存中一个变量的值传送到主内存的变量中。</li></ul><p>　　如果要把一个变量从主内存中复制到工作内存，就需要按顺寻地执行read和load操作，如果把变量从工作内存中同步回主内存中，就要按顺序地执行store和write操作。Java内存模型只要求上述操作必须按顺序执行，而没有保证必须是连续执行。也就是read和load之间，store和write之间是可以插入其他指令的，如对主内存中的变量a、b进行访问时，可能的顺序是read a，read b，load b， load a。Java内存模型还规定了在执行上述八种基本操作时，必须满足如下规则：</p><ul><li>不允许read和load、store和write操作之一单独出现</li><li>不允许一个线程丢弃它的最近assign的操作，即变量在工作内存中改变了之后必须同步到主内存中。</li><li>不允许一个线程无原因地（没有发生过任何assign操作）把数据从工作内存同步回主内存中。</li><li>一个新的变量只能在主内存中诞生，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量。即就是对一个变量实施use和store操作之前，必须先执行过了assign和load操作。</li><li>一个变量在同一时刻只允许一条线程对其进行lock操作，lock和unlock必须成对出现</li><li>如果对一个变量执行lock操作，将会清空工作内存中此变量的值，在执行引擎使用这个变量前需要重新执行load或assign操作初始化变量的值</li><li>如果一个变量事先没有被lock操作锁定，则不允许对它执行unlock操作；也不允许去unlock一个被其他线程锁定的变量。</li><li>对一个变量执行unlock操作之前，必须先把此变量同步到主内存中（执行store和write操作）。</li></ul><h3 id="3-3-重排序"><a href="#3-3-重排序" class="headerlink" title="3.3 重排序"></a>3.3 重排序</h3><p>　　在执行程序时为了提高性能，编译器和处理器经常会对指令进行重排序。重排序分成三种类型：</p><ol><li>编译器优化的重排序。编译器在不改变单线程程序语义放入前提下，可以重新安排语句的执行顺序。</li><li>指令级并行的重排序。现代处理器采用了指令级并行技术来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。</li><li>内存系统的重排序。由于处理器使用缓存和读写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。</li></ol><p>从Java源代码到最终实际执行的指令序列，会经过下面三种重排序：</p><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/chongpaixu.png" alt="img"></p><p>为了保证内存的可见性，Java编译器在生成指令序列的适当位置会插入内存屏障指令来禁止特定类型的处理器重排序。Java内存模型把内存屏障分为LoadLoad、LoadStore、StoreLoad和StoreStore四种：</p><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown%20Photos/neicunpingzhangs1.png" alt="img"></p><h3 id="3-4-同步机制"><a href="#3-4-同步机制" class="headerlink" title="3.4 同步机制"></a>3.4 同步机制</h3><p>介绍volatile、synchronized和final</p><h3 id="3-5-原子性、可见性与有序性"><a href="#3-5-原子性、可见性与有序性" class="headerlink" title="3.5 原子性、可见性与有序性"></a>3.5 原子性、可见性与有序性</h3><p>介绍三个特性</p>]]></content>
      
      
      <categories>
          
          <category> JMM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb四大域对象</title>
      <link href="/2019/09/17/JavaWeb%E5%9B%9B%E5%A4%A7%E5%9F%9F%E5%AF%B9%E8%B1%A1/"/>
      <url>/2019/09/17/JavaWeb%E5%9B%9B%E5%A4%A7%E5%9F%9F%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>JavaWeb有ServletContext、ServletRequest、HttpSession、PageContext四大域对象，下面主要从域对象的生命周期、作用、作用范围进行介绍。<br><em>Servlet中只有前三个域对象，JSP中多了一个pageContext对象。</em></p></blockquote><h1 id="一、ServletContext"><a href="#一、ServletContext" class="headerlink" title="一、ServletContext"></a>一、ServletContext</h1><h2 id="1-生命周期"><a href="#1-生命周期" class="headerlink" title="1.生命周期"></a>1.生命周期</h2><p>当web应用被加进容器时，创建<strong>代表整个web应用</strong>的ServletContext对象，当服务器关闭，或web应用被移除时，ServletContext对象跟着被销毁。</p><h2 id="2-作用范围"><a href="#2-作用范围" class="headerlink" title="2.作用范围"></a>2.作用范围</h2><p>整个web应用。</p><h2 id="3-作用"><a href="#3-作用" class="headerlink" title="3.作用"></a>3.作用</h2><p>由于一个web应用中的所有Servlet共享同一个ServletContext对象：因此Servlet对象之间可以通过ServletContext来是实现通讯。ServletContext对象通常也被称为context域对象。</p><a id="more"></a><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul><li>多个Servlet通过ServletContext对象实现数据共享。<ul><li>获取web应用的初始化参数(getInitParameter)。</li></ul></li><li>用ServletContext实现请求转发（<code>this.getServletContext().getRequestDispatcher().forward()</code>）。<ul><li>利用ServletContext对象读取资源文件。<br><em>servletContext.getRealPath(“/xx.properties”)，servletContext.getResourceAsStream()。</em><br>另外，顺便说一下，如果要在非servlet中获取资源文件，无法取得servletContext对象，这时候就得通过类加载器ClassLoader来getResourceAsStream()，此方法通过类加载器将资源文件直接加载到内存中，有更新延迟的问题，适合小文件的读取，对于大资源文件，将会占用较大的内存。</li></ul></li><li>还有，通过classLoader也可以获取资源文件路径，具体通过<code>ClassLoader.getResource(&quot;/xx.properties&quot;).getPath()</code>，没有更新延迟问题。</li></ul><h1 id="二、ServletRequest"><a href="#二、ServletRequest" class="headerlink" title="二、ServletRequest"></a>二、ServletRequest</h1><h2 id="1-生命周期-1"><a href="#1-生命周期-1" class="headerlink" title="1.生命周期"></a>1.生命周期</h2><p>在service方法调用前由服务器创建，传入service()方法，整个请求结束，ServletRequest生命周期结束。</p><h2 id="2-作用范围-1"><a href="#2-作用范围-1" class="headerlink" title="2.作用范围"></a>2.作用范围</h2><p>整个请求链。（请求转发也存在，请求转发属于一次请求。）</p><h2 id="3-作用-1"><a href="#3-作用-1" class="headerlink" title="3.作用"></a>3.作用</h2><ul><li>在整个请求链中共享数据，主要可通过getAttribute、setAttribute将数据带到jsp页面中进行显示。</li><li>获得客户端信息，可通过getRequestURL()、getRequestURI()、getQueryString()、getPathInfo()、getRemoteAddr()、getRemoteHost()、getRemotePort()、getLocalAddr()、getLocalName()。<ul><li>获得客户机请求头，getHeader(String s)、getHeaders(String s)、getHeaderNames()。</li></ul></li><li>获得客户机请求参数（客户端提交的数据）：getParameter()等。</li></ul><h1 id="三、Session"><a href="#三、Session" class="headerlink" title="三、Session"></a>三、Session</h1><h2 id="1-生命周期-2"><a href="#1-生命周期-2" class="headerlink" title="1.生命周期"></a>1.生命周期</h2><p>  服务器在运行时可以为每一个用户的浏览器创建一个其独享的session对象，由于session为用户浏览器独享，所以用户在访问服务器的web资源时，可以把各自的数据放在各自的session中，当用户再去访问服务器中的其它web资源时，其它web资源再从用户各自的session中取出数据为用户服务。<br>  在第一次调用request.getSession()方法时，服务器会检查是否已经有对应的session，如果没有就在内存中创建一个并返回。<br>  当一段时间内，session没有被使用（默认是30分钟），服务器会销毁该session。如果服务器非正常关闭（强行关闭），还未到期的session也会被销毁。<br>  另外，调用session的invalidate()方法可以立即销毁session。</p><h2 id="2-作用范围-2"><a href="#2-作用范围-2" class="headerlink" title="2.作用范围"></a>2.作用范围</h2><p>  一次回话。</p><h1 id="四、PageContext"><a href="#四、PageContext" class="headerlink" title="四、PageContext"></a>四、PageContext</h1><p>  PageContext对象是JSP页面中才有的对象。</p><h2 id="1-生命周期-3"><a href="#1-生命周期-3" class="headerlink" title="1.生命周期"></a>1.生命周期</h2><p>  当对JSP的请求开始时创建，当响应结束时销毁。</p><h2 id="2-作用范围-3"><a href="#2-作用范围-3" class="headerlink" title="2.作用范围"></a>2.作用范围</h2><p>  整个JSP页面，是四大域中最小的一个。</p><h2 id="3-作用-2"><a href="#3-作用-2" class="headerlink" title="3.作用"></a>3.作用</h2><p>  pageContext对象封装了8大隐式对象，通过它可以获得其它的8个对象。</p><ul><li><p>getException()返回Exception。</p></li><li><p>getPage()返回Page。</p></li><li><p>getRequest()返回request。</p></li><li><p>getResponse()返回response。</p></li><li><p>getServletConfig()返回config。</p></li><li><p>getServletContext()返回application。</p></li><li><p>getSession()返回session。</p></li><li><p>getOut()返回out。</p><p>另外，通过pageContext还能获取其所有域中的数据。</p></li></ul><h2 id="4-getAttribute-和findAttribute-的区别"><a href="#4-getAttribute-和findAttribute-的区别" class="headerlink" title="4.getAttribute()和findAttribute()的区别"></a>4.getAttribute()和findAttribute()的区别</h2><p>  getAttribute() 只能获取自己域中保存的属性，而 findAttribute() 则会按照 pageContext-&gt;request-&gt;session-&gt;servletContext 的顺序查找有无对应的属性。</p><p>  <em>四大域中，HttpRequest和HttpResponse，session和cookie有很多联系，后面会补上response和cookie的总结。</em></p>]]></content>
      
      
      <categories>
          
          <category> javaweb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三次握手与四次挥手过程</title>
      <link href="/2019/09/13/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E8%BF%87%E7%A8%8B/"/>
      <url>/2019/09/13/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h1><p>首先，客户端与服务器均处于未连接状态，并且是客户端主动向服务器请求建立连接：<br>客户端将报文段中的SYN=1，并选择一个seq=x，(即该请求报文的序号为x)  将这个报文发送到服务器。此时，客户端进入同步已发送状态（SYN-SEND）。SYN报文段不能携带数据，但是要消耗掉一个序号。<br>服务器收到请求报文后，若同意建立连接，则回复报文中，SYN=1，ACK=1，并选择一个seq = y，且报文中确认号为x+1，序号为y。此时服务器进入同步已接收状态（SYN-RCVD）。</p><p>客户端收到服务器的同步确认后，对服务器发送确认的确认。将ACK=1，确认号为y+1，而报文首部的序号为x+1，将该报文发出后，客户端进入已连接状态（ESTABLISHED）。</p><p>服务器收到客户端的确认后，也进入已连接状态。</p><a id="more"></a><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/3timeswoshou.png" alt="image"></p><p>为何使用三次握手机制？假设如下异常情况：<br>客户端向服务器发送了第一条请求报文，但是该报文并未在网络中被丢弃，而是长时间阻滞在某处，而客户端收不到服务器确认，以为该报文丢失，于是重新发送该报文，这次的报文成功到达服务器，如果不使用三次握手，则服务器只需对该报文发出确认，就建立了一个连接。而在这个连接建立，并释放后，第一次发送的，阻滞在网络中的报文到达了服务器，服务器以为是客户端又重新发送了一个连接请求（实际上在客户端那里，该连接早已失效），就又向客户端发送一个确认，但客户端认为他没有发送该请求报文，因此不理睬服务器发送的确认，而服务器以为又建立了一个新的连接，于是一直等待A发来数据，造成了服务器资源的浪费，并且会产生安全隐患。因此，若使用三次握手机制，服务器发送了该确认后，收不到客户端的确认，也就知道并没有建立连接，因此不会将资源浪费在这种没有意义的等待上。</p><h1 id="TCP连接的释放（四次挥手）"><a href="#TCP连接的释放（四次挥手）" class="headerlink" title="TCP连接的释放（四次挥手）"></a>TCP连接的释放（四次挥手）</h1><p>连接的释放较连接的建立复杂。</p><p>现假设客户端与服务器均处于连接建立状态，客户端主动断开连接：</p><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/4timeswoshou.png" alt="image"></p><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/4timeshuishou.png" alt="image"></p><ol><li>客户端向服务器发送FIN报文：FIN=1，序号seq=上一个最后传输的字节序号+1=u，发送后，客户端进入FIN-WAIT-1状态。</li><li>服务器接收到该报文后，发送一个确认报文：令ACK=1，确认序号ack = u+1，自己的报文序号seq=v，发送后，服务器进入CLOSE-WAIT状态。</li><li>此时TCP连接进入连接半关闭状态，服务器可能还会向客户端发送一些数据。</li><li>客户端收到来自服务器的确认之后，进入FIN-WAIT-2状态。等待服务器发送连接释放报文。</li><li>如果服务器已经没有要发送的数据，则释放TCP连接，向客户端发送报文：令FIN=1，ACK=1，确认号ack =u+1，自己的序号seq = w（w可能等于v也可能大于v），服务器进入LAST-ACK状态。</li><li>客户端收到服务器的连接释放报文后，对该报文发出确认，令ACK=1，确认号ack=w+1，自己的序号seq=u+1，发送此报文后，等待2个msl时间后，进入CLOSED状态。</li><li>服务器收到客户端的确认后，也进入CLOSED状态并撤销传输控制块。</li></ol><p>客户端状态变化：未连接—–&gt;SYN-SEND—–&gt;ESTABLISHED—–&gt;FIN-WAIT-1—–&gt;FIN-WAIT-2—–&gt;TIME-WAIT—–&gt;CLOSED</p><p>服务器状态变化：未连接—–&gt;SYN-RCVD—–&gt;ESTABLISHED—–&gt;CLOSE-WAIT—–&gt;LAST-ACK—–&gt;CLOSED</p><h2 id="通俗描述3次握手就是"><a href="#通俗描述3次握手就是" class="headerlink" title="通俗描述3次握手就是"></a>通俗描述3次握手就是</h2><p>A对B说：我的序号是x，我要向你请求连接；（第一次握手，发送SYN包，然后进入SYN-SEND状态）</p><p>B听到之后对A说：我的序号是y，期待你下一句序号是x+1的话（意思就是收到了序号为x的话，即ack=x+1），同意建立连接。（第二次握手，发送ACK-SYN包，然后进入SYN-RCVD状态）</p><p>A听到B说同意建立连接之后，对A说：与确认你同意与我连接（ack=y+1，ACK=1，seq=x+1）。（第三次握手，A已进入ESTABLISHED状态）</p><p>B听到A的确认之后，也进入ESTABLISHED状态。</p><h2 id="描述四次挥手就是："><a href="#描述四次挥手就是：" class="headerlink" title="描述四次挥手就是："></a>描述四次挥手就是：</h2><ol><li><p>A与B交谈结束之后，A要结束此次会话，对B说：我要关闭连接了（seq=u，FIN=1）。（第一次挥手，A进入FIN-WAIT-1）</p></li><li><p>B收到A的消息后说：确认，你要关闭连接了。（seq=v，ack=u+1，ACK=1）（第二次挥手，B进入CLOSE-WAIT）</p></li><li><p>A收到B的确认后，等了一段时间，因为B可能还有话要对他说。（此时A进入FIN-WAIT-2）</p></li><li><p>B说完了他要说的话（只是可能还有话说）之后，对A说，我要关闭连接了。（seq=w， ack=u+1，FIN=1，ACK=1）(第三次挥手)</p></li><li><p>A收到B要结束连接的消息后说：已收到你要关闭连接的消息。（seq=u+1，ack=w+1，ACK=1）(第四次挥手，然后A进入CLOSED)</p></li><li><p>B收到A的确认后，也进入CLOSED。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tcp/ip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础篇-篇四（锁机制）</title>
      <link href="/2019/09/10/Java%E5%9F%BA%E7%A1%80%E7%AF%87-%E7%AF%87%E5%9B%9B%EF%BC%88%E9%94%81%E6%9C%BA%E5%88%B6%EF%BC%89/"/>
      <url>/2019/09/10/Java%E5%9F%BA%E7%A1%80%E7%AF%87-%E7%AF%87%E5%9B%9B%EF%BC%88%E9%94%81%E6%9C%BA%E5%88%B6%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="基础篇（四）"><a href="#基础篇（四）" class="headerlink" title="基础篇（四）"></a>基础篇（四）</h1><h1 id="锁机制"><a href="#锁机制" class="headerlink" title="锁机制"></a>锁机制</h1><a id="more"></a><h1 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h1><p>按照定义，线程安全是一个多线程环境下正确性的概念，也就是保证多线程环境下共享的、 可修改的状态的正确性，这里的状态反映在程序中其实可以看作是数据。<br>换个角度来看，如果状态不是共享的，或者不是可修改的，也就不存在线程安全问题，进而可以推理出保证线程安全的两个办法：</p><ul><li>封装：通过封装，我们可以将对象内部状态隐藏、保护起来 </li><li>不可变：final和immutable，就是这个道理， Java语言目前还没有真正意义上的原生不可变，但是未来也许会引入。</li></ul><p>线程安全需要保证几个基本特性：</p><ul><li>原子性，简单说就是相关操作不会中途被其他线程干扰，一般通过同步机制实现。</li><li>可见性，是一个线程修改了某个共享变量，其状态能够立即被其他线程知晓，通常被解释为将线程本地状态反映到主内存上， volatile就是负责保证可见性的。</li><li>有序性，是保证线程内串行语义，避免指令重排等。</li></ul><h1 id="volatile-实现原理"><a href="#volatile-实现原理" class="headerlink" title="volatile 实现原理"></a>volatile 实现原理</h1><h1 id="synchronized-实现原理"><a href="#synchronized-实现原理" class="headerlink" title="synchronized 实现原理"></a>synchronized 实现原理</h1><h2 id="典型答案"><a href="#典型答案" class="headerlink" title="典型答案"></a>典型答案</h2><p>synchronized代码块是由一对儿monitorenter/monitorexit指令实现的， Monitor对象是同步的基本实现<a href="https://docs.oracle.com/javase/specs/jls/se10/html/jls-8.html#d5e13622" target="_blank" rel="noopener">单元</a>。<br>在Java 6之前， Monitor的实现完全是依靠操作系统内部的互斥锁，因为需要进行用户态到内核态的切换，所以同步操作是一个无差别的重量级操作。</p><p>现代的（Oracle） JDK中， JVM对此进行了大刀阔斧地改进，提供了三种不同的Monitor实现，也就是常说的三种不同的锁：偏斜锁（Biased Locking）、轻量级锁和重量级锁，大大改进了其性能。</p><p>所谓锁的升级、降级，就是JVM优化synchronized运行的机制，当JVM检测到不同的竞争状况时，会自动切换到适合的锁实现，这种切换就是锁的升级、降级。</p><p>当没有竞争出现时，默认会使用偏斜锁。 JVM会利用CAS操作（compare and swap），在对象头上的Mark Word部分设置线程ID，以表示这个对象偏向于当前线程，所以并不涉及真正的互斥锁。这样做的假设是基于在很多应用场景中，大部分对象生命周期中最多会被一个线程锁定，使用偏斜锁可以降低无竞争开销。</p><p>如果有另外的线程试图锁定某个已经被偏斜过的对象， JVM就需要撤销（revoke）偏斜锁，并切换到轻量级锁实现。轻量级锁依赖CAS操作MarkWord来试图获取锁，如果重试成功，就使用普通的轻量级锁；否则，进一步升级为重量级锁。</p><p>锁降级确实是会发生的，当JVM进入安全点（SafePoint）的时候，会检查是否有闲置的Monitor，然后试图进行降级。 </p><p>synchronized是JVM内部的Intrinsic Lock，所以偏斜锁、轻量级锁、重量级锁的代码实现，并不在核心类库部分，而是在JVM的代码中 。</p><p>首先， synchronized的行为是JVM runtime的一部分，所以我们需要先找到Runtime相关的功能实现。通过在代码中查询类似“monitor_enter”或“Monitor Enter”，很直观的就可以定位到：<br><a href="http://hg.openjdk.java.net/jdk/jdk/file/6659a8f57d78/src/hotspot/share/runtime/sharedRuntime.cpp" target="_blank" rel="noopener">sharedRuntime.cpp</a>/hpp，它是解释器和编译器运行时的基类。<br><a href="https://java.se.oracle.com/source/xref/jdk-jdk/open/src/hotspot/share/runtime/synchronizer.cpp" target="_blank" rel="noopener">synchronizer</a>.cpp/hpp， JVM同步相关的各种基础逻辑。<br>在sharedRuntime.cpp中，下面代码体现了synchronized的主要逻辑。 </p><pre class="line-numbers language-java"><code class="language-java">Handle <span class="token function">h_obj</span><span class="token punctuation">(</span>THREAD<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>UseBiasedLocking<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Retry fas entry if bias is revoked to avoid unnecessary infation</span>    ObjectSynchronizer<span class="token operator">:</span><span class="token operator">:</span><span class="token function">fast_enter</span><span class="token punctuation">(</span>h_obj<span class="token punctuation">,</span> lock<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> CHECK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    ObjectSynchronizer<span class="token operator">:</span><span class="token operator">:</span><span class="token function">slow_enter</span><span class="token punctuation">(</span>h_obj<span class="token punctuation">,</span> lock<span class="token punctuation">,</span> CHECK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实现可以简单进行分解：</p><ul><li>UseBiasedLocking是一个检查，因为，在JVM启动时，我们可以指定是否开启偏斜锁。</li></ul><p>偏斜锁并不适合所有应用场景，撤销操作（revoke）是比较重的行为，只有当存在较多不会真正竞争的synchronized块儿时，才能体现出明显改善。实践中对于偏斜锁的一直是有争议的，有人甚至认为，当你需要大量使用并发类库时，往往意味着你不需要偏斜锁。从具体选择来看，我还是建议需要在实践中进行测试，根据结果再决定是否使用。<br>还有一方面是，偏斜锁会延缓JIT 预热的进程，所以很多性能测试中会显式地关闭偏斜锁，命令如下：</p><blockquote><p>-XX:-UseBiasedLocki  </p></blockquote><ul><li>fast_enter是我们熟悉的完整锁获取路径， slow_enter则是绕过偏斜锁，直接进入轻量级锁获取逻辑。</li></ul><p>那么fast_enter是如何实现的呢？同样是通过在代码库搜索，我们可以定位到<a href="https://java.se.oracle.com/source/xref/jdk-jdk/open/src/hotspot/share/runtime/synchronizer.cpp" target="_blank" rel="noopener">synchronizer.</a>cpp。 类似fast_enter这种实现，解释器或者动态编译器，都是拷贝这段基础逻辑，所以如果我们修改这部分逻辑，要保证一致性。这部分代码是非常敏感的，微小的问题都可能导致死锁或者正确性问题。 </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> ObjectSynchronizer<span class="token operator">:</span><span class="token operator">:</span><span class="token function">fast_enter</span><span class="token punctuation">(</span>Handle obj<span class="token punctuation">,</span> BasicLock<span class="token operator">*</span> lock<span class="token punctuation">,</span>bool attempt_rebias<span class="token punctuation">,</span> TRAPS<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>UseBiasedLocking<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>SafepointSynchronize<span class="token operator">:</span><span class="token operator">:</span><span class="token function">is_at_safepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            BiasedLocking<span class="token operator">:</span><span class="token operator">:</span>Condition cond <span class="token operator">=</span> BiasedLocking<span class="token operator">:</span><span class="token operator">:</span><span class="token function">revoke_and_rebias</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> attempt_rebias<span class="token punctuation">,</span> THREAD<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cond <span class="token operator">==</span> BiasedLocking<span class="token operator">:</span><span class="token operator">:</span>BIAS_REVOKED_AND_REBIASED<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token operator">!</span>attempt_rebias<span class="token punctuation">,</span> <span class="token string">"can not rebias toward VM thread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BiasedLocking<span class="token operator">:</span><span class="token operator">:</span><span class="token function">revoke_at_safepoint</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token operator">-</span><span class="token operator">></span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">has_bias_pattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"biases should be revoked by now"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">slow_enter</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> lock<span class="token punctuation">,</span> THREAD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我来分析下这段逻辑实现：</p><ul><li><p><a href="http://hg.openjdk.java.net/jdk/jdk/file/6659a8f57d78/src/hotspot/share/runtime/biasedLocking.cpp" target="_blank" rel="noopener">biasedLocking</a>定义了偏斜锁相关操作， revoke_and_rebias是获取偏斜锁的入口方法， revoke_at_safepoint则定义了当检测到安全点时的处理逻辑。</p></li><li><p>如果获取偏斜锁失败，则进入slow_enter。</p></li><li><p>这个方法里面同样检查是否开启了偏斜锁，但是从代码路径来看，其实如果关闭了偏斜锁，是不会进入这个方法的，所以算是个额外的保障性检查吧。</p><p>另外，如果你仔细查看<a href="https://java.se.oracle.com/source/xref/jdk-jdk/open/src/hotspot/share/runtime/synchronizer.cpp" target="_blank" rel="noopener">synchronizer</a>.cpp里，会发现不仅仅是synchronized的逻辑，包括从本地代码，也就是JNI，触发的Monitor动作，全都可以在里面找到<br>（jni_enter/jni_exit）。<br>关于biasedLocking的更多细节我就不展开了，明白它是通过CAS设置Mark Word就完全够用了，对象头中Mark Word的结构，可以参考下图： </p></li></ul><table><thead><tr><th>普通对象</th><th>Unused(25)</th><th>Hash(31)</th><th>Unused(1)</th><th>Age(4)</th><th>Baised lock(1)</th><th>lock(2)</th></tr></thead><tbody><tr><td>被偏斜的对象</td><td>Thread pointor(54)</td><td>Epoch(2)</td><td>Unused(1)</td><td>Age(4)</td><td>Baised lock(1)</td><td>lock(2)</td></tr></tbody></table><p>  顺着锁升降级的过程分析下去，偏斜锁到轻量级锁的过程是如何实现的呢？<br>  我们来看看slow_enter到底做了什么 </p><pre class="line-numbers language-java"><code class="language-java">  <span class="token keyword">void</span> ObjectSynchronizer<span class="token operator">:</span><span class="token operator">:</span><span class="token function">slow_enter</span><span class="token punctuation">(</span>Handle obj<span class="token punctuation">,</span> BasicLock<span class="token operator">*</span> lock<span class="token punctuation">,</span> TRAPS<span class="token punctuation">)</span> <span class="token punctuation">{</span>      markOop mark <span class="token operator">=</span> obj<span class="token operator">-</span><span class="token operator">></span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>mark<span class="token operator">-</span><span class="token operator">></span><span class="token function">is_neutral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 将目前的Mark Word复制到Displaced Header上</span>          lock<span class="token operator">-</span><span class="token operator">></span><span class="token function">set_displaced_header</span><span class="token punctuation">(</span>mark<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 利用CAS设置对象的Mark Word</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>mark <span class="token operator">==</span> <span class="token function">obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">cas_set_mark</span><span class="token punctuation">(</span><span class="token punctuation">(</span>markOop<span class="token punctuation">)</span> lock<span class="token punctuation">,</span> mark<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">TEVENT</span><span class="token punctuation">(</span>slow_enter<span class="token operator">:</span> release sacklock<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 检查存在竞争</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mark<span class="token operator">-</span><span class="token operator">></span><span class="token function">has_locker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>      THREAD<span class="token operator">-</span><span class="token operator">></span><span class="token function">is_lock_owned</span><span class="token punctuation">(</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span>mark<span class="token operator">-</span><span class="token operator">></span><span class="token function">locker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 清除</span>          lock<span class="token operator">-</span><span class="token operator">></span><span class="token function">set_displaced_header</span><span class="token punctuation">(</span>NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 重置Displaced Header</span>      lock<span class="token operator">-</span><span class="token operator">></span><span class="token function">set_displaced_header</span><span class="token punctuation">(</span>markOopDesc<span class="token operator">:</span><span class="token operator">:</span><span class="token function">unused_mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ObjectSynchronizer<span class="token operator">:</span><span class="token operator">:</span><span class="token function">infate</span><span class="token punctuation">(</span>THREAD<span class="token punctuation">,</span><span class="token function">obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      infate_cause_monitor_enter<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">enter</span><span class="token punctuation">(</span>THREAD<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请结合我在代码中添加的注释，来理解如何从试图获取轻量级锁，逐步进入锁膨胀的过程。你可以发现这个处理逻辑，和我在这一讲最初介绍的过程是十分吻合的。</p><ul><li>设置Displaced Header，然后利用cas_set_mark设置对象Mark Word，如果成功就成功获取轻量级锁。</li><li>否则Displaced Header，然后进入锁膨胀阶段，具体实现在infate方法中。</li></ul><p>今天就不介绍膨胀的细节了，我这里提供了源代码分析的思路和样例，考虑到应用实践，再进一步增加源代码解读意义不大，有兴趣的同学可以参考我提供的synchronizer.cpp链  接，例如：</p><ul><li>defate_idle_monitors是分析锁降级逻辑的入口，这部分行为还在进行持续改进，因为其逻辑是在安全点内运行，处理不当可能拖长JVM停顿（STW， stop-the-world）的时  间。</li><li>fast_exit或者slow_exit是对应的锁释放逻辑。</li></ul><p>前面分析了synchronized的底层实现，理解起来有一定难度，下面我们来看一些相对轻松的内容。 我在上一讲对比了synchronized和ReentrantLock， Java核心类库中还有其他一些特别的锁类型，具体请参考下面的图。</p><p>你可能注意到了，这些锁竟然不都是实现了Lock接口， ReadWriteLock是一个单独的接口，它通常是代表了一对儿锁，分别对应只读和写操作，标准类库中提供了再入版本的读写锁实现（ReentrantReadWriteLock），对应的语义和ReentrantLock比较相似。</p><p>StampedLock竟然也是个单独的类型，从类图结构可以看出它是不支持再入性的语义的，也就是它不是以持有锁的线程为单位。</p><p>为什么我们需要读写锁（ReadWriteLock）等其他锁呢？<br>这是因为，虽然ReentrantLock和synchronized简单实用，但是行为上有一定局限性，通俗点说就是“太霸道”，要么不占，要么独占。实际应用场景中，有的时候不需要大量竞争的写操作，而是以并发读取为主，如何进一步优化并发操作的粒度呢？</p><p>Java并发包提供的读写锁等扩展了锁的能力，它所基于的原理是多个读操作是不需要互斥的，因为读操作并不会更改数据，所以不存在互相干扰。而写操作则会导致并发一致性的问题，所以写线程之间、读写线程之间，需要精心设计的互斥逻辑。</p><p>下面是一个基于读写锁实现的数据结构，当数据量较大，并发读多、并发写少的时候，能够比纯同步版本凸显出优势</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RWSample</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantReadWriteLock rwl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Lock r <span class="token operator">=</span> rwl<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Lock w <span class="token operator">=</span> rwl<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        r<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"读锁锁定！ "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            r<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">put</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String entry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        w<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"写锁锁定！ "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>               <span class="token keyword">return</span> m<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> entry<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// …</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在运行过程中，如果读锁试图锁定时，写锁是被某个线程持有，读锁将无法获得，而只好等待对方操作结束，这样就可以自动保证不会读取到有争议的数据。<br>读写锁看起来比synchronized的粒度似乎细一些，但在实际应用中，其表现也并不尽如人意，主要还是因为相对比较大的开销。<br>所以， JDK在后期引入了StampedLock，在提供类似读写锁的同时，还支持优化读模式。优化读基于假设，大多数情况下读操作并不会和写操作冲突，其逻辑是先试着修改，然后通过validate方法确认是否进入了写模式，如果没有进入，就成功避免了开销；如果进入，则尝试获取读锁。请参考我下面的样例代码。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StampedSample</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> StampedLock sl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StampedLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">mutate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> stamp <span class="token operator">=</span> sl<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            sl<span class="token punctuation">.</span><span class="token function">unlockWrite</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    Data <span class="token function">access</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> stamp <span class="token operator">=</span> sl<span class="token punctuation">.</span><span class="token function">tryOptimisticRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Data data <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sl<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stamp <span class="token operator">=</span> sl<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                data <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                sl<span class="token punctuation">.</span><span class="token function">unlockRead</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// …</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，这里的writeLock和unLockWrite一定要保证成对调用。<br>你可能很好奇这些显式锁的实现机制， Java并发包内的各种同步工具，不仅仅是各种Lock，其他的如<a href="https://docs.oracle.com/javase/10/docs/api/java/util/concurrent/Semaphore.html" target="_blank" rel="noopener">Semaphore</a>、 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/concurrent/CountDownLatch.html" target="_blank" rel="noopener">CountDownLatch</a>，甚至是早期的<a href="https://docs.oracle.com/javase/10/docs/api/java/util/concurrent/FutureTask.html" target="_blank" rel="noopener">FutureTask</a> 等，都是基于一种AQS框架。 </p><h1 id="synchronized-和-ReetrantLock-区别"><a href="#synchronized-和-ReetrantLock-区别" class="headerlink" title="synchronized 和 ReetrantLock 区别"></a>synchronized 和 ReetrantLock 区别</h1><p>synchronized是Java内建的同步机制，所以也有人称其为Intrinsic Locking，它提供了互斥的语义和可见性，当一个线程已经获取当前锁时，其他试图获取的线程只能等待或者阻塞在那里。</p><p>在Java 5以前， synchronized是仅有的同步手段，在代码中， synchronized可以用来修饰方法，也可以使用在特定的代码块儿上，本质上synchronized方法等同于把方法全部语句用synchronized块包起来。</p><p>ReentrantLock，通常翻译为再入锁，是Java 5提供的锁实现，它的语义和synchronized基本相同。再入锁通过代码直接调用lock()方法获取，代码书写也更加灵活。与此同时， ReentrantLock提供了很多实用的方法，能够实现很多synchronized无法做到的细节控制，比如可以控制fairness，也就是公平性，或者利用定义条件等。但是，编码中也需要注意，必须要明确调用unlock()方法释放，不然就会一直持有该锁。</p><p>synchronized和ReentrantLock的性能不能一概而论，早期版本synchronized在很多场景下性能相差较大，在后续版本进行了较多改进，在低竞争场景中表现可能优于ReentrantLock。 </p><h2 id="深入"><a href="#深入" class="headerlink" title="深入"></a>深入</h2><p>锁作为并发的基础工具之一，你至少需要掌握：</p><ul><li>理解什么是线程安全。</li><li>synchronized、 ReentrantLock等机制的基本使用与案例。</li></ul><p>更近一步，还需要：</p><ul><li>掌握synchronized、 ReentrantLock底层实现；理解锁膨胀、降级；理解偏斜锁、自旋锁、轻量级锁、重量级锁等概念。</li><li>掌握并发包中java.util.concurrent.lock各种不同实现和案例分析。</li></ul><p>首先，需要理解什么是线程安全（参考最上面）。</p><p>看看下面的代码段，分析一下原子性需求体现在哪里。这个例子通过取两次数值然后进行对比，来模拟两次对共享状态的操作。<br>你可以编译并执行，可以看到，仅仅是两个线程的低度并发，就非常容易碰到former和latter不相等的情况。这是因为，在两次取值的过程中，其他线程可能已经修改了sharedState。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadSafeSample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> sharedState<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nonSafeAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>sharedState <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> former <span class="token operator">=</span> sharedState<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> latter <span class="token operator">=</span> sharedState<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>former <span class="token operator">!=</span> latter <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Observed data race, former is "</span> <span class="token operator">+</span> former <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token string">"latter is "</span> <span class="token operator">+</span> latter<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        ThreadSafeSample sample <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadSafeSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread threadA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sample<span class="token punctuation">.</span><span class="token function">nonSafeAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        Thread threadB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sample<span class="token punctuation">.</span><span class="token function">nonSafeAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadB<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadB<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是电脑上的运行结果：</p><pre class="line-numbers language-shell"><code class="language-shell">C:\>c:\jdk-9\bin\java ThreadSafeSampleObserved data race, former is 13097, latter is 13099<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将两次赋值过程用synchronized保护起来，使用this作为互斥单元，就可以避免别的线程并发的去修改sharedState。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> former <span class="token operator">=</span> sharedState <span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> latter <span class="token operator">=</span> sharedState<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// …</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果用javap反编译，可以看到类似片段，利用monitorenter/monitorexit对实现了同步的语义：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token number">11</span><span class="token operator">:</span> astore_1<span class="token number">12</span><span class="token operator">:</span> monitorenter<span class="token number">13</span><span class="token operator">:</span> aload_0<span class="token number">14</span><span class="token operator">:</span> dup<span class="token number">15</span><span class="token operator">:</span> getfield #<span class="token number">2</span> <span class="token comment" spellcheck="true">// Field sharedState:I</span><span class="token number">18</span><span class="token operator">:</span> dup_x1…<span class="token number">56</span><span class="token operator">:</span> monitorexit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码中使用synchronized非常便利，如果用来修饰静态方法，其等同于利用下面代码将方法体囊括进来：</p><blockquote><p>synchronized (ClassName.class) {}</p></blockquote><p>再来看看ReentrantLock。你可能好奇什么是再入？它是表示当一个线程试图获取一个它已经获取的锁时，这个获取动作就自动成功，这是对锁获取粒度的一个概念，也就是锁的持有是以线程为单位而不是基于调用次数。 Java锁实现强调再入性是为了和pthread的行为进行区分。<br>再入锁可以设置公平性（fairness），我们可在创建再入锁时选择是否是公平的</p><blockquote><p>ReentrantLock fairLock = new ReentrantLock(true);</p></blockquote><p>这里所谓的公平性是指在竞争场景中，当公平性为真时，会倾向于将锁赋予等待时间最久的线程。公平性是减少线程“饥饿”（个别线程长期等待锁，但始终无法获取）情况发生的一个办法。</p><p>如果使用synchronized，我们根本无法进行公平性的选择，其永远是不公平的，这也是主流操作系统线程调度的选择。通用场景中，公平性未必有想象中的那么重要， Java默认的调度策略很少会导致 “饥饿”发生。与此同时，若要保证公平性则会引入额外开销，自然会导致一定的吞吐量下降。所以，我建议只有当你的程序确实有公平性需要的时候，才有必要指定它。</p><p>我们再从日常编码的角度学习下再入锁。为保证锁释放，每一个lock()动作，我建议都立即对应一个try-catch-fnally，典型的代码结构如下，这是个良好的习惯。</p><pre class="line-numbers language-java"><code class="language-java">ReentrantLock fairLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这里是演示创建公平锁，一般情况不需要。</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// do something</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    fairLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ReentrantLock相比synchronized，因为可以像普通对象一样使用，所以可以利用其提供的各种便利方法，进行精细的同步操作，甚至是实现synchronized难以表达的用例，如：</p><ul><li>带超时的获取锁尝试。</li><li>可以判断是否有线程，或者某个特定线程，在排队等待获取锁。</li><li>可以响应中断请求。</li><li>…</li></ul><p>这里特别想强调条件变量（java.util.concurrent.Condition），如果说ReentrantLock是synchronized的替代选择， Condition则是将wait、 notify、 notifyAll等操作转化为相应的对象，将复杂而晦涩的同步操作转变为直观可控的对象行为。</p><p>条件变量最为典型的应用场景就是标准类库中的ArrayBlockingQueue等。<br>我们参考下面的源码，首先，通过再入锁获取条件变量：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** Condition for waiting takes */</span><span class="token keyword">private</span> fnal Condition notEmpty<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** Condition for waiting puts */</span><span class="token keyword">private</span> fnal Condition notFull<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">ArrayBlockingQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">,</span> <span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>capacity <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span>fair<span class="token punctuation">)</span><span class="token punctuation">;</span>    notEmpty <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    notFull <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两个条件变量是从同一再入锁创建出来，然后使用在特定操作中，如下面的take方法，判断和等待条件满足：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> E <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        notEmpty<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> fnally <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当队列为空时，试图take的线程的正确行为应该是等待入队发生，而不是直接返回，这是BlockingQueue的语义，使用条件notEmpty就可以优雅地实现这一逻辑。<br>那么，怎么保证入队触发后续take操作呢？请看enqueue实现：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// assert lock.isHeldByCurrentThread();</span><span class="token comment" spellcheck="true">// assert lock.getHoldCount() == 1;</span><span class="token comment" spellcheck="true">// assert items[putIndex] == null;</span>fnal Object<span class="token punctuation">[</span><span class="token punctuation">]</span> items <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">;</span>items<span class="token punctuation">[</span>putIndex<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>putIndex <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span> putIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    count<span class="token operator">++</span><span class="token punctuation">;</span>    notEmpty<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 通知等待的线程，非空条件已经满足</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过signal/await的组合，完成了条件判断和通知等待线程，非常顺畅就完成了状态流转。注意， signal和await成对调用非常重要，不然假设只有await动作，线程会一直等待直到被打断（interrupt）。</p><p>从性能角度， synchronized早期的实现比较低效，对比ReentrantLock，大多数场景性能都相差较大。但是在Java 6中对其进行了非常多的改进，可以参考性能对比，在高竞争情况下， ReentrantLock仍然有一定优势。我在下一讲进行详细分析，会更有助于理解性能差异产生的内在原因。在大多数情况下，无需纠结于性能，还是考虑代码书写结构的便利性、可维护性等。</p><h1 id="CAS-乐观锁"><a href="#CAS-乐观锁" class="headerlink" title="CAS 乐观锁"></a>CAS 乐观锁</h1><h1 id="ABA-问题"><a href="#ABA-问题" class="headerlink" title="ABA 问题"></a>ABA 问题</h1><h1 id="乐观锁的业务场景以及实现方式"><a href="#乐观锁的业务场景以及实现方式" class="headerlink" title="乐观锁的业务场景以及实现方式"></a>乐观锁的业务场景以及实现方式</h1>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础篇-篇三（线程）</title>
      <link href="/2019/09/10/Java%E5%9F%BA%E7%A1%80%E7%AF%87-%E7%AF%87%E4%B8%89%EF%BC%88%E7%BA%BF%E7%A8%8B%EF%BC%89/"/>
      <url>/2019/09/10/Java%E5%9F%BA%E7%A1%80%E7%AF%87-%E7%AF%87%E4%B8%89%EF%BC%88%E7%BA%BF%E7%A8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="基础篇（一）"><a href="#基础篇（一）" class="headerlink" title="基础篇（一）"></a>基础篇（一）</h1><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><a id="more"></a><h3 id="创建线程的方式以及实现"><a href="#创建线程的方式以及实现" class="headerlink" title="创建线程的方式以及实现"></a>创建线程的方式以及实现</h3><h3 id="sleep-join-yield-区别"><a href="#sleep-join-yield-区别" class="headerlink" title="sleep() join() yield() 区别"></a><code>sleep()</code> <code>join()</code> <code>yield()</code> 区别</h3><h3 id="CountDownLatch-原理"><a href="#CountDownLatch-原理" class="headerlink" title="CountDownLatch 原理"></a>CountDownLatch 原理</h3><h3 id="Cyclicbarrier-原理"><a href="#Cyclicbarrier-原理" class="headerlink" title="Cyclicbarrier 原理"></a>Cyclicbarrier 原理</h3><h3 id="Sernaphore-原理"><a href="#Sernaphore-原理" class="headerlink" title="Sernaphore 原理"></a>Sernaphore 原理</h3><h3 id="Exchanger-原理"><a href="#Exchanger-原理" class="headerlink" title="Exchanger 原理"></a>Exchanger 原理</h3><h3 id="CyclicBarrier-和-CountDownLatch-区别"><a href="#CyclicBarrier-和-CountDownLatch-区别" class="headerlink" title="CyclicBarrier 和 CountDownLatch 区别"></a>CyclicBarrier 和 CountDownLatch 区别</h3><h3 id="ThreadLocal-原理分析"><a href="#ThreadLocal-原理分析" class="headerlink" title="ThreadLocal 原理分析"></a>ThreadLocal 原理分析</h3><h3 id="线程池的实现原理"><a href="#线程池的实现原理" class="headerlink" title="线程池的实现原理"></a>线程池的实现原理</h3><h3 id="线程池的几种方式"><a href="#线程池的几种方式" class="headerlink" title="线程池的几种方式"></a>线程池的几种方式</h3><h3 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h3>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础篇-篇二（集合）</title>
      <link href="/2019/09/10/Java%E5%9F%BA%E7%A1%80%E7%AF%87-%E7%AF%87%E4%BA%8C%EF%BC%88%E9%9B%86%E5%90%88%EF%BC%89/"/>
      <url>/2019/09/10/Java%E5%9F%BA%E7%A1%80%E7%AF%87-%E7%AF%87%E4%BA%8C%EF%BC%88%E9%9B%86%E5%90%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><a id="more"></a><h3 id="List-Set-和-Map区别"><a href="#List-Set-和-Map区别" class="headerlink" title="List Set 和 Map区别"></a>List Set 和 Map区别</h3><h3 id="ArrayList-和-LinkedList-和-Vector-区别"><a href="#ArrayList-和-LinkedList-和-Vector-区别" class="headerlink" title="ArrayList 和 LinkedList 和 Vector 区别"></a>ArrayList 和 LinkedList 和 Vector 区别</h3><h3 id="HashMap-和-HashSet-和-Hashtable-和-ConcurrentHashMap-区别"><a href="#HashMap-和-HashSet-和-Hashtable-和-ConcurrentHashMap-区别" class="headerlink" title="HashMap 和 HashSet 和 Hashtable 和 ConcurrentHashMap 区别"></a>HashMap 和 HashSet 和 Hashtable 和 ConcurrentHashMap 区别</h3><h3 id="HashMap-的工作原理和代码实现"><a href="#HashMap-的工作原理和代码实现" class="headerlink" title="HashMap 的工作原理和代码实现"></a>HashMap 的工作原理和代码实现</h3><h3 id="ConcurrentHashMap-的工作原理和代码实现"><a href="#ConcurrentHashMap-的工作原理和代码实现" class="headerlink" title="ConcurrentHashMap 的工作原理和代码实现"></a>ConcurrentHashMap 的工作原理和代码实现</h3>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础篇-篇一（基本功）</title>
      <link href="/2019/09/10/Java%E5%9F%BA%E7%A1%80%E7%AF%87-%E7%AF%87%E4%B8%80%EF%BC%88%E5%9F%BA%E6%9C%AC%E5%8A%9F%EF%BC%89/"/>
      <url>/2019/09/10/Java%E5%9F%BA%E7%A1%80%E7%AF%87-%E7%AF%87%E4%B8%80%EF%BC%88%E5%9F%BA%E6%9C%AC%E5%8A%9F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="基础篇（一）"><a href="#基础篇（一）" class="headerlink" title="基础篇（一）"></a>基础篇（一）</h1><h2 id="基本功"><a href="#基本功" class="headerlink" title="基本功"></a>基本功</h2><a id="more"></a><h3 id="面向对象的特征"><a href="#面向对象的特征" class="headerlink" title="面向对象的特征"></a>面向对象的特征</h3><ul><li>封装的目的是隐藏事务内部的实现细节，以便提高安全性和简化编程。封装提供了合理的边界，避免外部调用者接触到内部的细节。我们在日常开发中，因为无意间暴露了细节导致的难缠bug太多了，比如在多线程环境暴露内部状态，导致的并发修改问题。从另外一个角度看，封装这种隐藏，也提供了简化的界面，避免太多无意义的细节浪费调用者的精力。</li><li>继承是代码复用的基础机制，类似于我们对于马、白马、黑马的归纳总结。但要注意，继承可以看作是非常紧耦合的一种关系，父类代码修改，子类行为也会变动。在实践中，过度滥用继承，可能会起到反效果。</li><li>多态，你可能立即会想到重写（override）和重载（overload）、向上转型。简单说，重写是父子类中相同名字和参数的方法，不同的实现；重载则是相同名字的方法，但是不同的参数，本质上这些方法签名是不一样的，为了更好说明，请参考下面的样例代码 </li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 输入参数不同，意味着方法签名不同，重载的体现</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">doSomething</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// return类型不一样，编译不能通过</span><span class="token keyword">public</span> <span class="token keyword">short</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个小问题，方法名称和参数一致，但是返回值不同，这种情况在Java代码中算是有效的重载吗？ 答案是不是的，编译都会出错的。<br>进行面向对象编程，掌握基本的设计原则是必须的，我今天介绍最通用的部分，也就是所谓的<em>S.O.L.I.D</em>原则。</p><ul><li>单一职责（Single Responsibility），类或者对象最好是只有单一职责，在程序设计中如果发现某个类承担着多种义务，可以考虑进行拆分。</li><li>开关原则（Open-Close, Open for extension, close for modification），设计要对扩展开放，对修改关闭。换句话说，程序设计应保证平滑的扩展性，尽量避免因为新增同类功能而修改已有实现，这样可以少产出些回归（regression）问题。</li><li>里氏替换（Liskov Substitution），这是面向对象的基本要素之一，进行继承关系抽象时，凡是可以用父类或者基类的地方，都可以用子类替换。</li><li>接口分离（Interface Segregation），我们在进行类和接口设计时，如果在一个接口里定义了太多方法，其子类很可能面临两难，就是只有部分方法对它是有意义的，这就破坏了程序的内聚性。<br>对于这种情况，可以通过拆分成功能单一的多个接口，将行为进行解耦。在未来维护中，如果某个接口设计有变，不会对使用其他接口的子类构成影响。</li><li>依赖反转（Dependency Inversion），实体应该依赖于抽象而不是实现。也就是说高层次模块，不应该依赖于低层次模块，而是应该基于抽象。实践这一原则是保证产品代码之间适当耦合度的法宝。 </li></ul><h4 id="OOP原则实践中的取舍"><a href="#OOP原则实践中的取舍" class="headerlink" title="OOP原则实践中的取舍"></a>OOP原则实践中的取舍</h4><p>值得注意的是，现代语言的发展，很多时候并不是完全遵守前面的原则的，比如， Java 10中引入了本地方法类型推断和var类型。按照，里氏替换原则，我们通常这样定义变量：</p><blockquote><p>List<String> list = new ArrayList&lt;&gt;(); </p></blockquote><p>如果使用var类型，可以简化为</p><p>var lis = new ArrayLis<String>();</p><p>但是， list 实际会被推断为 <strong>“ArrayList &lt; String &gt;”</strong></p><blockquote><p>ArrayList<String> list = new ArrayList<String>();</p></blockquote><p>理论上，这种语法上的便利，其实是增强了程序对实现的依赖，但是微小的类型泄漏却带来了书写的变量和代码可读性的提高，所以，实践中我们还是要按照得失利弊进行选择，而不是一味得遵循原则。</p><h5 id="OOP原则在面试题目中的分析"><a href="#OOP原则在面试题目中的分析" class="headerlink" title="OOP原则在面试题目中的分析"></a>OOP原则在面试题目中的分析</h5><p>我在以往面试中发现，即使是有多年编程经验的工程师，也还没有真正掌握面向对象设计的基本的原则，如开关原则（Open-Close）。看看下面这段代码，改编自朋友圈盛传的某伟大公司产品代码，你觉得可以利用面向对象设计原则如何改进？</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VIPCenter</span> <span class="token punctuation">{</span><span class="token keyword">void</span> <span class="token function">serviceVIP</span><span class="token punctuation">(</span>T extend User user<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token keyword">instanceof</span> <span class="token class-name">SlumDogVIP</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 穷X VIP，活动抢的那种</span>    <span class="token comment" spellcheck="true">// do somthing</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token keyword">instanceof</span> <span class="token class-name">RealVIP</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// do somthing</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码的一个问题是，业务逻辑集中在一起，当出现新的用户类型时，比如，大数据发现了我们是肥羊，需要去收获一下， 这就需要直接去修改服务方法代码实现，这可能会意外影响不相关的某个用户类型逻辑。利用开关原则，我们可以尝试改造为下面的代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VIPCenter</span> <span class="token punctuation">{</span><span class="token keyword">private</span> Map<span class="token operator">&lt;</span>User<span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span> ServiceProvider<span class="token operator">></span> providers<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">serviceVIP</span><span class="token punctuation">(</span>T extend User user） <span class="token punctuation">{</span>        providers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">ServiceProvider</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>T extend User user<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SlumDogVIPServiceProvider</span> <span class="token keyword">implements</span> <span class="token class-name">ServiceProvider</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>T extend User user<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// do somthing</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">RealVIPServiceProvider</span> <span class="token keyword">implements</span> <span class="token class-name">ServiceProvider</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>T extend User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// do something</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的示例，将不同对象分类的服务方法进行抽象，把业务逻辑的紧耦合关系拆开，实现代码的隔离保证了方便的扩展。</p><h3 id="int和Integer的区别"><a href="#int和Integer的区别" class="headerlink" title="int和Integer的区别"></a>int和Integer的区别</h3><p>int是我们常说的整形数字，是Java的8个原始数据类型（Primitive Types， boolean、 byte 、 short、 char、 int、 float、 double、 long）之一。 Java语言虽然号称一切都是对象，但原始数据类型是例外。</p><p>Integer是int对应的包装类，它有一个int类型的字段存储数据，并且提供了基本操作，比如数学运算、 int和字符串之间转换等。在Java 5中，引入了自动装箱和自动拆箱功能（boxing/unboxing）， Java可以根据上下文，自动进行转换，极大地简化了相关编程。</p><p>关于Integer的值缓存，这涉及Java 5中另一个改进。构建Integer对象的传统方式是直接调用构造器，直接new一个对象。但是根据实践，我们发现大部分数据操作都是集中在有限的、较小的数值范围，因而，在Java 5中新增了静态工厂方法<code>valueOf</code>，在调用它的时候会利用一个缓存机制，带来了明显的性能改进。按照Javadoc， 这个值默认缓存是-128到127之间。</p><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><ul><li>自动装箱/自动拆箱是发生在什么阶段？</li><li>自动装箱的时候，缓存机制起作用吗？</li><li>为什么需要原始数据类型， Java的对象似乎也很高效，应用中具体会产生哪些差异？</li><li>阅读过Integer源码吗？分析下类或某些方法的设计要点。  </li></ul><ol><li><p>理解自动装箱、拆箱<br>自动装箱实际上算是一种语法糖，可以简单理解为平台为我们自动进行了一些转换，保证不同的写法在运行时等价，它们发生在编译阶段，也就是生成的字节码是一致的。</p><p>像前面提到的整数， 替我们自动把装箱转换为 <code>Integer.valueOf()</code>，把拆箱替换为 <code>Integer.intValue()</code>，这似乎这也顺道回答了第二个问题，既然调用的是 <code>Integer.valueOf</code>，<br>自然能够得到缓存的好处啊。<br>如何程序化的验证上面的结论呢？<br>你可以写一段简单的程序包含下面两句代码，然后反编译一下。当然，这是一种从表现倒推的方法，大多数情况下，我们还是直接参考规范文档会更加可靠，毕竟软件承诺的是遵循规范，而不是保持当前行为。</p><pre class="line-numbers language-java"><code class="language-java">Integer integer <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> unboxing <span class="token operator">=</span> integer <span class="token operator">++</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>反编译输出： </p><pre class="line-numbers language-java"><code class="language-java"><span class="token number">1</span><span class="token operator">:</span> invokestatic #<span class="token number">2</span> <span class="token comment" spellcheck="true">// Method</span>java<span class="token operator">/</span>lang<span class="token operator">/</span>Integer<span class="token punctuation">.</span>valueOf<span class="token operator">:</span><span class="token punctuation">(</span>I<span class="token punctuation">)</span>Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>Integer<span class="token punctuation">;</span><span class="token number">8</span><span class="token operator">:</span> invokevirtual #<span class="token number">3</span> <span class="token comment" spellcheck="true">// Method</span>java<span class="token operator">/</span>lang<span class="token operator">/</span>Integer<span class="token punctuation">.</span>intValue<span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span>I<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这种缓存机制并不是只有Integer才有，同样存在于其他的一些包装类，比如：</p><ul><li><p>Boolean，缓存了true/false对应实例，确切说，只会返回两个常量实例Boolean.TRUE/FALSE。</p></li><li><p>Short，同样是缓存了-128到127之间的数值。</p></li><li><p>Byte，数值有限，所以全部都被缓存。</p></li><li><p>Character，缓存范围<code>&#39;\u0000&#39;</code>到 <code>&#39;\u007F&#39;</code>。 原则上， 建议避免无意中的装箱、拆箱行为，尤其是在性能敏感的场合，创建10万个Java对象和10万个整数的开销可不是一个数量级的，不管是内存使用还是处理速度，光是对象头的空间占用就已经是数量级的差距了。</p></li></ul><p>我们其实可以把这个观点扩展开，使用原始数据类型、数组甚至本地代码实现等，在性能极度敏感的场景往往具有比较大的优势，用其替换掉包装类、动态数组（如ArrayList）等可以作为性能优化的备选项。一些追求极致性能的产品或者类库，会极力避免创建过多对象。当然，在大多数产品代码里，并没有必要这么做，还是以开发效率优先。以我们经常会使用到的计数器实现为例，下面是一个常见的线程安全计数器实现。 </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> AtomicLong counter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        counter<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果利用原始数据类型，可以将其修改为 </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">CompactCounter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> counter<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> AtomicLongFieldUpdater<span class="token operator">&lt;</span>CompactCounter<span class="token operator">></span> updater <span class="token operator">=</span> AtomicLongFieldUpdater<span class="token punctuation">.</span><span class="token function">newUpdater</span><span class="token punctuation">(</span>CompactCounter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"counter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        updater<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="2"><li><p>分析源码</p><pre><code> 整体看一下Integer 的职责，它主要包括各种基础的常量，比如最大值、最小值、位数等；前面提到的各种静态工厂方法；获取环境变量数值的方法；各种转换方法，比如     转换为不同进制的字符串，如进制，或者反过来的解析方法等。我们进一步来看一些有意思的地方。</code></pre><p> 首先，继续深挖缓存， 的缓存范围虽然默认是到，但是在特别的应用场景，比如我们明确知道应用会频繁使用更大的数值，这时候应该怎么办呢？</p><p> 缓存上限值实际是可以根据需要调整的， 提供了参数设置：</p></li></ol><blockquote><p>-XX:AutoBoxCacheMax=N </p></blockquote><p>这些实现，都体现在 <a href="http://hg.openjdk.java.net/jdk/jdk/file/26ac622a4cab/src/java.base/share/classes/java/lang/Integer.java" target="_blank" rel="noopener">java.lang.Integer </a>源码之中，并实现在的静态初始化块里。</p><p>第二，字符串是不可变的，保证了基本的信息安全和并发编程中的线程安全。如果你去看包装类里存储数值的成员变量，你会发现，不管是 Integer 还是 Boolean 等，都被声明为<code>“private final”</code>，所以，它们同样是不可变类型！</p><p>这种设计是可以理解的，或者说是必须的选择。想象一下这个应用场景，比如Integer提供了<code>getInteger()</code> 方法，用于方便地读取系统属性，我们可以用属性来设置服务器某个服务的端口，如果我可以轻易地把获取到的Integer对象改变为其他数值，这会带来产品可靠性方面的严重问题。 </p><p>第三， Integer等包装类，定义了类似 SIZE 或者 BYTES 这样的常量，这反映了什么样的设计考虑呢？如其他语言，比如C、 C++，类似整数的位数，其实是不确定的，可能在不同的平台，比如32位或者64位平台，存在非常大的不同。那么，在32位JDK或者64位JDK里，数据位数会有不同吗？或者说，这个问题可以扩展为，我使用32位JDK开发编译的程序，运行在64位JDK上，需要做什么特别的移植工作吗？</p><p>其实，这种移植对于Java来说相对要简单些，因为原始数据类型是不存在差异的，这些明确定义在Java语言规范里面，不管是32位还是64位环境，开发者无需担心数据的位数差异。</p><p>对于应用移植，虽然存在一些底层实现的差异，比如64位HotSpot JVM里的对象要比32位HotSpot JVM大（具体区别取决于不同JVM实现的选择），但是总体来说，并没有行为差异，应用移植还是可以做到宣称的“一次书写，到处执行”，应用开发者更多需要考虑的是容量、能力等方面的差异。 </p><ol start="3"><li>原始类型线程安全<br>前面提到了线程安全设计，原始数据类型操作是不是线程安全的呢？<br>这里可能存在着不同层面的问题：</li></ol><ul><li>原始数据类型的变量，显然要使用并发相关手段，才能保证线程安全，这些我会在专栏后面的并发主题详细介绍。如果有线程安全的计算需要，建议考虑使用类似、 这样的线程安全类。</li><li>特别的是，部分比较宽的数据类型，比如、 ，甚至不能保证更新操作的原子性，可能出现程序读取到只更新了一半数据位的数值！     </li></ul><ol start="4"><li><p>原始数据类型和引用类型局限性<br>前面我谈了非常多的技术细节，最后再从平台发展的角度来看看，原始数据类型、对象的局限性和演进。</p><p>对于应用开发者，设计复杂而灵活的类型系统似乎已经习以为常了。但是坦白说，毕竟这种类型系统的设计是源于很多年前的技术决定，现在已经逐渐暴露出了一些副作用，例如：</p></li></ol><ul><li>原始数据类型和泛型并不能配合使用<br>这是因为的泛型某种程度上可以算作伪泛型，它完全是一种编译期的技巧， 编译期会自动将类型转换为对应的特定类型，这就决定了使用泛型，必须保证相应类型可以转换为Object。</li><li>无法高效地表达数据，也不便于表达复杂的数据结构，比如vector和tuple<br>我们知道的对象都是引用类型，如果是一个原始数据类型数组，它在内存里是一段连续的内存，而对象数组则不然，数据存储的是引用，对象往往是分散地存储在堆的不同位置。这种设计虽然带来了极大灵活性，但是也导致了数据操作的低效，尤其是无法充分利用现代 CPU 缓存机制。</li></ul><p>Java 为对象内建了各种多态、线程安全等方面的支持，但这不是所有场合的需求，尤其是数据处理重要性日益提高，更加高密度的值类型是非常现实的需求。</p><h3 id="final、finally、finalize的区别"><a href="#final、finally、finalize的区别" class="headerlink" title="final、finally、finalize的区别"></a>final、finally、finalize的区别</h3><p>final 可以用来修饰类、方法、变量，分别有不同的意义， final修饰的class代表不可以继承扩展， final的变量是不可以修改的，而final的方法也是不可以重写的（override）。</p><p>finally 则是Java保证重点代码一定要被执行的一种机制。我们可以使用<code>try-finally</code>或者<code>try-catch-finally</code>来进行类似关闭JDBC连接、保证unlock锁等动作。</p><p>finalize 是基础类<code>java.lang.Object</code>的一个方法，它的设计目的是保证对象在被垃圾收集前完成特定资源的回收。 finalize机制现在已经不推荐使用，并且在JDK 9开始被标记为<code>deprecated</code>。 </p><p>推荐使用final关键字来明确表示我们代码的语义、逻辑意图，这已经被证明在很多场景下是非常好的实践，比如：</p><ul><li><p>我们可以将方法或者类声明为final，这样就可以明确告知别人，这些行为是不许修改的。</p><p>如果你关注过Java核心类库的定义或源码， 有没有发现 <code>java.lang</code> 包下面的很多类，相当一部分都被声明成为final class？在第三方类库的一些基础类中同样如此，这可以有效避免API使用者更改基础功能，某种程度上，这是保证平台安全的必要手段。</p></li><li><p>使用final修饰参数或者变量，也可以清楚地避免意外赋值导致的编程错误，甚至，有人明确推荐将所有方法参数、本地变量、成员变量声明成final。</p></li><li><p>final变量产生了某种程度的不可变（immutable）的效果，所以，可以用于保护只读数据，尤其是在并发编程中，因为明确地不能再赋值final变量，有利于减少额外的同步开销，也可以省去一些防御性拷贝的必要。</p></li></ul><p>final也许会有性能的好处，很多文章或者书籍中都介绍了可在特定场景提高性能，比如，利用final可能有助于JVM将方法进行内联，可以改善编译器进行条件编译的能力等等。坦白说，很多类似的结论都是基于假设得出的，比如现代高性能JVM（如HotSpot）判断内联未必依赖final的提示，要相信JVM还是非常智能的。类似的， final字段对性能的影响，大部分情况下，并没有考虑的必要。</p><p>从开发实践的角度，我不想过度强调这一点，这是和JVM的实现很相关的，未经验证比较难以把握。我的建议是，在日常开发中，除非有特别考虑，不然最好不要指望这种小技巧带来的所谓性能好处，程序最好是体现它的语义目的。如果你确实对这方面有兴趣，可以查阅相关资料，我就不再赘述了，不过千万别忘了验证一下。</p><p>对于finally，明确知道怎么使用就足够了。需要关闭的连接等资源，更推荐使用Java 7中添加的try-with-resources语句，因为通常Java平台能够更好地处理异常情况，编码量也要少很多，何乐而不为呢。</p><p>另外，我注意到有一些常被考到的finally问题（也比较偏门），至少需要了解一下。比如，下面代码会输出什么？ </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// do something</span>    Sysem<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“Print from <span class="token keyword">finally</span>”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面finally里面的代码可不会被执行的哦，这是一个特例。</p><p>对于finalize，我们要明确它是不推荐使用的，业界实践一再证明它不是个好的办法，在Java 9中，甚至明确将Object.finalize()标记为deprecated！如果没有特别的原因，不要实现finalize方法，也不要指望利用它来进行资源回收。</p><p>为什么呢？简单说，你无法保证finalize什么时候执行，执行的是否符合预期。使用不当会影响性能，导致程序死锁、挂起等。</p><p>通常来说，利用上面的提到的try-with-resources或者try-finally机制，是非常好的回收资源的办法。如果确实需要额外处理，可以考虑Java提供的Cleaner机制或者其他替代方法。接下来，我来介绍更多设计考虑和实践细节。</p><p>知识扩展</p><ol><li><p>注意， final 不是 immutable！<br>在前面介绍了final在实践中的益处，需要注意的是， final 并不等同于 immutable，比如下面这段代码： </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> strList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>strList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>strList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> unmodifableStrList <span class="token operator">=</span> List<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>unmodifiableStrList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"again"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>​    final 只能约束 <code>strList</code> 这个引用不可以被赋值，但是 <code>strList</code> 对象行为不被 <code>final</code> 影响，添加元素等操作是完全正常的。如果我们真的希望对象本身是不可变的，那么需要相应的类支持不可变的行为。在上面这个例子中， <code>List.of</code>方法创建的本身就是不可变 <code>List</code>，最后那句add是会在运行时抛出异常的。</p><p>Immutable 在很多场景是非常棒的选择，某种意义上说， Java语言目前并没有原生的不可变支持，如果要实现 immutable 的类，我们需要做到：</p><ul><li><p>将 class 自身声明为 <code>final</code> ，这样别人就不能扩展来绕过限制了。</p></li><li><p>将所有成员变量定义为 private 和 final ，并且不要实现 <code>setter</code> 方法。</p></li><li><p>通常构造对象时，成员变量使用深度拷贝来初始化，而不是直接赋值，这是一种防御措施，因为你无法确定输入对象不被其他人修改。</p></li><li><p>如果确实需要实现 <code>getter</code> 方法，或者其他可能会返回内部状态的方法，使用 <code>copy-on-write</code> 原则，创建私有的copy。</p><p>这些原则是不是在并发编程实践中经常被提到？的确如此。</p><p>关于setter/getter方法，很多人喜欢直接用IDE一次全部生成，建议最好是你确定有需要时再实现。</p></li></ul><ol start="2"><li><p>finalize真的那么不堪？<br> 前面简单介绍了finalize是一种已经被业界证明了的非常不好的实践，那么为什么会导致那些问题呢？</p><p> finalize的执行是和垃圾收集关联在一起的，一旦实现了非空的finalize方法，就会导致相应对象回收呈现数量级上的变慢，有人专门做过benchmark，大概是40~50倍的下降。</p><p> 因为， finalize 被设计成在对象被垃圾收集前调用，这就意味着实现了 <code>finalize</code> 方法的对象是个“特殊公民”， JVM要对它进行额外处理。 finalize 本质上成为了快速回收的阻碍者，可能导致你的对象经过多个垃圾收集周期才能被回收。</p><p> 有人也许会问，我用 <code>System.runFinalization()</code> 告诉JVM积极一点，是不是就可以了？也许有点用，但是问题在于，这还是不可预测、不能保证的，所以本质上还是不能指望。实践中，因为 finalize 拖慢垃圾收集，导致大量对象堆积，也是一种典型的导致 OOM 的原因。</p><p> 从另一个角度，我们要确保回收资源就是因为资源都是有限的，垃圾收集时间的不可预测，可能会极大加剧资源占用。这意味着对于消耗非常高频的资源，千万不要指望finalize去承担资源释放的主要职责，最多让finalize作为最后的“守门员”，况且它已经暴露了如此多的问题。这也是为什么我推荐， 资源用完即显式释放，或者利用资源池来尽量重用。</p><p> finalize还会掩盖资源回收时的出错信息，我们看下面一段JDK的源代码，截取 <code>java.lang.ref.Finalizer</code></p></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">runFinalizer</span><span class="token punctuation">(</span>JavaLangAccess jla<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// ... 省略部分代码</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    Object finalizee <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>finalizee <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>finalizee insanceof java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Enum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        jla<span class="token punctuation">.</span><span class="token function">invokeFinalize</span><span class="token punctuation">(</span>finalizee<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Clear sack slot containing this variable, to decrease</span>        <span class="token comment" spellcheck="true">// the chances of false retention with a conservative GC</span>        finalizee <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的 Throwable 是被生吞了的！ 也就意味着一旦出现异常或者出错，你得不到任何有效信息。况且， Java在 finalize 阶段也没有好的方式处理任何信息，不然更加不可预测。</p><ol start="3"><li><p>有什么机制可以替换 finalize 吗？<br>Java平台目前在逐步使用<code>java.lang.ref.Cleaner</code> 来替换掉原有的<code>finalize</code>实现。 Cleaner的实现利用了<em>幻象引用（PhantomReference）*，这是一种常见的所谓 *post-mortem</em> 清理机制。利用幻象引用和引用队列，我们可以保证对象被彻底销毁前做一些类似资源回收的工作，比如关闭文件描述符（操作系统有限的资源），它比finalize更加轻量、更加可靠。</p><p>吸取了 finalize 里的教训，每个 Cleaner 的操作都是独立的，它有自己的运行线程，所以可以避免意外死锁等问题。</p><p>实践中，我们可以为自己的模块构建一个 Cleaner，然后实现相应的清理逻辑。下面是JDK自身提供的样例程序： </p></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CleaningExample</span> <span class="token keyword">implements</span> <span class="token class-name">AutoCloseable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// A cleaner, preferably one shared within a library</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Cleaner cleaner <span class="token operator">=</span> <span class="token operator">&lt;</span>cleaner<span class="token operator">></span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">State</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        <span class="token function">State</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// initialize State needed for cleaning action</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// cleanup action accessing State, executed at most once</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> State<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Cleaner<span class="token punctuation">.</span>Cleanable cleanable    <span class="token keyword">public</span> <span class="token function">CleaningExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">State</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cleanable <span class="token operator">=</span> cleaner<span class="token punctuation">.</span><span class="token function">regiser</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> sate<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cleanable<span class="token punctuation">.</span><span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，从可预测性的角度来判断， Cleaner或者幻象引用改善的程度仍然是有限的，如果由于种种原因导致幻象引用堆积，同样会出现问题。所以， Cleaner适合作为一种最后的保证手段，而不是完全依赖Cleaner进行资源回收，不然我们就要再做一遍finalize的噩梦了。</p><p>我也注意到很多第三方库自己直接利用幻象引用定制资源收集，比如广泛使用的MySQL JDBC driver之一的 <em>mysql-connector-j</em>，就利用了幻象引用机制。幻象引用也可以进行类似链条式依赖关系的动作，比如，进行总量控制的场景，保证只有连接被关闭，相应资源被回收，连接池才能创建新的连接。</p><p>另外，这种代码如果稍有不慎添加了对资源的强引用关系，就会导致循环引用关系，前面提到的MySQL JDBC就在特定模式下有这种问题，导致内存泄漏。上面的示例代码中，将State定义为static，就是为了避免普通的内部类隐含着对外部对象的强引用，因为那样会使外部对象无法进入幻象可达的状态。</p><h3 id="重载和重写的区别"><a href="#重载和重写的区别" class="headerlink" title="重载和重写的区别"></a>重载和重写的区别</h3><h3 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h3><p>抽象类：只可以单继承，可以有自己的实现</p><p>接口：可以多继承，<code>jdk8</code>之后新版本中可可以有自己的默认实现</p><ol><li>支持多重继承：接口支持；抽象类不支持；类不支持；</li><li>支持抽象函数：接口语义上支持；抽象类支持；类不支持；</li><li>允许函数实现：接口不允许；抽象类支持；类允许；</li><li>允许实例化：接口不允许；抽象类不允许；类允许；</li><li>允许部分函数实现：接口不允许；抽象类允许；类不允许。</li><li>定义的内容：接口中只能包括public函数以及public static final常量；抽象类与类均无任何限制。</li><li>使用时机：当想要支持多重继承，或是为了定义一种类型请使用接口；当打算提供带有部分实现的“模板”类，而将一些功能需要延迟实现请使用抽象类；当你打算提供完整的具体实现请使用类。 </li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Collection</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Iterable</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**    * Returns a sequential Stream with this collection as its source    * ...    **/</span>    <span class="token keyword">default</span> Stream<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">sream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> StreamSupport<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>面向对象方面考虑，抽象是对拥有同本质对象的抽取，例如衣服，接口是对对象具有的共同特征提取，例如衣服上的口袋。</p><p>接口是对行为的抽象，它是抽象方法的集合，利用接口可以达到API定义和实现分离的目的。接口，不能实例化；不能包含任何非常量成员，任何field都是隐含着<code>public</code> <code>static</code> <code>final</code>的意义；同时，没有非静态方法实现，也就是说要么是抽象方法，要么是静态方法。 Java标准类库中，定义了非常多的接口，比如<code>java.util.List</code>。 </p><p>抽象类是不能实例化的类，用abstract关键字修饰class，其目的主要是代码重用。除了不能实例化，形式上和一般的Java类并没有太大区别，可以有一个或者多个抽象方法，也可以没有抽象方法。抽象类大多用于抽取相关Java类的共用方法实现或者是共同成员变量，然后通过继承的方式达到代码复用的目的。 Java标准库中，比如collection框架，很多通用部分就被抽取成为抽象类，例如<code>java.util.AbstractList</code>。</p><h3 id="自定义注解的场景和实现"><a href="#自定义注解的场景和实现" class="headerlink" title="自定义注解的场景和实现"></a>自定义注解的场景和实现</h3><p>自定义注解使用场景</p><ol><li>类属性自动赋值。</li><li>验证对象属性完整性。</li><li>代替配置文件功能，像spring基于注解的配置。</li><li>可以生成文档，像java代码注释中的@see,@param等</li></ol><h3 id="反射的用途和实现"><a href="#反射的用途和实现" class="headerlink" title="反射的用途和实现"></a>反射的用途和实现</h3><blockquote><p><a href="https://www.sczyh30.com/posts/Java/java-reflection-1/" target="_blank" rel="noopener">https://www.sczyh30.com/posts/Java/java-reflection-1/</a></p></blockquote><h4 id="一"><a href="#一" class="headerlink" title="一"></a>一</h4><p>当程序运行时，允许改变程序结构或变量类型，这种语言称为动态语言。我们认为 Java 并不是动态语言，但是它却又一个非常突出的动态相关的机制，即：反射。</p><p>Reflection  是Java 程序开发语言的特征之一，它允许运行中的 Java 程序获取自身的信息，并且可以操作类和对象的内部属性。</p><p>通过反射，我们可以在运行时获得程序或程序集中每一个类型成员和成员变量的信息。<br>程序中一般的对象类型都是在编译期就确定下来的，而Java 反射机制可以动态的创建对象并调用其属性，这样对象的类型在编译期是未知的。所以我们可以通过反射机制直接创建对象即使这个对象在编译期是未知的。<br>反射的核心：是 JVM 在运行时 才动态加载的类或调用方法或属性，他不需要事先（写代码的时候或编译期）知道运行对象是谁。</p><p>Java 反射主要提供以下功能：</p><ul><li>在运行时判断任意一个对象所属的类；</li><li>在运行时构造任意一个类的对象；</li><li>在运行时判断任意一个类所具有的成员变量和方法（通过反射甚至可以调用private方法）；</li><li>在运行时调用任意一个对象的方法</li></ul><p>重点：<strong>是运行时而不是编译时</strong></p><h4 id="二、反射的主要用途"><a href="#二、反射的主要用途" class="headerlink" title="二、反射的主要用途"></a>二、反射的主要用途</h4><p>很多人都认为反射在实际的 Java 开发应用中并不广泛，其实不然。当我们在使用 IDE(如 Eclipse，IDEA)时，当我们输入一个对象或类并想调用它的属性或方法时，一按点号，编译器就会自动列出它的属性或方法，这里就会用到反射。</p><p><strong>反射最重要的用途就是开发各种通用框架。</strong>很多框架（比如 Spring）都是配置化的（比如通过 XML 文件配置 Bean），为了保证框架的通用性，它们可能需要根据配置文件加载不同的对象或类，调用不同的方法，这个时候就必须用到反射，运行时动态加载需要加载的对象。</p><p>举一个例子，在运用 Struts 2 框架的开发中我们一般会在 <code>struts.xml</code> 里去配置 <code>Action</code>，比如：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.lie.test.action.SimpleLoginAction<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execute<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span><span class="token punctuation">></span></span>/shop/shop-index.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>error<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>login.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>action</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>配置文件与 <code>Action</code> 建立了一种映射关系，当 View 层发出请求时，请求会被 <code>StrutsPrepareAndExecuteFilter</code> 拦截，然后 <code>StrutsPrepareAndExecuteFilter</code> 会去动态地创建 Action 实例。比如我们请求 <code>login.action</code>，那么 <code>StrutsPrepareAndExecuteFilter</code>就会去解析 struts.xml 文件，检索action 中 name 为login的 Action，并根据 class 属性创建 SimpleLoginAction 实例，并用 invoke 方法来调用execute 方法，这个过程离不开反射。</p><p>对与框架开发人员来说，反射虽小但作用非常大，它是各种容器实现的核心。而对于一般的开发者来说，不深入框架开发则用反射用的就会少一点，不过了解一下框架的底层机制有助于丰富自己的编程思想，也是很有益的。</p><h4 id="三、反射的基本运用"><a href="#三、反射的基本运用" class="headerlink" title="三、反射的基本运用"></a>三、反射的基本运用</h4><p>上面我们提到了反射可以用于判断任意对象所属的类，获得 Class 对象，构造任意一个对象以及调用一个对象。这里我们介绍一下基本反射功能的使用和实现(反射相关的类一般都在 java.lang.relfect 包里)。</p><h5 id="1、获得-Class-对象"><a href="#1、获得-Class-对象" class="headerlink" title="1、获得 Class 对象"></a>1、获得 Class 对象</h5><p>方法有三种：</p><p>(1) 使用 Class 类的 <code>forName</code> 静态方法:</p><pre class="line-numbers language-Java"><code class="language-Java"> public static Class<?> forName(String className)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>比如在 JDBC 开发中常用此方法加载数据库驱动:</p><pre class="line-numbers language-java"><code class="language-java"> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(2)直接获取某一个对象的 class，比如:</p><pre class="line-numbers language-Java"><code class="language-Java">Class<?> klass = int.class;Class<?> classInt = Integer.TYPE;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>(3)调用某个对象的 <code>getClass()</code> 方法，比如:</p><pre class="line-numbers language-Java"><code class="language-Java">StringBuilder str = new StringBuilder("123");Class<?> klass = str.getClass();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="2、判断是否为某个类的实例"><a href="#2、判断是否为某个类的实例" class="headerlink" title="2、判断是否为某个类的实例"></a>2、判断是否为某个类的实例</h5><p>一般地，我们用 <code>instanceof</code> 关键字来判断是否为某个类的实例。同时我们也可以借助反射中 Class 对象的 <code>isInstance()</code> 方法来判断是否为某个类的实例，它是一个 native 方法：</p><pre class="line-numbers language-Java"><code class="language-Java">public native boolean isInstance(Object obj);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3、创建实例"><a href="#3、创建实例" class="headerlink" title="3、创建实例"></a>3、创建实例</h5><p>通过反射来生成对象主要有两种方式。</p><ul><li>使用Class对象的<code>newInstance()</code>方法来创建Class对象对应类的实例。</li></ul><pre class="line-numbers language-Java"><code class="language-Java">Class<?> c = String.class;Object str = c.newInstance();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>先通过Class对象获取指定的Constructor对象，再调用Constructor对象的<code>newInstance()</code>方法来创建实例。这种方法可以用指定的构造器构造类的实例。</li></ul><pre class="line-numbers language-Java"><code class="language-Java">//获取String所对应的Class对象Class<?> c = String.class;//获取String类带一个String参数的构造器Constructor constructor = c.getConstructor(String.class);//根据构造器创建实例Object obj = constructor.newInstance("23333");System.out.println(obj);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4、获取方法"><a href="#4、获取方法" class="headerlink" title="4、获取方法"></a>4、获取方法</h5><p>获取某个Class对象的方法集合，主要有以下几个方法：</p><ul><li><code>getDeclaredMethods</code> 方法返回类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法。</li></ul><pre class="line-numbers language-Java"><code class="language-Java">public Method[] getDeclaredMethods() throws SecurityException<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>getMethods</code> 方法返回某个类的所有公用（public）方法，包括其继承类的公用方法。</li></ul><pre class="line-numbers language-Java"><code class="language-Java">public Method[] getMethods() throws SecurityException<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>getMethod</code> 方法返回一个特定的方法，其中第一个参数为方法名称，后面的参数为方法的参数对应Class的对象。</li></ul><pre class="line-numbers language-Java"><code class="language-Java">public Method getMethod(String name, Class<?>... parameterTypes)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只是这样描述的话可能难以理解，我们用例子来理解这三个方法：</p><pre class="line-numbers language-Java"><code class="language-Java">package com.lie.common;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;public class test1 {    public static void test() throws IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException {        Class<?> c = methodClass.class;        Object object = c.newInstance();        Method[] methods = c.getMethods();        Method[] declaredMethods = c.getDeclaredMethods();        //获取methodClass类的add方法        Method method = c.getMethod("add", int.class, int.class);        //getMethods()方法获取的所有方法        System.out.println("getMethods获取的方法：");        for(Method m:methods){            System.out.println(m);        }        //getDeclaredMethods()方法获取的所有方法        System.out.println("getDeclaredMethods获取的方法：");        for(Method m:declaredMethods){            System.out.println(m);        }    }}class methodClass {    public final int fuck = 3;    public int add(int a,int b) {        return a+b;    }    public int sub(int a,int b) {        return a+b;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序运行的结果如下:</p><pre class="line-numbers language-Java"><code class="language-Java">getMethods获取的方法：public int com.lie.common.methodClass.add(int,int)    public int com.lie.common.methodClass.sub(int,int)    public final void java.lang.Object.wait() throws java.lang.InterruptedExceptionpublic    final void java.lang.Object.wait(long,int) throws java.lang.InterruptedExceptionpublic     final native void java.lang.Object.wait(long) throws java.lang.InterruptedExceptionpublic     boolean java.lang.Object.equals(java.lang.Object)    public java.lang.String java.lang.Object.toString()    public native int java.lang.Object.hashCode()    public final native java.lang.Class java.lang.Object.getClass()    public final native void java.lang.Object.notify()    public final native void java.lang.Object.notifyAll()    getDeclaredMethods获取的方法：    public int com.lie.common.methodClass.add(int,int)    public int com.lie.common.methodClass.sub(int,int)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，通过 <code>getMethods()</code> 获取的方法可以获取到父类的方法,比如 java.lang.Object 下定义的各个方法。</p><h5 id="5、获取构造器信息"><a href="#5、获取构造器信息" class="headerlink" title="5、获取构造器信息"></a>5、获取构造器信息</h5><p>获取类构造器的用法与上述获取方法的用法类似。主要是通过Class类的getConstructor方法得到Constructor类的一个实例，而Constructor类有一个newInstance方法可以创建一个对象实例:</p><pre class="line-numbers language-Java"><code class="language-Java">public T newInstance(Object ... initargs)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此方法可以根据传入的参数来调用对应的Constructor创建对象实例。</p><h5 id="6、获取类的成员变量（字段）信息"><a href="#6、获取类的成员变量（字段）信息" class="headerlink" title="6、获取类的成员变量（字段）信息"></a>6、获取类的成员变量（字段）信息</h5><p>主要是这几个方法，在此不再赘述：</p><ul><li><code>getFiled</code>：访问公有的成员变量</li><li><code>getDeclaredField</code>：所有已声明的成员变量，但不能得到其父类的成员变量</li></ul><p><code>getFileds</code> 和 <code>getDeclaredFields</code> 方法用法同上（参照 Method）。</p><h5 id="7、调用方法"><a href="#7、调用方法" class="headerlink" title="7、调用方法"></a>7、调用方法</h5><p>当我们从类中获取了一个方法后，我们就可以用 <code>invoke()</code> 方法来调用这个方法。<code>invoke</code> 方法的原型为:</p><pre class="line-numbers language-Java"><code class="language-Java">public Object invoke(Object obj, Object... args) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面是一个实例：</p><pre class="line-numbers language-Java"><code class="language-Java">public class test1 {    public static void main(String[] args) throws IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException {        Class<?> klass = methodClass.class;        //创建methodClass的实例        Object obj = klass.newInstance();        //获取methodClass类的add方法        Method method = klass.getMethod("add",int.class,int.class);        //调用method对应的方法 => add(1,4)        Object result = method.invoke(obj,1,4);        System.out.println(result);    }}class methodClass {    public final int fuck = 3;    public int add(int a,int b) {        return a+b;    }    public int sub(int a,int b) {        return a+b;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于 <code>invoke</code> 方法的详解，后面我会专门写一篇文章来深入解析 invoke 的过程。</p><h5 id="8、利用反射创建数组"><a href="#8、利用反射创建数组" class="headerlink" title="8、利用反射创建数组"></a>8、利用反射创建数组</h5><p>数组在Java里是比较特殊的一种类型，它可以赋值给一个Object Reference。下面我们看一看利用反射创建数组的例子：</p><pre class="line-numbers language-Java"><code class="language-Java">public static void testArray() throws ClassNotFoundException {    Class<?> cls = Class.forName("java.lang.String");    Object array = Array.newInstance(cls,25);    //往数组里添加内容    Array.set(array,0,"hello");    Array.set(array,1,"Java");    Array.set(array,2,"fuck");    Array.set(array,3,"Scala");    Array.set(array,4,"Clojure");    //获取某一项的内容    System.out.println(Array.get(array,3));}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中的Array类为java.lang.reflect.Array类。我们通过Array.newInstance()创建数组对象，它的原型是:</p><pre class="line-numbers language-Java"><code class="language-Java">public static Object newInstance(Class<?> componentType, int length) throws NegativeArraySizeException {    return newArray(componentType, length);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>而 <code>newArray</code> 方法是一个 native 方法，它在 HotSpot JVM 里的具体实现我们后边再研究，这里先把源码贴出来：</p><pre class="line-numbers language-Java"><code class="language-Java">private static native Object newArray(Class<?> componentType, int length) throws NegativeArraySizeException;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>源码目录：<code>openjdk\hotspot\src\share\vm\runtime\reflection.cpp</code></p><pre class="line-numbers language-Java"><code class="language-Java">arrayOop Reflection::reflect_new_array(oop element_mirror, jint length, TRAPS) {    if (element_mirror == NULL) {        THROW_0(vmSymbols::java_lang_NullPointerException());    }    if (length < 0) {        THROW_0(vmSymbols::java_lang_NegativeArraySizeException());    }      if (java_lang_Class::is_primitive(element_mirror)) {        Klass* tak = basic_type_mirror_to_arrayklass(element_mirror, CHECK_NULL);         return TypeArrayKlass::cast(tak)->allocate(length, THREAD);    } else {        Klass* k = java_lang_Class::as_Klass(element_mirror);        if (k->oop_is_array() && ArrayKlass::cast(k)->dimension() >= MAX_DIM) {            THROW_0(vmSymbols::java_lang_IllegalArgumentException());        }         return oopFactory::new_objArray(k, length, THREAD);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外，Array 类的 <code>set</code> 和 <code>get</code> 方法都为 native 方法，在 HotSpot JVM 里分别对应 <code>Reflection::array_set</code> 和 <code>Reflection::array_get</code> 方法，这里就不详细解析了。</p><h4 id="四、反射的一些注意事项"><a href="#四、反射的一些注意事项" class="headerlink" title="四、反射的一些注意事项"></a>四、反射的一些注意事项</h4><p>由于反射会额外消耗一定的系统资源，因此如果不需要动态地创建一个对象，那么就不需要用反射。</p><p>另外，反射调用方法时可以忽略权限检查，因此可能会破坏封装性而导致安全问题。</p><h4 id="invoke-方法"><a href="#invoke-方法" class="headerlink" title="invoke 方法"></a>invoke 方法</h4><p>即使没有学过反射，大家也一定会见过invoke方法。因为很多方法调用都是靠invoke方法，所以很多异常的抛出都会定位到invoke方法，比如下面的情形大家会很熟悉:</p><pre class="line-numbers language-java"><code class="language-java">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>NullPointerException  at <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  at sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>NativeMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke0</span><span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>  at sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>NativeMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>NativeMethodAccessorImpl<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">62</span><span class="token punctuation">)</span>  at sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>DelegatingMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>DelegatingMethodAccessorImpl<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">43</span><span class="token punctuation">)</span>  at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>Method<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">497</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>大家在看到异常抛出时，除了想要排除Bug，是不是同时也对这个神秘的invoke乃至invoke0方法有一些好奇呢？我们下面就来揭开它神秘的面纱，探寻底层的机制。</p><h4 id="浅析invoke过程"><a href="#浅析invoke过程" class="headerlink" title="浅析invoke过程"></a>浅析invoke过程</h4><p>上一篇文章我们讲过，invoke方法用来在运行时动态地调用某个实例的方法。它的实现如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@CallerSensitive</span><span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span>    <span class="token keyword">throws</span> IllegalAccessException<span class="token punctuation">,</span> IllegalArgumentException<span class="token punctuation">,</span>       InvocationTargetException<span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>override<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Reflection<span class="token punctuation">.</span><span class="token function">quickCheckMemberAccess</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> caller <span class="token operator">=</span> Reflection<span class="token punctuation">.</span><span class="token function">getCallerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">checkAccess</span><span class="token punctuation">(</span>caller<span class="token punctuation">,</span> clazz<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    MethodAccessor ma <span class="token operator">=</span> methodAccessor<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// read volatile</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ma <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ma <span class="token operator">=</span> <span class="token function">acquireMethodAccessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ma<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们根据invoke方法的实现，将其分为以下几步：</p><h5 id="1、权限检查"><a href="#1、权限检查" class="headerlink" title="1、权限检查"></a>1、权限检查</h5><p>invoke方法会首先检查AccessibleObject的override属性的值。AccessibleObject 类是 Field、Method 和 Constructor 对象的基类。它提供了将反射的对象标记为在使用时取消默认 Java 语言访问控制检查的能力。<br>override的值默认是false,表示需要权限调用规则，调用方法时需要检查权限;我们也可以用setAccessible方法设置为true,若override的值为true，表示忽略权限规则，调用方法时无需检查权限（也就是说可以调用任意的private方法，违反了封装）。<br>如果override属性为默认值false，则进行进一步的权限检查：<br>（1）首先用Reflection.quickCheckMemberAccess(clazz, modifiers)方法检查方法是否为public，如果是的话跳出本步；如果不是public方法，那么用Reflection.getCallerClass()方法获取调用这个方法的Class对象，这是一个native方法:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@CallerSensitive</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getCallerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在OpenJDK的源码中找到此方法的JNI入口(Reflection.c):</p><pre class="line-numbers language-java"><code class="language-java">JNIEXPORT jclass JNICALL <span class="token function">Java_sun_reflect_Reflection_getCallerClass__</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span> jclass unused<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">JVM_GetCallerClass</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> JVM_CALLER_DEPTH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中JVM_GetCallerClass的源码如下，有兴趣的可以研究一下(位于jvm.cpp):</p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">JVM_ENTRY</span><span class="token punctuation">(</span>jclass<span class="token punctuation">,</span> <span class="token function">JVM_GetCallerClass</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> <span class="token keyword">int</span> depth<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token function">JVMWrapper</span><span class="token punctuation">(</span><span class="token string">"JVM_GetCallerClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Pre-JDK 8 and early builds of JDK 8 don't have a CallerSensitive annotation; or</span>  <span class="token comment" spellcheck="true">// sun.reflect.Reflection.getCallerClass with a depth parameter is provided</span>  <span class="token comment" spellcheck="true">// temporarily for existing code to use until a replacement API is defined.</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>SystemDictionary<span class="token operator">:</span><span class="token operator">:</span><span class="token function">reflect_CallerSensitive_klass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> NULL <span class="token operator">||</span> depth <span class="token operator">!=</span> JVM_CALLER_DEPTH<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Klass<span class="token operator">*</span> k <span class="token operator">=</span> thread<span class="token operator">-</span><span class="token operator">></span><span class="token function">security_get_caller_class</span><span class="token punctuation">(</span>depth<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> NULL<span class="token punctuation">)</span> <span class="token operator">?</span> NULL <span class="token operator">:</span> <span class="token punctuation">(</span>jclass<span class="token punctuation">)</span> JNIHandles<span class="token operator">:</span><span class="token operator">:</span><span class="token function">make_local</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> k<span class="token operator">-</span><span class="token operator">></span><span class="token function">java_mirror</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Getting the class of the caller frame.</span>  <span class="token comment" spellcheck="true">//</span>  <span class="token comment" spellcheck="true">// The call stack at this point looks something like this:</span>  <span class="token comment" spellcheck="true">//</span>  <span class="token comment" spellcheck="true">// [0] [ @CallerSensitive public sun.reflect.Reflection.getCallerClass ]</span>  <span class="token comment" spellcheck="true">// [1] [ @CallerSensitive API.method                                   ]</span>  <span class="token comment" spellcheck="true">// [.] [ (skipped intermediate frames)                                 ]</span>  <span class="token comment" spellcheck="true">// [n] [ caller                                                        ]</span>  vframeStream <span class="token function">vfst</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Cf. LibraryCallKit::inline_native_Reflection_getCallerClass</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">!</span>vfst<span class="token punctuation">.</span><span class="token function">at_end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> vfst<span class="token punctuation">.</span><span class="token function">security_next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Method<span class="token operator">*</span> m <span class="token operator">=</span> vfst<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">assert</span><span class="token punctuation">(</span>m <span class="token operator">!=</span> NULL<span class="token punctuation">,</span> <span class="token string">"sanity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>      <span class="token comment" spellcheck="true">// This must only be called from Reflection.getCallerClass</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token operator">-</span><span class="token operator">></span><span class="token function">intrinsic_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> vmIntrinsics<span class="token operator">:</span><span class="token operator">:</span>_getCallerClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">THROW_MSG_NULL</span><span class="token punctuation">(</span>vmSymbols<span class="token operator">:</span><span class="token operator">:</span><span class="token function">java_lang_InternalError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"JVM_GetCallerClass must only be called from Reflection.getCallerClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// fall-through</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>      <span class="token comment" spellcheck="true">// Frame 0 and 1 must be caller sensitive.</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m<span class="token operator">-</span><span class="token operator">></span><span class="token function">caller_sensitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">THROW_MSG_NULL</span><span class="token punctuation">(</span>vmSymbols<span class="token operator">:</span><span class="token operator">:</span><span class="token function">java_lang_InternalError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">err_msg</span><span class="token punctuation">(</span><span class="token string">"CallerSensitive annotation expected at frame %d"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m<span class="token operator">-</span><span class="token operator">></span><span class="token function">is_ignored_by_security_stack_walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// We have reached the desired frame; return the holder class.</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>jclass<span class="token punctuation">)</span> JNIHandles<span class="token operator">:</span><span class="token operator">:</span><span class="token function">make_local</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> m<span class="token operator">-</span><span class="token operator">></span><span class="token function">method_holder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">java_mirror</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> NULL<span class="token punctuation">;</span>JVM_END<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取了这个Class对象caller后用checkAccess方法做一次快速的权限校验，其实现为:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">volatile</span> Object securityCheckCache<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">checkAccess</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> caller<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz<span class="token punctuation">,</span> Object obj<span class="token punctuation">,</span> <span class="token keyword">int</span> modifiers<span class="token punctuation">)</span>        <span class="token keyword">throws</span> IllegalAccessException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>caller <span class="token operator">==</span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 快速校验</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 权限通过校验</span>        <span class="token punctuation">}</span>        Object cache <span class="token operator">=</span> securityCheckCache<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// read volatile</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass <span class="token operator">=</span> clazz<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> null            <span class="token operator">&amp;&amp;</span> Modifier<span class="token punctuation">.</span><span class="token function">isProtected</span><span class="token punctuation">(</span>modifiers<span class="token punctuation">)</span>            <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>targetClass <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Must match a 2-list of { caller, targetClass }.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cache <span class="token keyword">instanceof</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> cache2 <span class="token operator">=</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> cache<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cache2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> targetClass <span class="token operator">&amp;&amp;</span>                    cache2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> caller<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// ACCESS IS OK</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// (Test cache[1] first since range check for [1]</span>                <span class="token comment" spellcheck="true">// subsumes range check for [0].)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cache <span class="token operator">==</span> caller<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Non-protected case (or obj.class == this.clazz).</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// ACCESS IS OK</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// If no return, fall through to the slow path.</span>        <span class="token function">slowCheckMemberAccess</span><span class="token punctuation">(</span>caller<span class="token punctuation">,</span> clazz<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> modifiers<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先先执行一次快速校验，一旦调用方法的Class正确则权限检查通过。<br>若未通过，则创建一个缓存，中间再进行一堆检查（比如检验是否为protected属性）。<br>如果上面的所有权限检查都未通过，那么将执行更详细的检查，其实现为：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Keep all this slow stuff out of line:</span><span class="token keyword">void</span> <span class="token function">slowCheckMemberAccess</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> caller<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz<span class="token punctuation">,</span> Object obj<span class="token punctuation">,</span> <span class="token keyword">int</span> modifiers<span class="token punctuation">,</span>                           Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass<span class="token punctuation">)</span>    <span class="token keyword">throws</span> IllegalAccessException<span class="token punctuation">{</span>    Reflection<span class="token punctuation">.</span><span class="token function">ensureMemberAccess</span><span class="token punctuation">(</span>caller<span class="token punctuation">,</span> clazz<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Success: Update the cache.</span>    Object cache <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>targetClass <span class="token operator">==</span> clazz<span class="token punctuation">)</span>                    <span class="token operator">?</span> caller                    <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> caller<span class="token punctuation">,</span> targetClass <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Note:  The two cache elements are not volatile,</span>    <span class="token comment" spellcheck="true">// but they are effectively final.  The Java memory model</span>    <span class="token comment" spellcheck="true">// guarantees that the initializing stores for the cache</span>    <span class="token comment" spellcheck="true">// elements will occur before the volatile write.</span>    securityCheckCache <span class="token operator">=</span> cache<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// write volatile</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大体意思就是，用Reflection.ensureMemberAccess方法继续检查权限，若检查通过就更新缓存，这样下一次同一个类调用同一个方法时就不用执行权限检查了，这是一种简单的缓存机制。由于JMM的happens-before规则能够保证缓存初始化能够在写缓存之前发生，因此两个cache不需要声明为volatile。<br>到这里，前期的权限检查工作就结束了。如果没有通过检查则会抛出异常，如果通过了检查则会到下一步。</p><h5 id="2、调用MethodAccessor的invoke方法"><a href="#2、调用MethodAccessor的invoke方法" class="headerlink" title="2、调用MethodAccessor的invoke方法"></a>2、调用MethodAccessor的invoke方法</h5><p>Method.invoke()实际上并不是自己实现的反射调用逻辑，而是委托给sun.reflect.MethodAccessor来处理。<br>首先要了解Method对象的基本构成，每个Java方法有且只有一个Method对象作为root，它相当于根对象，对用户不可见。当我们创建Method对象时，我们代码中获得的Method对象都相当于它的副本（或引用）。root对象持有一个MethodAccessor对象，所以所有获取到的Method对象都共享这一个MethodAccessor对象，因此必须保证它在内存中的可见性。root对象其声明及注释为：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">volatile</span> MethodAccessor methodAccessor<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// For sharing of MethodAccessors. This branching structure is</span><span class="token comment" spellcheck="true">// currently only two levels deep (i.e., one root Method and</span><span class="token comment" spellcheck="true">// potentially many Method objects pointing to it.)</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// If this branching structure would ever contain cycles, deadlocks can</span><span class="token comment" spellcheck="true">// occur in annotation code.</span><span class="token keyword">private</span> Method  root<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么MethodAccessor到底是个啥玩意呢？</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** This interface provides the declaration for    java.lang.reflect.Method.invoke(). Each Method object is    configured with a (possibly dynamically-generated) class which    implements this interface.*/</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MethodAccessor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/** Matches specification in {@link java.lang.reflect.Method} */</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token keyword">throws</span> IllegalArgumentException<span class="token punctuation">,</span> InvocationTargetException<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到MethodAccessor是一个接口，定义了invoke方法。分析其Usage可得它的具体实现类有:</p><ul><li>sun.reflect.DelegatingMethodAccessorImpl</li><li>sun.reflect.MethodAccessorImpl</li><li>sun.reflect.NativeMethodAccessorImpl</li></ul><p>第一次调用一个Java方法对应的Method对象的invoke()方法之前，实现调用逻辑的MethodAccessor对象还没有创建；等第一次调用时才新创建MethodAccessor并更新给root，然后调用MethodAccessor.invoke()完成反射调用：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// NOTE that there is no synchronization used here. It is correct</span><span class="token comment" spellcheck="true">// (though not efficient) to generate more than one MethodAccessor</span><span class="token comment" spellcheck="true">// for a given Method. However, avoiding synchronization will</span><span class="token comment" spellcheck="true">// probably make the implementation more scalable.</span><span class="token keyword">private</span> MethodAccessor <span class="token function">acquireMethodAccessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// First check to see if one has been created yet, and take it</span>    <span class="token comment" spellcheck="true">// if so</span>    MethodAccessor tmp <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> tmp <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">getMethodAccessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        methodAccessor <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Otherwise fabricate one and propagate it up to the root</span>        tmp <span class="token operator">=</span> reflectionFactory<span class="token punctuation">.</span><span class="token function">newMethodAccessor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setMethodAccessor</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到methodAccessor实例由reflectionFactory对象操控生成，它在AccessibleObject下的声明如下:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Reflection factory used by subclasses for creating field,</span><span class="token comment" spellcheck="true">// method, and constructor accessors. Note that this is called</span><span class="token comment" spellcheck="true">// very early in the bootstrapping process.</span><span class="token keyword">static</span> <span class="token keyword">final</span> ReflectionFactory reflectionFactory <span class="token operator">=</span> AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span>        <span class="token keyword">new</span> <span class="token class-name">sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>ReflectionFactory<span class="token punctuation">.</span>GetReflectionFactoryAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>再研究一下sun.reflect.ReflectionFactory类的源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectionFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> initted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Permission reflectionFactoryAccessPerm        <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RuntimePermission</span><span class="token punctuation">(</span><span class="token string">"reflectionFactoryAccess"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ReflectionFactory soleInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReflectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Provides access to package-private mechanisms in java.lang.reflect</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> LangReflectAccess langReflectAccess<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这里设计得非常巧妙</span>    <span class="token comment" spellcheck="true">// "Inflation" mechanism. Loading bytecodes to implement</span>    <span class="token comment" spellcheck="true">// Method.invoke() and Constructor.newInstance() currently costs</span>    <span class="token comment" spellcheck="true">// 3-4x more than an invocation via native code for the first</span>    <span class="token comment" spellcheck="true">// invocation (though subsequent invocations have been benchmarked</span>    <span class="token comment" spellcheck="true">// to be over 20x faster). Unfortunately this cost increases</span>    <span class="token comment" spellcheck="true">// startup time for certain applications that use reflection</span>    <span class="token comment" spellcheck="true">// intensively (but only once per class) to bootstrap themselves.</span>    <span class="token comment" spellcheck="true">// To avoid this penalty we reuse the existing JVM entry points</span>    <span class="token comment" spellcheck="true">// for the first few invocations of Methods and Constructors and</span>    <span class="token comment" spellcheck="true">// then switch to the bytecode-based implementations.</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// Package-private to be accessible to NativeMethodAccessorImpl</span>    <span class="token comment" spellcheck="true">// and NativeConstructorAccessorImpl</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> noInflation        <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span>     inflationThreshold <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//......</span>    <span class="token comment" spellcheck="true">//这是生成MethodAccessor的方法</span>    <span class="token keyword">public</span> MethodAccessor <span class="token function">newMethodAccessor</span><span class="token punctuation">(</span>Method method<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">checkInitted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>noInflation <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>ReflectUtil<span class="token punctuation">.</span><span class="token function">isVMAnonymousClass</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MethodAccessorGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">generateMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                               method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                               method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                               method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                               method<span class="token punctuation">.</span><span class="token function">getExceptionTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                               method<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            NativeMethodAccessorImpl acc <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">NativeMethodAccessorImpl</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>            DelegatingMethodAccessorImpl res <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">DelegatingMethodAccessorImpl</span><span class="token punctuation">(</span>acc<span class="token punctuation">)</span><span class="token punctuation">;</span>            acc<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//......</span>    <span class="token comment" spellcheck="true">/** We have to defer full initialization of this class until after    the static initializer is run since java.lang.reflect.Method's    static initializer (more properly, that for    java.lang.reflect.AccessibleObject) causes this class's to be    run, before the system properties are set up. */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">checkInitted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initted<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token operator">&lt;</span>Void<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">public</span> Void <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// Tests to ensure the system properties table is fully</span>                    <span class="token comment" spellcheck="true">// initialized. This is needed because reflection code is</span>                    <span class="token comment" spellcheck="true">// called very early in the initialization process (before</span>                    <span class="token comment" spellcheck="true">// command-line arguments have been parsed and therefore</span>                    <span class="token comment" spellcheck="true">// these user-settable properties installed.) We assume that</span>                    <span class="token comment" spellcheck="true">// if System.out is non-null then the System class has been</span>                    <span class="token comment" spellcheck="true">// fully initialized and that the bulk of the startup code</span>                    <span class="token comment" spellcheck="true">// has been run.</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span>out <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// java.lang.System not yet fully initialized</span>                        <span class="token keyword">return</span> null<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    String val <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.noInflation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> val<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        noInflation <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    val <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.inflationThreshold"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            inflationThreshold <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Unable to parse property sun.reflect.inflationThreshold"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    initted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>观察前面的声明部分的注释，我们可以发现一些有趣的东西。就像注释里说的，实际的MethodAccessor实现有两个版本，一个是Java版本，一个是native版本，两者各有特点。初次启动时 <code>Method.invoke()</code> 和 <code>Constructor.newInstance()</code> 方法采用native方法要比Java方法快3-4倍，而启动后native方法又要消耗额外的性能而慢于Java方法。也就是说，Java实现的版本在初始化时需要较多时间，但长久来说性能较好；native版本正好相反，启动时相对较快，但运行时间长了之后速度就比不过Java版了。这是HotSpot的优化方式带来的性能特性，同时也是许多虚拟机的共同点：跨越native边界会对优化有阻碍作用，它就像个黑箱一样让虚拟机难以分析也将其内联，于是运行时间长了之后反而是托管版本的代码更快些。</p><p>为了尽可能地减少性能损耗，HotSpot JDK采用“inflation”的技巧：让Java方法在被反射调用时，开头若干次使用native版，等反射调用次数超过阈值时则生成一个专用的MethodAccessor实现类，生成其中的invoke()方法的字节码，以后对该Java方法的反射调用就会使用Java版本。 这项优化是从JDK 1.4开始的。</p><p>研究<code>ReflectionFactory.newMethodAccessor()</code>生产<code>MethodAccessor</code>对象的逻辑，一开始(native版)会生产<code>NativeMethodAccessorImpl</code>和<code>DelegatingMethodAccessorImpl</code>两个对象。<br><code>DelegatingMethodAccessorImpl</code>的源码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** Delegates its invocation to another MethodAccessorImpl and can    change its delegate at run time. */</span><span class="token keyword">class</span> <span class="token class-name">DelegatingMethodAccessorImpl</span> <span class="token keyword">extends</span> <span class="token class-name">MethodAccessorImpl</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> MethodAccessorImpl delegate<span class="token punctuation">;</span>    <span class="token function">DelegatingMethodAccessorImpl</span><span class="token punctuation">(</span>MethodAccessorImpl delegate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setDelegate</span><span class="token punctuation">(</span>delegate<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token keyword">throws</span> IllegalArgumentException<span class="token punctuation">,</span> InvocationTargetException    <span class="token punctuation">{</span>        <span class="token keyword">return</span> delegate<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">setDelegate</span><span class="token punctuation">(</span>MethodAccessorImpl delegate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>delegate <span class="token operator">=</span> delegate<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它其实是一个中间层，方便在native版与Java版的MethodAccessor之间进行切换。<br>然后下面就是native版MethodAccessor的Java方面的声明：<br>sun.reflect.NativeMethodAccessorImpl：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** Used only for the first few invocations of a Method; afterward,    switches to bytecode-based implementation */</span><span class="token keyword">class</span> <span class="token class-name">NativeMethodAccessorImpl</span> <span class="token keyword">extends</span> <span class="token class-name">MethodAccessorImpl</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Method method<span class="token punctuation">;</span>    <span class="token keyword">private</span> DelegatingMethodAccessorImpl parent<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> numInvocations<span class="token punctuation">;</span>    <span class="token function">NativeMethodAccessorImpl</span><span class="token punctuation">(</span>Method method<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>method <span class="token operator">=</span> method<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token keyword">throws</span> IllegalArgumentException<span class="token punctuation">,</span> InvocationTargetException    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// We can't inflate methods belonging to vm-anonymous classes because</span>        <span class="token comment" spellcheck="true">// that kind of class can't be referred to by name, hence can't be</span>        <span class="token comment" spellcheck="true">// found from the generated bytecode.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>numInvocations <span class="token operator">></span> ReflectionFactory<span class="token punctuation">.</span><span class="token function">inflationThreshold</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>ReflectUtil<span class="token punctuation">.</span><span class="token function">isVMAnonymousClass</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            MethodAccessorImpl acc <span class="token operator">=</span> <span class="token punctuation">(</span>MethodAccessorImpl<span class="token punctuation">)</span>                <span class="token keyword">new</span> <span class="token class-name">MethodAccessorGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                    <span class="token function">generateMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                   method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                   method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                   method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                   method<span class="token punctuation">.</span><span class="token function">getExceptionTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                   method<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            parent<span class="token punctuation">.</span><span class="token function">setDelegate</span><span class="token punctuation">(</span>acc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">invoke0</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">setParent</span><span class="token punctuation">(</span>DelegatingMethodAccessorImpl parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">native</span> Object <span class="token function">invoke0</span><span class="token punctuation">(</span>Method m<span class="token punctuation">,</span> Object obj<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每次NativeMethodAccessorImpl.invoke()方法被调用时，程序调用计数器都会增加1，看看是否超过阈值；一旦超过，则调用MethodAccessorGenerator.generateMethod()来生成Java版的MethodAccessor的实现类，并且改变DelegatingMethodAccessorImpl所引用的MethodAccessor为Java版。后续经由DelegatingMethodAccessorImpl.invoke()调用到的就是Java版的实现了。<br>到这里，我们已经追寻到native版的invoke方法在Java一侧声明的最底层 - invoke0了，下面我们将深入到HotSpot JVM中去研究其具体实现。</p><h4 id="寻根溯源-在JVM层面探究invoke0方法"><a href="#寻根溯源-在JVM层面探究invoke0方法" class="headerlink" title="寻根溯源 - 在JVM层面探究invoke0方法"></a>寻根溯源 - 在JVM层面探究invoke0方法</h4><p>invoke0方法是一个native方法,它在HotSpot JVM里调用JVM_InvokeMethod函数:</p><pre class="line-numbers language-java"><code class="language-java">JNIEXPORT jobject JNICALL <span class="token function">Java_sun_reflect_NativeMethodAccessorImpl_invoke0</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span> jclass unused<span class="token punctuation">,</span> jobject m<span class="token punctuation">,</span> jobject obj<span class="token punctuation">,</span> jobjectArray args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">JVM_InvokeMethod</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> m<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>openjdk/hotspot/src/share/vm/prims/jvm.cpp</p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">JVM_ENTRY</span><span class="token punctuation">(</span>jobject<span class="token punctuation">,</span> <span class="token function">JVM_InvokeMethod</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span> jobject method<span class="token punctuation">,</span> jobject obj<span class="token punctuation">,</span> jobjectArray args0<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token function">JVMWrapper</span><span class="token punctuation">(</span><span class="token string">"JVM_InvokeMethod"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Handle method_handle<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>thread<span class="token operator">-</span><span class="token operator">></span><span class="token function">stack_available</span><span class="token punctuation">(</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span> <span class="token operator">&amp;</span>method_handle<span class="token punctuation">)</span> <span class="token operator">>=</span> JVMInvokeMethodSlack<span class="token punctuation">)</span> <span class="token punctuation">{</span>    method_handle <span class="token operator">=</span> <span class="token function">Handle</span><span class="token punctuation">(</span>THREAD<span class="token punctuation">,</span> JNIHandles<span class="token operator">:</span><span class="token operator">:</span><span class="token function">resolve</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Handle <span class="token function">receiver</span><span class="token punctuation">(</span>THREAD<span class="token punctuation">,</span> JNIHandles<span class="token operator">:</span><span class="token operator">:</span><span class="token function">resolve</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    objArrayHandle <span class="token function">args</span><span class="token punctuation">(</span>THREAD<span class="token punctuation">,</span> <span class="token function">objArrayOop</span><span class="token punctuation">(</span>JNIHandles<span class="token operator">:</span><span class="token operator">:</span><span class="token function">resolve</span><span class="token punctuation">(</span>args0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    oop result <span class="token operator">=</span> Reflection<span class="token operator">:</span><span class="token operator">:</span><span class="token function">invoke_method</span><span class="token punctuation">(</span><span class="token function">method_handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> receiver<span class="token punctuation">,</span> args<span class="token punctuation">,</span> CHECK_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    jobject res <span class="token operator">=</span> JNIHandles<span class="token operator">:</span><span class="token operator">:</span><span class="token function">make_local</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>JvmtiExport<span class="token operator">:</span><span class="token operator">:</span><span class="token function">should_post_vm_object_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      oop ret_type <span class="token operator">=</span> java_lang_reflect_Method<span class="token operator">:</span><span class="token operator">:</span><span class="token function">return_type</span><span class="token punctuation">(</span><span class="token function">method_handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>ret_type <span class="token operator">!=</span> NULL<span class="token punctuation">,</span> <span class="token string">"sanity check: ret_type oop must not be NULL!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>java_lang_Class<span class="token operator">:</span><span class="token operator">:</span><span class="token function">is_primitive</span><span class="token punctuation">(</span>ret_type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Only for primitive type vm allocates memory for java object.</span>        <span class="token comment" spellcheck="true">// See box() method.</span>        JvmtiExport<span class="token operator">:</span><span class="token operator">:</span><span class="token function">post_vm_object_alloc</span><span class="token punctuation">(</span>JavaThread<span class="token operator">:</span><span class="token operator">:</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">THROW_0</span><span class="token punctuation">(</span>vmSymbols<span class="token operator">:</span><span class="token operator">:</span><span class="token function">java_lang_StackOverflowError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>JVM_END<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其关键部分为Reflection::invoke_method:<br>openjdk/hotspot/src/share/vm/runtime/reflection.cpp</p><pre class="line-numbers language-java"><code class="language-java">oop Reflection<span class="token operator">:</span><span class="token operator">:</span><span class="token function">invoke_method</span><span class="token punctuation">(</span>oop method_mirror<span class="token punctuation">,</span> Handle receiver<span class="token punctuation">,</span> objArrayHandle args<span class="token punctuation">,</span> TRAPS<span class="token punctuation">)</span> <span class="token punctuation">{</span>  oop mirror             <span class="token operator">=</span> java_lang_reflect_Method<span class="token operator">:</span><span class="token operator">:</span><span class="token function">clazz</span><span class="token punctuation">(</span>method_mirror<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> slot               <span class="token operator">=</span> java_lang_reflect_Method<span class="token operator">:</span><span class="token operator">:</span><span class="token function">slot</span><span class="token punctuation">(</span>method_mirror<span class="token punctuation">)</span><span class="token punctuation">;</span>  bool override          <span class="token operator">=</span> java_lang_reflect_Method<span class="token operator">:</span><span class="token operator">:</span><span class="token function">override</span><span class="token punctuation">(</span>method_mirror<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>  objArrayHandle <span class="token function">ptypes</span><span class="token punctuation">(</span>THREAD<span class="token punctuation">,</span> <span class="token function">objArrayOop</span><span class="token punctuation">(</span>java_lang_reflect_Method<span class="token operator">:</span><span class="token operator">:</span><span class="token function">parameter_types</span><span class="token punctuation">(</span>method_mirror<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  oop return_type_mirror <span class="token operator">=</span> java_lang_reflect_Method<span class="token operator">:</span><span class="token operator">:</span><span class="token function">return_type</span><span class="token punctuation">(</span>method_mirror<span class="token punctuation">)</span><span class="token punctuation">;</span>  BasicType rtype<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>java_lang_Class<span class="token operator">:</span><span class="token operator">:</span><span class="token function">is_primitive</span><span class="token punctuation">(</span>return_type_mirror<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    rtype <span class="token operator">=</span> <span class="token function">basic_type_mirror_to_basic_type</span><span class="token punctuation">(</span>return_type_mirror<span class="token punctuation">,</span> CHECK_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    rtype <span class="token operator">=</span> T_OBJECT<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  instanceKlassHandle <span class="token function">klass</span><span class="token punctuation">(</span>THREAD<span class="token punctuation">,</span> java_lang_Class<span class="token operator">:</span><span class="token operator">:</span><span class="token function">as_Klass</span><span class="token punctuation">(</span>mirror<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Method<span class="token operator">*</span> m <span class="token operator">=</span> klass<span class="token operator">-</span><span class="token operator">></span><span class="token function">method_with_idnum</span><span class="token punctuation">(</span>slot<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> NULL<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">THROW_MSG_0</span><span class="token punctuation">(</span>vmSymbols<span class="token operator">:</span><span class="token operator">:</span><span class="token function">java_lang_InternalError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"invoke"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  methodHandle <span class="token function">method</span><span class="token punctuation">(</span>THREAD<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">invoke</span><span class="token punctuation">(</span>klass<span class="token punctuation">,</span> method<span class="token punctuation">,</span> receiver<span class="token punctuation">,</span> override<span class="token punctuation">,</span> ptypes<span class="token punctuation">,</span> rtype<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> THREAD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里面又会涉及到Java的对象模型(klass和oop)，以后继续补充。(<strong>留坑</strong>)</p><h4 id="寻根溯源-Java版的实现"><a href="#寻根溯源-Java版的实现" class="headerlink" title="寻根溯源 - Java版的实现"></a>寻根溯源 - Java版的实现</h4><p>Java版MethodAccessor的生成使用MethodAccessorGenerator实现，由于代码太长，这里就不贴代码了，只贴一下开头的注释：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** Generator for sun.reflect.MethodAccessor and    sun.reflect.ConstructorAccessor objects using bytecodes to    implement reflection. A java.lang.reflect.Method or    java.lang.reflect.Constructor object can delegate its invoke or    newInstance method to an accessor using native code or to one    generated by this class. (Methods and Constructors were merged    together in this class to ensure maximum code sharing.) */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里运用了asm动态生成字节码技术（sun.reflect.ClassFileAssembler)，原理比较复杂，后面讲到AOP要用到asm技术的时候再深入了解一下吧。</p><h4 id="本篇总结"><a href="#本篇总结" class="headerlink" title="本篇总结"></a>本篇总结</h4><p>简单地画了个图表示invoke方法的过程，日后再更时序图：</p><p><a href="http://img.blog.csdn.net/20150626130739796" target="_blank" rel="noopener"><img src="http://img.blog.csdn.net/20150626130739796" alt="invoke方法的过程"></a></p><h4 id="番外篇"><a href="#番外篇" class="headerlink" title="番外篇"></a>番外篇</h4><ol><li>MagicAccessorImpl是什么鬼？</li></ol><p>原本Java的安全机制使得不同类之间不是任意信息都可见，但JDK里面专门设了个MagicAccessorImpl标记类开了个后门来允许不同类之间信息可以互相访问（由JVM管理）：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** &lt;P> MagicAccessorImpl (named for parity with FieldAccessorImpl and    others, not because it actually implements an interface) is a    marker class in the hierarchy. All subclasses of this class are    "magically" granted access by the VM to otherwise inaccessible    fields and methods of other classes. It is used to hold the code    for dynamically-generated FieldAccessorImpl and MethodAccessorImpl    subclasses. (Use of the word "unsafe" was avoided in this class's    name to avoid confusion with {@link sun.misc.Unsafe}.) &lt;/P>    &lt;P> The bug fix for 4486457 also necessitated disabling    verification for this class and all subclasses, as opposed to just    SerializationConstructorAccessorImpl and subclasses, to avoid    having to indicate to the VM which of these dynamically-generated    stub classes were known to be able to pass the verifier. &lt;/P>    &lt;P> Do not change the name of this class without also changing the    VM's code. &lt;/P> */</span><span class="token keyword">class</span> <span class="token class-name">MagicAccessorImpl</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>@CallerSensitive注解又是什么鬼？</li></ol><p>详见：<a href="http://openjdk.java.net/jeps/176" target="_blank" rel="noopener">JEP 176: Mechanical Checking of Caller-Sensitive Methods</a></p><blockquote><p>Summary: Improve the security of the JDK’s method-handle implementation by replacing the existing hand-maintained list of caller-sensitive methods with a mechanism that accurately identifies such methods and allows their callers to be discovered reliably.</p></blockquote><p>JDK 1.8才引进了这个注解，因此在老版本的反射实现里并没有这个玩意。这是它的定义：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * A method annotated @CallerSensitive is sensitive to its calling class, * via {@link sun.reflect.Reflection#getCallerClass Reflection.getCallerClass}, * or via some equivalent. * * @author John R. Rose */</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>METHOD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">CallerSensitive</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简而言之，用<code>@CallerSensitive</code>注解修饰的方法从一开始就知道具体调用它的对象，这样就不用再经过一系列的检查才能确定具体调用它的对象了。它实际上是调用<code>sun.reflect.Reflection.getCallerClass</code>方法。</p><p>Reflection类位于调用栈中的0帧位置，<code>sun.reflect.Reflection.getCallerClass()</code>方法返回调用栈中从0帧开始的第x帧中的类实例。该方法提供的机制可用于确定调用者类，从而实现“感知调用者（Caller Sensitive）”的行为，即允许应用程序根据调用类或调用栈中的其它类来改变其自身的行为。</p><h3 id="HTTP请求的GET和POST方式的区别"><a href="#HTTP请求的GET和POST方式的区别" class="headerlink" title="HTTP请求的GET和POST方式的区别"></a>HTTP请求的GET和POST方式的区别</h3><p>最直观的区别就是GET把参数包含在URL中，POST通过request body传递参数。</p><ul><li>GET在浏览器回退时是无害的，而POST会再次提交请求。</li><li>GET产生的URL地址可以被Bookmark，而POST不可以。</li><li>GET请求会被浏览器主动cache，而POST不会，除非手动设置。 </li><li>GET请求只能进行url编码，而POST支持多种编码方式。</li><li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li><li>GET请求在URL中传送的参数是有长度限制的，而POST么有。</li><li>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</li><li>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</li><li>GET参数通过URL传递，POST放在Request body中。</li></ul><p>HTTP的底层是TCP/IP。所以GET和POST的底层也是TCP/IP，也就是说，GET/POST都是TCP链接。GET和POST能做的事情是一样一样的。你要给GET加上request body，给POST带上url参数，技术上是完全行的通的。 </p><p>HTTP设定了有GET, POST, PUT, DELETE等等，HTTP规定，当执行GET请求的时候，要给请求贴上GET的标签（设置method为GET），而且要求把传送的数据放在url中以方便记录。如果是POST请求，就要在贴上POST的标签，并把数据放在request body里。当然，也可以在GET的时候往request body内偷偷藏点数据，但是这是很不光彩；也可以在POST的时候在url上也放一些数据。HTTP只是个行为准则，而TCP才是GET和POST怎么实现的基本。</p><p>不同的浏览器（发起http请求）和服务器（接受http)。大多数浏览器通常都会限制url长度在2K，而（大多数）服务器最多处理64K大小的url。超过的部分，恕不处理。如果你用GET服务，在request body偷偷藏了数据，不同服务器的处理方式也是不同的，有些服务器会帮你卸货，读出数据，有些服务器直接忽略，所以，虽然GET可以带request body，也不能保证一定能被接收到。</p><p>GET和POST还有一个重大区别，简单的说：</p><p>​    GET产生一个TCP数据包；POST产生两个TCP数据包。</p><p>长的说：</p><p>​    对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；</p><p>而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。</p><p>因为POST需要两步，时间上消耗的要多一点，看起来GET比POST更有效。因此Yahoo团队有推荐用GET替换POST来优化网站性能。但这是一个坑！跳入需谨慎。为什么？</p><ol><li><p>GET与POST都有自己的语义，不能随便混用。</p></li><li><p>据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。</p></li><li><p>并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。</p></li></ol><h3 id="session和cookie的区别"><a href="#session和cookie的区别" class="headerlink" title="session和cookie的区别"></a>session和cookie的区别</h3><p>由于http的无状态性，为了使某个域名下的所有网页能够共享某些数据，session和cookie出现了。客户端访问服务器的流程如下</p><ul><li><p>首先，客户端会发送一个http请求到服务器端。</p></li><li><p>服务器端接受客户端请求后，建立一个<code>session</code>，并发送一个<code>http</code>响应到客户端，这个响应头，其中就包含Set-Cookie头部。该头部包含了<code>sessionId</code>。<code>Set-Cookie</code>格式如下，具体请看<a href="http://bubkoo.com/2014/04/21/http-cookies-explained/" target="_blank" rel="noopener">Cookie详解</a></p><blockquote><p>Set-Cookie: value[; expires=date][; domain=domain][; path=path][; secure]</p></blockquote></li><li><p>在客户端发起的第二次请求，假如服务器给了<code>set-Cookie</code>，浏览器会自动在请求头中添加cookie</p></li><li><p>服务器接收请求，分解<code>cookie</code>，验证信息，核对成功后返回response给客户端</p></li></ul><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li>cookie只是实现session的其中一种方案。虽然是最常用的，但并不是唯一的方法。禁用cookie后还有其他方法存储，比如放在url中</li><li>现在大多都是Session + Cookie，但是只用session不用cookie，或是只用cookie，不用session在理论上都可以保持会话状态。可是实际中因为多种原因，一般不会单独使用</li><li>用session只需要在客户端保存一个id，实际上大量数据都是保存在服务端。如果全部用cookie，数据量大的时候客户端是没有那么多空间的。</li><li>如果只用cookie不用session，那么账户信息全部保存在客户端，一旦被劫持，全部信息都会泄露。并且客户端数据量变大，网络传输的数据量也会变大</li></ul><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p><strong>简而言之, session 有如用户信息档案表, 里面包含了用户的认证信息和登录状态等信息. 而 cookie 就是用户通行证</strong></p><h4 id="token"><a href="#token" class="headerlink" title="token"></a>token</h4><p>token 也称作令牌，由uid+time+sign[+固定参数]<br>token 的认证方式类似于<strong>临时的证书签名</strong>, 并且是一种服务端无状态的认证方式, 非常适合于 REST API 的场景. 所谓无状态就是服务端并不会保存身份认证相关的数据。</p><h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4><ul><li>uid: 用户唯一身份标识</li><li>time: 当前时间的时间戳</li><li>sign: 签名, 使用 hash/encrypt 压缩成定长的十六进制字符串，以防止第三方恶意拼接</li><li>固定参数(可选): 将一些常用的固定参数加入到 token 中是为了避免重复查库</li></ul><h4 id="存放"><a href="#存放" class="headerlink" title="存放"></a>存放</h4><p>token在客户端一般存放于<code>localStorage</code>，cookie，或<code>sessionStorage</code>中。在服务器一般存于数据库中</p><h4 id="token认证流程"><a href="#token认证流程" class="headerlink" title="token认证流程"></a>token认证流程</h4><p>token 的认证流程与cookie很相似</p><ul><li>用户登录，成功后服务器返回Token给客户端。</li><li>客户端收到数据后保存在客户端</li><li>客户端再次访问服务器，将token放入headers中</li><li>服务器端采用filter过滤器校验。校验成功则返回请求数据，校验失败则返回错误码</li></ul><h4 id="token可以抵抗csrf，cookie-session不行"><a href="#token可以抵抗csrf，cookie-session不行" class="headerlink" title="token可以抵抗csrf，cookie+session不行"></a>token可以抵抗<code>csrf</code>，cookie+session不行</h4><p>假如用户正在登陆银行网页，同时登陆了攻击者的网页，并且银行网页未对csrf攻击进行防护。攻击者就可以在网页放一个表单，该表单提交<code>sr</code>c为<code>http://www.bank.com/api/transfer</code>，body为<code>count=1000&amp;to=Tom</code>。倘若是session+cookie，用户打开网页的时候就已经转给Tom 1000元了.因为<code>form</code> 发起的 POST 请求并不受到浏览器同源策略的限制，因此可以任意地使用其他域的 Cookie 向其他域发送 POST 请求，形成 <code>CSRF</code> 攻击。在post请求的瞬间，cookie会被浏览器自动添加到请求头中。但<code>token</code>不同，<code>token</code>是开发者为了防范csrf而特别设计的令牌，浏览器不会自动添加到headers里，攻击者也无法访问用户的token，所以提交的表单无法通过服务器过滤，也就无法形成攻击。</p><h4 id="分布式情况下的session和token"><a href="#分布式情况下的session和token" class="headerlink" title="分布式情况下的session和token"></a>分布式情况下的session和token</h4><p>我们已经知道session时有状态的，一般存于服务器内存或硬盘中，当服务器采用分布式或集群时，session就会面对负载均衡问题。</p><ul><li>负载均衡多服务器的情况，不好确认当前用户是否登录，因为多服务器不共享session。这个问题也可以将session存在一个服务器中来解决，但是就不能完全达到负载均衡的效果。当今的几种<a href="http://blog.51cto.com/zhibeiwang/1965018" target="_blank" rel="noopener">解决session负载均衡</a>的方法。</li></ul><p>而token是无状态的，token字符串里就保存了所有的用户信息</p><ul><li>客户端登陆传递信息给服务端，服务端收到后把用户信息加密（token）传给客户端，客户端将token存放于localStroage等容器中。客户端每次访问都传递token，服务端解密token，就知道这个用户是谁了。通过cpu加解密，服务端就不需要存储session占用存储空间，就很好的解决负载均衡多服务器的问题了。这个方法叫做[JWT(Json Web Token)](<a href="https://huanqiang.wang/2017/12/28/JWT" target="_blank" rel="noopener">https://huanqiang.wang/2017/12/28/JWT</a> 介绍/)</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>session存储于服务器，可以理解为一个状态列表，拥有一个唯一识别符号sessionId，通常存放于cookie中。服务器收到cookie后解析出sessionId，再去session列表中查找，才能找到相应session。依赖cookie</li><li>cookie类似一个令牌，装有sessionId，存储在客户端，浏览器通常会自动添加。</li><li>token也类似一个令牌，无状态，用户信息都被加密到token中，服务器收到token后解密就可知道是哪个用户。需要开发者手动添加。</li><li><code>jwt</code>只是一个跨域认证的方案</li></ul><h4 id="注意区别"><a href="#注意区别" class="headerlink" title="注意区别"></a>注意区别</h4><h4 id="1、存储位置不同"><a href="#1、存储位置不同" class="headerlink" title="1、存储位置不同"></a>1、存储位置不同</h4><ul><li><p>cookie的数据信息存放在客户端浏览器上。</p></li><li><p>session的数据信息存放在服务器上。</p><h4 id="2、存储容量不同"><a href="#2、存储容量不同" class="headerlink" title="2、存储容量不同"></a>2、存储容量不同</h4></li><li><p>单个cookie保存的数据<code>&lt;=4KB</code>，一个站点最多保存20个Cookie。</p></li><li><p>对于session来说并没有上限，但出于对服务器端的性能考虑，session内不要存放过多的东西，并且设置session删除机制。</p><h4 id="3、存储方式不同"><a href="#3、存储方式不同" class="headerlink" title="3、存储方式不同"></a>3、存储方式不同</h4></li><li><p>cookie中只能保管ASCII字符串，并需要通过编码方式存储为Unicode字符或者二进制数据。</p></li><li><p>session中能够存储任何类型的数据，包括且不限于string，integer，list，map等。</p><h4 id="4、隐私策略不同"><a href="#4、隐私策略不同" class="headerlink" title="4、隐私策略不同"></a>4、隐私策略不同</h4></li><li><p>cookie对客户端是可见的，别有用心的人可以分析存放在本地的cookie并进行cookie欺骗，所以它是不安全的。</p></li><li><p>session存储在服务器上，对客户端是透明对，不存在敏感信息泄漏的风险。</p><h4 id="5、有效期上不同"><a href="#5、有效期上不同" class="headerlink" title="5、有效期上不同"></a>5、有效期上不同</h4></li><li><p>开发可以通过设置cookie的属性，达到使cookie长期有效的效果。</p></li><li><p>session依赖于名为<code>JSESSIONID</code>的cookie，而cookie <code>JSESSIONID</code>的过期时间默认为-1，只需关闭窗口该session就会失效，因而session不能达到长期有效的效果。</p><h4 id="6、服务器压力不同"><a href="#6、服务器压力不同" class="headerlink" title="6、服务器压力不同"></a>6、服务器压力不同</h4></li><li><p>cookie保管在客户端，不占用服务器资源。对于并发用户十分多的网站，cookie是很好的选择。</p></li><li><p>session是保管在服务器端的，每个用户都会产生一个session。假如并发访问的用户十分多，会产生十分多的session，耗费大量的内存。</p><h4 id="7、浏览器支持不同"><a href="#7、浏览器支持不同" class="headerlink" title="7、浏览器支持不同"></a>7、浏览器支持不同</h4><p>假如客户端浏览器不支持cookie：</p></li><li><p>cookie是需要客户端浏览器支持的，假如客户端禁用了cookie，或者不支持cookie，则会话跟踪会失效。关于WAP上的应用，常规的cookie就派不上用场了。</p></li><li><p>运用session需要使用URL地址重写的方式。一切用到session程序的URL都要进行URL地址重写，否则session会话跟踪还会失效。</p><p>假如客户端支持cookie：</p></li><li><p>cookie既能够设为本浏览器窗口以及子窗口内有效，也能够设为一切窗口内有效。</p></li><li><p>session只能在本窗口以及子窗口内有效。</p><h4 id="8、跨域支持上不同"><a href="#8、跨域支持上不同" class="headerlink" title="8、跨域支持上不同"></a>8、跨域支持上不同</h4></li><li><p>cookie支持跨域名访问。</p></li><li><p>session不支持跨域名访问。</p></li></ul><h3 id="session-分布式处理"><a href="#session-分布式处理" class="headerlink" title="session 分布式处理"></a>session 分布式处理</h3><h3 id="JDBC-流程"><a href="#JDBC-流程" class="headerlink" title="JDBC 流程"></a>JDBC 流程</h3><p><strong>通过JDBC操作数据库——步骤：</strong></p><p>　　第1步：注冊驱动 (仅仅做一次)</p><p>　　第2步：建立连接(Connection)</p><p>　　第3步：创建运行SQL的语句(Statement)</p><p>　　第4步：运行语句</p><p>　　第5步：处理运行结果(ResultSet)</p><p>　　第6步：释放资源</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1. 使用JDBC第一步：载入驱动</span>　　注冊驱动有三种方式：　　<span class="token number">1</span><span class="token punctuation">.</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>“com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driver”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//推荐这样的方式，不会对详细的驱动类产生依赖</span>　　<span class="token number">2</span><span class="token punctuation">.</span> DriverManager<span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driver<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//会对详细的驱动类产生依赖</span>　　<span class="token number">3</span><span class="token punctuation">.</span> System<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>“jdbc<span class="token punctuation">.</span>drivers”<span class="token punctuation">,</span> “driver1<span class="token operator">:</span>driver2”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//尽管不会对详细的驱动类产生依赖；但注冊不太方便。所以非常少使用</span><span class="token number">2</span><span class="token punctuation">.</span> 使用JDBC第二步：建立连接　　通过Connection建立连接，Connection是一个接口类。其功能是与数据库进行连接（会话）。　　建立Connection接口类对象：　　Connection conn <span class="token operator">=</span>DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>　　当中URL的格式要求为：　　JDBC<span class="token operator">:</span>子协议<span class="token operator">:</span>子名称<span class="token comment" spellcheck="true">//主机名:port/数据库名？属性名=属性值&amp;…</span>　　如："jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>test“　　user即为登录数据库的username，如root　　password即为登录数据库的密码，为空就填””<span class="token number">3</span><span class="token punctuation">.</span> 使用JDBC第三步：创建运行对象　　运行对象Statement负责运行SQL语句。由Connection对象产生。　　Statement st <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　Statement接口类还派生出两个接口类PreparedStatement和CallableStatement，这两个接口类对象为我们提供了更加强大的数据訪问功能。　　PreparedStatement能够对SQL语句进行预编译，这样防止了SQL注入提高了安全性。　　PreparedStatement  ps<span class="token operator">=</span>connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span> "update user set id<span class="token operator">=</span><span class="token operator">?</span> where username<span class="token operator">=</span><span class="token operator">?</span>”<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//sql语句中庸 ？ 作为通配符，变量值通过参数设入：ps.setObject(1, object);</span>　　而且预编译结果能够存储在PreparedStatement对象中。当多次运行SQL语句时能够提高效率。　　作为Statement的子类，PreparedStatement继承了Statement的全部函数。　　CallableStatement接口　　CallableStatement类继承了PreparedStatement类，他主要用于运行SQL存储过程。　　在JDBC中运行SQL存储过程须要转义。　　JDBC API提供了一个SQL存储过程的转义语法：　　<span class="token punctuation">{</span>call<span class="token operator">&lt;</span>procedure<span class="token operator">-</span>name<span class="token operator">></span><span class="token punctuation">[</span><span class="token operator">&lt;</span>arg1<span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">&lt;</span>arg2<span class="token operator">></span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">}</span>　　procedure<span class="token operator">-</span>name：是所要运行的SQL存储过程的名字　　<span class="token punctuation">[</span><span class="token operator">&lt;</span>arg1<span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">&lt;</span>arg2<span class="token operator">></span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>：是相相应的SQL存储过程所须要的參数<span class="token number">4</span><span class="token punctuation">.</span> 使用JDBC第四步：运行SQL语句　　运行对象Statement 或 PreparedStatement 提供两个经常使用的方法来运行SQL语句。　　<span class="token function">executeQuery</span><span class="token punctuation">(</span>Stringsql<span class="token punctuation">)</span><span class="token punctuation">,</span>该方法用于运行实现查询功能的sql语句。返回类型为ResultSet（结果集）。　　如：ResultSet  rs <span class="token operator">=</span>st<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>　　<span class="token function">executeUpdate</span><span class="token punctuation">(</span>Stringsql<span class="token punctuation">)</span><span class="token punctuation">,</span>该方法用于运行实现增、删、改功能的sql语句，返回类型为<span class="token keyword">int</span>，即受影响的行数。　　如：<span class="token keyword">int</span> flag <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">5</span><span class="token punctuation">.</span> 使用JDBC第五步：处理运行结果　　ResultSet对象　　ResultSet对象负责保存Statement运行后所产生的查询结果。　　结果集ResultSet是通过游标来操作的。　　游标就是一个可控制的、能够指向随意一条记录的指针。　　有了这个指针我们就能轻易地指出我们要对结果集中的哪一条记录进行改动、删除，或者要在哪一条记录之前插入数据。一个结果集对象中仅仅包括一个游标。 　　另外，借助ResultSetMetaData ，可以将数据表的结构信息都查出来。　　ResultSetMetaData rsmd<span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>使用JDBC <span class="token number">6</span><span class="token punctuation">.</span> 第六步——释放资源　　数据库资源不关闭，其占用的内存不会被释放，徒耗资源，影响系统。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="MVC-设计思想"><a href="#MVC-设计思想" class="headerlink" title="MVC 设计思想"></a>MVC 设计思想</h3><p>MVC(Model View Controller)是一种软件设计的框架模式，它采用模型(Model)-视图(View)-控制器(controller)的方法把业务逻辑、数据与界面显示分离。把众多的业务逻辑聚集到一个部件里面，当然这种比较官方的解释是不能让我们足够清晰的理解什么是MVC的。用通俗的话来讲，MVC的理念就是把数据处理、数据展示(界面)和程序/用户的交互三者分离开的一种编程模式。</p><p>MVC框架模式是一种复合模式，MVC的三个核心部件分别是</p><p>1：Model(模型)：所有的用户数据、状态以及程序逻辑，独立于视图和控制器</p><p>2：View(视图)：呈现模型，类似于Web程序中的界面，视图会从模型中拿到需要展现的状态以及数据，对于相同的数据可以有多种不同的显示形式(视图)</p><p>3：Controller(控制器)：负责获取用户的输入信息，进行解析并反馈给模型，通常情况下一个视图具有一个控制器</p><h6 id="1-2：为什么要使用MVC"><a href="#1-2：为什么要使用MVC" class="headerlink" title="1.2：为什么要使用MVC"></a>1.2：为什么要使用MVC</h6><p>程序通过将M(Model)和V(View)的代码分离，实现了前后端代码的分离，会带来几个好处</p><ol><li><p>可以使同一个程序使用不同的表现形式，如果控制器反馈给模型的数据发生了变化，那么模型将及时通知有关的视图，视图会对应的刷新自己所展现的内容</p></li><li><p>因为模型是独立于视图的，所以模型可复用，模型可以独立的移植到别的地方继续使用</p></li><li><p>前后端的代码分离，使项目开发的分工更加明确，程序的测试更加简便，提高开发效率<br>其实控制器的功能类似于一个中转站，会决定调用那个模型去处理用户请求以及调用哪个视图去呈现给用户</p></li></ol><h6 id="1-3：JavaWeb中MVC模式的应用"><a href="#1-3：JavaWeb中MVC模式的应用" class="headerlink" title="1.3：JavaWeb中MVC模式的应用"></a>1.3：JavaWeb中MVC模式的应用</h6><p>在JavaWeb程序中，MVC框架模式是经常用到的，举一个Web程序的结构可以更好的理解MVC的理念</p><p>V：View视图，Web程序中指用户可以看到的并可以与之进行数据交互的界面，比如一个Html网页界面，或者某些客户端的界面，在前面讲过，MVC可以为程序处理很多不同的视图，用户在视图中进行输出数据以及一系列操作，注意：视图中不会发生数据的处理操作。</p><p>M：Model模型：进行所有数据的处理工作，模型返回的数据是中立的，和数据格式无关，一个模型可以为多个视图来提供数据，所以模型的代码重复性比较低</p><p>C：Controller控制器：负责接受用户的输入，并且调用模型和视图去完成用户的需求，控制器不会输出也不会做出任何处理，只会接受请求并调用模型构件去处理用户的请求，然后在确定用哪个视图去显示返回的数据</p><h6 id="1-4：Web程序中MVC模式的优点"><a href="#1-4：Web程序中MVC模式的优点" class="headerlink" title="1.4：Web程序中MVC模式的优点"></a>1.4：Web程序中MVC模式的优点</h6><ul><li><p>耦合性低：视图(页面)和业务层(数据处理)分离，一个应用的业务流程或者业务规则的改变只需要改动MVC中的模型即可，不会影响到控制器与视图</p></li><li><p>部署快，成本低：MVC使开发和维护用户接口的技术含量降低。使用MVC模式使开发时间得到相当大的缩减，它使程序员（Java开发人员）集中精力于业务逻辑，界面程序员（HTML和JSP开发人员）集中精力于表现形式上</p></li><li><p>可维护性高：分离视图层和业务逻辑层也使得WEB应用更易于维护和修改</p></li></ul><h6 id="1-5：Web程序中MVC模式的缺点"><a href="#1-5：Web程序中MVC模式的缺点" class="headerlink" title="1.5：Web程序中MVC模式的缺点"></a>1.5：Web程序中MVC模式的缺点</h6><p>调试困难：因为模型和视图要严格的分离，这样也给调试应用程序带来了一定的困难，每个构件在使用之前都需要经过彻底的测试</p><p>不适合小型，中等规模的应用程序：在一个中小型的应用程序中，强制性的使用MVC进行开发，往往会花费大量时间，并且不能体现MVC的优势，同时会使开发变得繁琐</p><p>增加系统结构和实现的复杂性：对于简单的界面，严格遵循MVC，使模型、视图与控制器分离，会增加结构的复杂性，并可能产生过多的更新操作，降低运行效率</p><p>视图与控制器间的过于紧密的连接并且降低了视图对模型数据的访问：视图与控制器是相互分离，但却是联系紧密的部件，视图没有控制器的存在，其应用是很有限的，反之亦然，这样就妨碍了他们的独立重用。依据模型操作接口的不同，视图可能需要多次调用才能获得足够的显示数据。对未变化数据的不必要的频繁访问，也将损害操作性能</p><h5 id="2、Spring-MVC框架"><a href="#2、Spring-MVC框架" class="headerlink" title="2、Spring MVC框架"></a>2、Spring MVC框架</h5><p>现在MVC框架已经有很多了，Struts、Webwork，新兴的MVC框架有Spring MVC、JSF等等，本文主要介绍Spring MVC的设计理念</p><p>Struts1.0是基于webwork的MVC框架，里面有很多类的继承关系，耦合性太高，之后推出了struts2.0，但是这个MVC框架对于视图的解析还是存在一些小的不妥之处，所以产生了Spring MVC</p><h6 id="2-1、Spring-MVC简介及特点"><a href="#2-1、Spring-MVC简介及特点" class="headerlink" title="2.1、Spring MVC简介及特点"></a>2.1、Spring MVC简介及特点</h6><p>Spring MVC采用了松散耦合的可插拔组件结构，比其他的MVC框架更具有灵活性和扩展性，Spring MVC通过使用一套注解，使一个Java类成为前端控制器(Controller)，不需要实现任何接口，同时，Spring MVC支持RES形式的URL请求，除此之外，Spring MVC在在数据绑定、视图解析、本地化处理及静态资源处理上都有许多不俗的表现。</p><p>Spring MVC围绕DispatcherServlet(前端控制器)为中心展开，DispatcherServlet(前端控制器)是Spring MVC的中枢，和MVC的思想一样，它负责从视图获取用户请求并且分派给相应的处理器处理，并决定用哪个视图去把数据呈现给给用户</p><h6 id="Spring-MVC特点"><a href="#Spring-MVC特点" class="headerlink" title="Spring MVC特点"></a>Spring MVC特点</h6><ol><li>让我们能非常简单的设计出干净的Web层和薄薄的Web层；</li><li>进行更简洁的Web层的开发；</li><li>天生与Spring框架集成（如IoC容器、AOP等）;</li><li>提供强大的约定大于配置的契约式编程支持；</li><li>能简单的进行Web层的单元测试；</li><li>支持灵活的URL到页面控制器的映射；</li><li>非常容易与其它视图技术集成，如Velocity、FreeMarker等，因为模型数据不放在特定的API里，而是放在一 个Model里（Map数据结构实现，因此很容易被其他框架使用）；</li><li>非常灵活的数据验证、格式化和数据绑定机制，能使用任何对象进行数据绑定，不必实现特定框架的API；</li><li>提供一套强大的JSP标签库，简化JSP开发；</li><li>支持灵活的本地化、主题等解析；</li><li>更加简单的异常处理；</li><li>对静态资源的支持； 支持Restful风格。</li></ol><h6 id="2-2：Spring-MVC请求响应"><a href="#2-2：Spring-MVC请求响应" class="headerlink" title="2.2：Spring MVC请求响应"></a>2.2：Spring MVC请求响应</h6><p>SpringMVC把视图渲染、请求处理、模型创建分离了，遵循了MVC框架模式的思想</p><p>SpringMVC的请求相应要经过七个阶段，蓝色的方框是Spring框架已经实现好的，第二阶段到第六阶段对应着Spring MVC中的一些核心理念，分别是前端控制器、处理映射器、控制器(处理器)、视图解析器、视图。要注意的是：前端控制器和控制器不是一个东西，前端控制器负责任务分发，控制器是模型的一部分，负责业务和数据的处理</p><p>SpringMVC核心控制类的请求流程</p><h6 id="SpringMVC的请求相应步骤如下"><a href="#SpringMVC的请求相应步骤如下" class="headerlink" title="SpringMVC的请求相应步骤如下"></a>SpringMVC的请求相应步骤如下</h6><p>1、用户向服务器发送请求，请求被Spring 前端控制Servelt DispatcherServlet捕获</p><p>2、DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI）。然后根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain对象的形式返回</p><p>3、DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。（附注：如果成功获得HandlerAdapter后，此时将开始执行拦截器的preHandler(…)方法）</p><p>4、提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)。 在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作</p><p>HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息<br>    1. 数据转换：对请求消息进行数据转换。如String转换成Integer、Double等<br>    2. 数据根式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等<br>    3. 数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</p><p>5、Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象</p><p>6、根据返回的ModelAndView，选择一个适合的ViewResolver（必须是已经注册到Spring容器中的ViewResolver)返回给DispatcherServlet </p><p>7、ViewResolver 结合Model和View，来渲染视图</p><p>8、将渲染结果返回给客户端</p><h5 id="3、SpringMVC-项目简单搭建"><a href="#3、SpringMVC-项目简单搭建" class="headerlink" title="3、SpringMVC 项目简单搭建"></a>3、SpringMVC 项目简单搭建</h5><p>搭建一个简单的Spring MVC项目，我们只需要有一个Web服务器(tomcat)和一个IDE就可以了，我选择的是tomcat8.5+IDEA,下图是项目的结构</p><p>1、首先创建一个Maven项目，添加pom依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.bittech<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springmvc-case<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 打包类型 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-framework-bom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Spring MVC 框架依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Java Servlet API 3.1 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- JSON 处理库--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.google.code.gson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>gson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为用到了Spring MVC框架，所以需要导入MVC的依赖，而且，前端控制器是一个Servlet，所以也要导入Servlet API</p><p>2、配置Web.xml</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee                      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3.1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>This is Java Spring MVC web application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--设置根上下文配置文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:application-context.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--注册ContextLoaderListener--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>            org.springframework.web.context.ContextLoaderListener        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--前端控制器，注册DispatcherServlet--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--加入配置SpringMVC容器--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:application-servlet.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--将DispatcherServlet映射到‘/’--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>web.xml文件位于src/main/webapp/WEB-INF/web.xml下，在项目的结构里可以看见在WEB-INF目录下有一个view的目录，所有的视图文件都放在这里，此项目的视图为jsp，为什么要把视图文件都放在WEB-INF下呢？因为…</p><p>客户端是没有办法看到WEB-INF中的内容的，如果把jsp文件写到webapp里面，抛异常之后代码就会显现出来，网页容易被攻击。视图文件都放在WEB-INF中客户应该访问的是地址，而不是文件，不能暴露实现网站的方式。</p><p>3、配置Spring MVC容器</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd   http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置视图解析器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/views/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 扫描包  control --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.dxy<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 启用注解SpringMVC --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>    在配置前端控制器的时候需要把Spring MVC容器作为属性配置到Servlet中，此容器中配置的是视图解析器、控制器(模型)以及SpringMVC的注解驱动。</code></pre><p>4、配置一个Controller</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>eee<span class="token punctuation">.</span>control<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>eee<span class="token punctuation">.</span>service<span class="token punctuation">.</span>MVCservice<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMethod<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ModelAndView<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Controller1</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//业务层访问对象</span>    <span class="token keyword">private</span> MVCservice mvCservice<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"index"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> ModelAndView <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ModelAndView modelAndView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"datetime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        modelAndView<span class="token punctuation">.</span><span class="token function">addAllObjects</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> modelAndView<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MVC容器中的自动扫描可以扫描到带有@Controller注解的类，Controller类进行业务的处理和数据的访问，例如这个类中有数据访问层的对象，还有类中的一些数据。这个类的返回值为ModelAndView，进行数据处理后返回数据和视图给前端控制器</p><p>前端控制器可以通过修改RequestMapping注解中的Value值来改变数据最终反馈到的视图</p><p>5、创建一个视图</p><pre class="line-numbers language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>    <title>Spring MVC</title></head><body><h1>当前时间:${datetime}</h1></body></html><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 视图可以提取模型中的数据，例如：这个界面可以提取出模型中的datetime的值</p><p>最终呈现给用户的界面</p><h3 id="equals-与-区别"><a href="#equals-与-区别" class="headerlink" title="equals 与 == 区别"></a>equals 与 == 区别</h3><p>==和equals()的区别:</p><p>==:判断两个字符串在内存中首地址是否相同,即判断两者是否是同一个字符串对象</p><p>equles():如果没有重写equals()方法比较的是对象的地址,因为对Object来说对象没有什么属性可以比较,只能比较最底层的地址.</p><p>而如果重写equals()方法时,该方法的对象因为是Object的子类,所以调用时会调用子类对象里面的方法.所以只有重写equals()方法后,两者比较的才是内容.或者说重写可以使自己定义比较的规则,不想按照地址去比较。</p><p>Java语言对equals()的要求如下，这些要求是必须遵循的：<br>　　对称性：如果x.equals(y)返回是“true”，那么y.equals(x)也应该返回是“true”。<br>　　反射性：x.equals(x)必须返回是“true”。<br>　　类推性：如果x.equals(y)返回是“true”，而且y.equals(z)返回是“true”，那么z.equals(x)也应该返回是“true”。<br>　　一致性：如果x.equals(y)返回是“true”，只要x和y内容一直不变，不管你重复x.equals(y)多少次，返回都是“true”。<br>　　任何情况下，x.equals(null)，永远返回是“false”；x.equals(和x不同类型的对象)永远返回是“false”。<br>　　以上这五点是重写equals()方法时，必须遵守的准则，如果违反会出现意想不到的结果，请大家一定要遵守</p><p>　　hashCode方法默认返回对象的地址,String,Integer等封装类型对它进行了重写返回一个整数<br>　　该整数的取值来自于当前字符串的每个字母的编码值.公示如下<br>　　public int hashCode(){<br>　　　　return “abcde”.hashCode();<br>　　}</p><p>“==”比较的是地址。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java泛型深入应用</title>
      <link href="/2019/09/07/Java%E6%B3%9B%E5%9E%8B%E6%B7%B1%E5%85%A5/"/>
      <url>/2019/09/07/Java%E6%B3%9B%E5%9E%8B%E6%B7%B1%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://www.cnblogs.com/cherryljr/p/6880657.html" target="_blank" rel="noopener">https://www.cnblogs.com/cherryljr/p/6880657.html</a></p></blockquote><h2 id="lt-T-extends-Comparable-lt-super-T-gt-gt-代表什么意思"><a href="#lt-T-extends-Comparable-lt-super-T-gt-gt-代表什么意思" class="headerlink" title="&lt;T extends Comparable&lt;? super T&gt;&gt;代表什么意思"></a><strong>&lt;T extends Comparable&lt;? super T&gt;&gt;代表什么意思</strong></h2><ul><li>大家可以明白的是这里应用到了Java的泛型，那么首先向大家说明一下这里extends的作用</li></ul><p>　　extends后面跟的类型，如&lt;任意字符 extends 类/接口&gt;表示泛型的上限。示例代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">List</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Demo<span class="token operator">&lt;</span>ArrayList<span class="token operator">></span> p <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 编译正确</span><span class="token comment" spellcheck="true">//这里因为ArrayList是List的子类所以通过</span><span class="token comment" spellcheck="true">//如果改为Demo&lt;Collection> p = null;就会报错这样就限制了上限</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在理解了extends所表示的泛型的上限后，接下来介绍一下super的作用，它与extends相反，表示的是泛型的下限。</li><li>所以结合上述两点，我们来分析一下这句话整体代表什么意思。首先，extends对泛型上限进行了限制即T必须是Comparable&lt;? super T&gt;的子类，然后&lt;? super T&gt;表示Comparable&lt;&gt;中的类型下限为T！</li></ul><p>　<a id="more"></a></p><h2 id="lt-T-extends-Comparable-lt-T-gt-gt-和-lt-T-extends-Comparable-lt-super-T-gt-gt-有什么不同"><a href="#lt-T-extends-Comparable-lt-T-gt-gt-和-lt-T-extends-Comparable-lt-super-T-gt-gt-有什么不同" class="headerlink" title="&lt;T extends Comparable&lt;T&gt;&gt; 和 &lt;T extends Comparable&lt;? super T&gt;&gt; 有什么不同**"></a><code>&lt;T extends Comparable&lt;T&gt;&gt;</code> 和 <code>&lt;T extends Comparable&lt;? super T&gt;&gt;</code> 有什么不同**</h2><ul><li><strong>&lt;T extends Comparable<T>&gt;</strong></li></ul><p>　　它代表的意思是：类型T必须实现<code>Comparable</code>接口，并且这个接口的类型是T。这样，T的实例之间才能相互比较大小。这边我们以Java中GregorianCalendar这个类为例。</p><p>　　代码如下所示：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>GregorianCalendar<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>T<span class="token operator">>></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//注意这里是没有? super的</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>       Demo<span class="token operator">&lt;</span>GregorianCalendar<span class="token operator">></span> p <span class="token operator">=</span> null<span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　这里编译报错，因为这里的<code>&lt;T extends Comparable&lt;T&gt;&gt;</code>相当于<code>&lt;GregorianCalendar extends Comparable&lt;GregorianCalendar&gt;&gt;</code>，但是<code>GregorianCalendar</code>中并没有实现<code>Comparable&lt;GregorianCalendar&gt;</code>，而是仅仅持有从<code>Calendar</code>继承过来的<code>Comparable&lt;Calendar&gt;</code>，这样就会因为不在限制范围内而报错。</p><ul><li><strong>&lt;T extends Comparable&lt;? super T&gt;&gt;</strong>　　</li></ul><p>　　它代表的意思是：类型T必须实现<code>Comparable</code>接口，并且这个接口的类型是T或者是T的任一父类。这样声明后，T的实例之间和T的父类的实例之间可以相互比较大小。同样还是以<code>GregorianCalendar</code>为例。代码如下所示：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>GregorianCalendar<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">>></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>       Demo<span class="token operator">&lt;</span>GregorianCalendar<span class="token operator">></span> p <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 编译正确</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>　　<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　此时编译通过，这里可以理解为<code>&lt;GregorianCalendar extends Comparable&lt;Calendar&gt;&gt;！</code>因为<code>Calendar</code>为<code>GregorianCalendar</code> 的父类并且<code>GregorianCalendar</code> 实现了<code>Comparable&lt;Calendar&gt;</code>，具体可以在API中进行查看！<br>　　<br>代码如下所示：</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//第一种声明：简单，灵活性低</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>T<span class="token operator">>></span> <span class="token keyword">void</span> <span class="token function">mySort1</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>         Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//第二种声明：复杂，灵活性高</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">>></span> <span class="token keyword">void</span> <span class="token function">mySort2</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>         Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//主函数中将分别创建Animal和Dog两个序列，然后调用排序方法对其进行测试　　　　　</span>         <span class="token comment" spellcheck="true">//main函数中具体的两个版本代码将在下面具体展示</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Animal<span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token keyword">protected</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//使用年龄与另一实例比较大小</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Animal other<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">-</span> other<span class="token punctuation">.</span>age<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">super</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码包括三个类：</p><ol><li><code>Animal</code>实现了<code>Comparable&lt;Animal&gt;</code>接口，通过年龄来比较实例的大小</li><li>Dog从Animal继承，为其子类。</li><li>Test<code>类中提供了两个排序方法和测试用的</code>main()`方法：</li></ol><ul><li><code>mySort1()</code>使用<code>&lt;T extends Comparable&lt;T&gt;&gt;</code>类型参数</li><li><code>mySort2()</code>使用<code>&lt;T extends Comparable&lt;? super T&gt;&gt;</code>类型参数</li><li><code>main()</code>测试方法。在这里将分别创建Animal和Dog两个序列，然后调用排序方法对其进行测试。</li></ul><h3 id="对mySort1-进行测试，main方法代码如下所示："><a href="#对mySort1-进行测试，main方法代码如下所示：" class="headerlink" title="对mySort1()进行测试，main方法代码如下所示："></a>对<code>mySort1()</code>进行测试，main方法代码如下所示：</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建一个 Animal List</span>List<span class="token operator">&lt;</span>Animal<span class="token operator">></span> animals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Animal<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>animals<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>animals<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建一个 Dog List</span>List<span class="token operator">&lt;</span>Dog<span class="token operator">></span> dogs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Dog<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dogs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dogs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 测试  mySort1() 方法</span><span class="token function">mySort1</span><span class="token punctuation">(</span>animals<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mySort1</span><span class="token punctuation">(</span>dogs<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　结果编译出错，报错信息为：</p><pre class="line-numbers language-java"><code class="language-java">The method <span class="token function">mySort1</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> in the type TypeParameterTest is not applicable <span class="token keyword">for</span> the <span class="token function">arguments</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Dog<span class="token operator">></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>　　<code>mySort1()</code>方法的类型参数是<code>&lt;T extends Comparable&lt;T&gt;&gt;</code>，它要求的类型参数是类型为T的Comparable。</p><p>　　如果传入的是<code>List&lt;Animal&gt;</code>程序将正常执行，因为Animal实现了接口<code>Comparable&lt;Animal&gt;</code>。</p><p>　　但是，如果传入的参数是List<Dog>程序将报错，因为Dog类中没有实现接口<code>Comparable&lt;Dog&gt;</code>，它只从Animal继承了一个<code>Comparable&lt;Animal&gt;</code>接口。</p><p>　　注意：<code>animals list</code>中实际上是包含一个Dog实例的。如果碰上类似的情况（子类list不能传入到一个方法中），可以考虑把子类实例放到一个父类 list 中，避免编译错误。</p><h3 id="对mySort12-进行测试，main方法代码如下所示："><a href="#对mySort12-进行测试，main方法代码如下所示：" class="headerlink" title="对mySort12()进行测试，main方法代码如下所示："></a>对<code>mySort12()</code>进行测试，main方法代码如下所示：</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建一个 Animal List</span>    List<span class="token operator">&lt;</span>Animal<span class="token operator">></span> animals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Animal<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    animals<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    animals<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建一个 Dog List</span>    List<span class="token operator">&lt;</span>Dog<span class="token operator">></span> dogs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Dog<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dogs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dogs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 测试  mySort2() 方法</span>    <span class="token function">mySort2</span><span class="token punctuation">(</span>animals<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mySort2</span><span class="token punctuation">(</span>dogs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　这时候我们发现该程序可以正常运行。它不但能够接受<code>Animal implements Comparable&lt;Animal&gt;</code>这样的参数，也可以接收：<code>Dog implements Comparable&lt;Animal&gt;</code>这样的参数。</p><h2 id="是否可以通过将Dog实现Comparable来解决问题？"><a href="#是否可以通过将Dog实现Comparable来解决问题？" class="headerlink" title="是否可以通过将Dog实现Comparable来解决问题？"></a>是否可以通过将Dog实现Comparable<Dog>来解决问题？</h2><p>　　由分析可得程序出现问题是因为Dog类没有实现接口<code>Comparable&lt;Dog&gt;</code>，那么我们能否将该类实现接口<code>Comparable&lt;Dog&gt;</code>来解决问题呢？</p><p>　　代码如下所示：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Dog<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　结果程序编译报错，错误信息如下所示：</p><pre class="line-numbers language-java"><code class="language-java">The <span class="token keyword">interface</span> <span class="token class-name">Comparable</span> cannot be implemented more than once with different arguments<span class="token operator">:</span> Comparable<span class="token operator">&lt;</span>Animal<span class="token operator">></span> and Comparable<span class="token operator">&lt;</span>Dog<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>　　意义是Dog类已经从Animal中继承了Comparable该接口，无法再实现一个Comparable。</p><p>　　若子类需要使用自己的比较方法，则需要重写父类的<code>public int CompareTo(Animal other)</code>方法。</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>　　对<code>Animal/Dog</code>这两个有父子关系的类来说：<code>&lt;T extends Comparable&lt;? super T&gt;&gt;</code>可以接受<code>List&lt;Animal&gt;</code>，也可以接收 <code>List&lt;Dog&gt;</code> 。而<code>&lt;T extends Comparable&lt;T&gt;&gt;</code>只可以接收 <code>List&lt;Animal&gt;</code>所以，<code>&lt;T extends Comparable&lt;? super T&gt;&gt;</code>这样的类型参数对所传入的参数限制更少，提高了 API 的灵活性。总的来说，在保证类型安全的前提下，要使用限制最少的类型参数。</p><h1 id="全面"><a href="#全面" class="headerlink" title="全面"></a>全面</h1><blockquote><p><a href="https://www.cnblogs.com/coprince/p/8603492.html" target="_blank" rel="noopener">java 泛型详解-绝对是对泛型方法讲解最详细的，没有之一</a></p></blockquote><pre><code>对java的泛型特性的了解仅限于表面的浅浅一层，直到在学习设计模式时发现有不了解的用法，才想起详细的记录一下。本文参考java 泛型详解、Java中的泛型方法、 java泛型详解</code></pre><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>泛型在java中有很重要的地位，在面向对象编程及各种设计模式中有非常广泛的应用。</p><p>什么是泛型？为什么要使用泛型？</p><pre class="line-numbers language-java"><code class="language-java">泛型，即“参数化类型”。一提到参数，最熟悉的就是定义方法时有形参，然后调用此方法时传递实参。那么参数化类型怎么理解呢？顾名思义，就是将类型由原来的具体的类型参数化，类似于方法中的变量参数，此时类型也定义成参数形式（可以称之为类型形参），然后在使用<span class="token operator">/</span>调用时传入具体的类型（类型实参）。泛型的本质是为了参数化类型（在不创建新的类型的情况下，通过泛型指定的不同类型来控制形参具体限制的类型）。也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="2-一个栗子"><a href="#2-一个栗子" class="headerlink" title="2. 一个栗子"></a>2. 一个栗子</h1><p>一个被举了无数次的例子：</p><pre class="line-numbers language-java"><code class="language-java">List arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aaaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> arrayList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    String item <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>arrayList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"泛型测试"</span><span class="token punctuation">,</span><span class="token string">"item = "</span> <span class="token operator">+</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>毫无疑问，程序的运行结果会以崩溃结束：</p><pre class="line-numbers language-java"><code class="language-java">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ClassCastException<span class="token operator">:</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Integer cannot be cast to java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ArrayList可以存放任意类型，例子中添加了一个String类型，添加了一个Integer类型，再使用时都以String的方式使用，因此程序崩溃了。为了解决类似这样的问题（在编译阶段就可以解决），泛型应运而生。</p><p>我们将第一行声明初始化list的代码更改一下，编译器会在编译阶段就能够帮我们发现类似这样的问题。</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">//arrayList.add(100); 在编译阶段，编译器就会报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="3-特性"><a href="#3-特性" class="headerlink" title="3. 特性"></a>3. 特性</h1><p>泛型只在编译阶段有效。看下面的代码：</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> stringArrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> integerArrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class <span class="token class-name">classStringArrayList</span> <span class="token operator">=</span> stringArrayList<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class <span class="token class-name">classIntegerArrayList</span> <span class="token operator">=</span> integerArrayList<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>classStringArrayList<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>classIntegerArrayList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"泛型测试"</span><span class="token punctuation">,</span><span class="token string">"类型相同"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：<code>D/泛型测试: 类型相同</code>。</p><p>通过上面的例子可以证明，在编译之后程序会采取去泛型化的措施。也就是说Java中的泛型，只在编译阶段有效。在编译过程中，正确检验泛型结果后，会将泛型的相关信息擦出，并且在对象进入和离开方法的边界处添加类型检查和类型转换的方法。也就是说，泛型信息不会进入到运行时阶段。</p><p>对此总结成一句话：泛型类型在逻辑上看以看成是多个不同的类型，实际上都是相同的基本类型。</p><h1 id="4-泛型的使用"><a href="#4-泛型的使用" class="headerlink" title="4. 泛型的使用"></a>4. 泛型的使用</h1><p>泛型有三种使用方式，分别为：泛型类、泛型接口、泛型方法</p><h2 id="4-3-泛型类"><a href="#4-3-泛型类" class="headerlink" title="4.3 泛型类"></a>4.3 泛型类</h2><p>泛型类型用于类的定义中，被称为泛型类。通过泛型可以完成对一组类的操作对外开放相同的接口。最典型的就是各种容器类，如：List、Set、Map。</p><p>泛型类的最基本写法（这么看可能会有点晕，会在下面的例子中详解）：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> 类名称 <span class="token operator">&lt;</span>泛型标识：可以随便写任意标识号，标识指定的泛型的类型<span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">private</span> 泛型标识 <span class="token comment" spellcheck="true">/*（成员变量类型）*/</span> var<span class="token punctuation">;</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个最普通的泛型类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</span><span class="token comment" spellcheck="true">//在实例化泛型类时，必须指定T的具体类型</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Generic</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//key这个成员变量的类型为T,T的类型由外部指定  </span>    <span class="token keyword">private</span> T key<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Generic</span><span class="token punctuation">(</span>T key<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//泛型构造方法形参key的类型也为T，T的类型由外部指定</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> T <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//泛型方法getKey的返回值类型为T，T的类型由外部指定</span>        <span class="token keyword">return</span> key<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//泛型的类型参数只能是类类型（包括自定义类），不能是简单类型</span><span class="token comment" spellcheck="true">//传入的实参类型需与泛型的类型参数类型相同，即为Integer.</span>Generic<span class="token operator">&lt;</span>Integer<span class="token operator">></span> genericInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generic</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//传入的实参类型需与泛型的类型参数类型相同，即为String.</span>Generic<span class="token operator">&lt;</span>String<span class="token operator">></span> genericString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generic</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"key_vlaue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"泛型测试"</span><span class="token punctuation">,</span><span class="token string">"key is "</span> <span class="token operator">+</span> genericInteger<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"泛型测试"</span><span class="token punctuation">,</span><span class="token string">"key is "</span> <span class="token operator">+</span> genericString<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token number">12</span><span class="token operator">-</span><span class="token number">27</span> <span class="token number">09</span><span class="token operator">:</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">04.432</span> <span class="token number">13063</span><span class="token operator">-</span><span class="token number">13063</span><span class="token operator">/</span><span class="token operator">?</span> D<span class="token operator">/</span>泛型测试<span class="token operator">:</span> key is <span class="token number">123456</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">27</span> <span class="token number">09</span><span class="token operator">:</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">04.432</span> <span class="token number">13063</span><span class="token operator">-</span><span class="token number">13063</span><span class="token operator">/</span><span class="token operator">?</span> D<span class="token operator">/</span>泛型测试<span class="token operator">:</span> key is key_vlaue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>定义的泛型类，就一定要传入泛型类型实参么？并不是这样，在使用泛型的时候如果传入泛型实参，则会根据传入的泛型实参做相应的限制，此时泛型才会起到本应起到的限制作用。如果不传入泛型类型实参的话，在泛型类中使用泛型的方法或成员变量定义的类型可以为任何的类型。</p><p>看一个例子：</p><pre class="line-numbers language-java"><code class="language-java">Generic generic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generic</span><span class="token punctuation">(</span><span class="token string">"111111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Generic generic1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generic</span><span class="token punctuation">(</span><span class="token number">4444</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Generic generic2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generic</span><span class="token punctuation">(</span><span class="token number">55.55</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Generic generic3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generic</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"泛型测试"</span><span class="token punctuation">,</span><span class="token string">"key is "</span> <span class="token operator">+</span> generic<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"泛型测试"</span><span class="token punctuation">,</span><span class="token string">"key is "</span> <span class="token operator">+</span> generic1<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"泛型测试"</span><span class="token punctuation">,</span><span class="token string">"key is "</span> <span class="token operator">+</span> generic2<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"泛型测试"</span><span class="token punctuation">,</span><span class="token string">"key is "</span> <span class="token operator">+</span> generic3<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">D<span class="token operator">/</span>泛型测试<span class="token operator">:</span> key is <span class="token number">111111</span>D<span class="token operator">/</span>泛型测试<span class="token operator">:</span> key is <span class="token number">4444</span>D<span class="token operator">/</span>泛型测试<span class="token operator">:</span> key is <span class="token number">55.55</span>D<span class="token operator">/</span>泛型测试<span class="token operator">:</span> key is <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><ul><li>泛型的类型参数只能是类类型，不能是简单类型。</li><li>不能对确切的泛型类型使用instanceof操作。如下面的操作是非法的，编译时会出错。</li></ul><p>　　if(ex_num instanceof Generic<Number>){ }</p><h2 id="4-4-泛型接口"><a href="#4-4-泛型接口" class="headerlink" title="4.4 泛型接口"></a>4.4 泛型接口</h2><p>泛型接口与泛型类的定义及使用基本相同。泛型接口常被用在各种类的生产器中，可以看一个例子：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定义一个泛型接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Generator</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> T <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当实现泛型接口的类，未传入泛型实参时：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 未传入泛型实参时，与泛型类的定义相同，在声明类的时候，需将泛型的声明也一起加到类中 * 即：class FruitGenerator&lt;T> implements Generator&lt;T>{ * 如果不声明泛型，如：class FruitGenerator implements Generator&lt;T>，编译器会报错："Unknown class" */</span><span class="token keyword">class</span> <span class="token class-name">FruitGenerator</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Generator</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> T <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当实现泛型接口的类，传入泛型实参时：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 传入泛型实参时： * 定义一个生产器实现这个接口,虽然我们只创建了一个泛型接口Generator&lt;T> * 但是我们可以为T传入无数个实参，形成无数种类型的Generator接口。 * 在实现类实现泛型接口时，如已将泛型类型传入实参类型，则所有使用泛型的地方都要替换成传入的实参类型 * 即：Generator&lt;T>，public T next();中的的T都要替换成传入的String类型。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FruitGenerator</span> <span class="token keyword">implements</span> <span class="token class-name">Generator</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> fruits <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Banana"</span><span class="token punctuation">,</span> <span class="token string">"Pear"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Random rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> fruits<span class="token punctuation">[</span>rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-5-泛型通配符"><a href="#4-5-泛型通配符" class="headerlink" title="4.5 泛型通配符"></a>4.5 泛型通配符</h2><p>我们知道<code>Ingeter</code>是<code>Number</code>的一个子类，同时在特性章节中我们也验证过<code>Generic&lt;Ingeter&gt;</code>与<code>Generic&lt;Number&gt;</code>实际上是相同的一种基本类型。那么问题来了，在使用<code>Generic&lt;Number&gt;</code>作为形参的方法中，能否使用<code>Generic&lt;Ingeter&gt;</code>的实例传入呢？在逻辑上类似于<code>Generic&lt;Number&gt;</code>和<code>Generic&lt;Ingeter&gt;</code>是否可以看成具有父子关系的泛型类型呢？</p><p>为了弄清楚这个问题，我们使用<code>Generic&lt;T&gt;</code>这个泛型类继续看下面的例子：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showKeyValue1</span><span class="token punctuation">(</span>Generic<span class="token operator">&lt;</span>Number<span class="token operator">></span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>    Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"泛型测试"</span><span class="token punctuation">,</span><span class="token string">"key value is "</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">Generic<span class="token operator">&lt;</span>Integer<span class="token operator">></span> gInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generic</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Generic<span class="token operator">&lt;</span>Number<span class="token operator">></span> gNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generic</span><span class="token operator">&lt;</span>Number<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">showKeyValue</span><span class="token punctuation">(</span>gNumber<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// showKeyValue这个方法编译器会为我们报错：Generic&lt;java.lang.Integer> </span><span class="token comment" spellcheck="true">// cannot be applied to Generic&lt;java.lang.Number></span><span class="token comment" spellcheck="true">// showKeyValue(gInteger);</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过提示信息我们可以看到<code>Generic&lt;Integer&gt;</code>不能被看作为``Generic<Number>`的子类。由此可以看出:同一种泛型可以对应多个版本（因为参数类型是不确定的），不同版本的泛型类实例是不兼容的。</p><p>回到上面的例子，如何解决上面的问题？总不能为了定义一个新的方法来处理<code>Generic&lt;Integer&gt;</code>类型的类，这显然与java中的多台理念相违背。因此我们需要一个在逻辑上可以表示同时是<code>Generic&lt;Integer&gt;</code>和<code>Generic&lt;Number&gt;</code>父类的引用类型。由此类型通配符应运而生。</p><p>我们可以将上面的方法改一下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showKeyValue1</span><span class="token punctuation">(</span>Generic<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>    Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"泛型测试"</span><span class="token punctuation">,</span><span class="token string">"key value is "</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>类型通配符一般是使用？代替具体的类型实参，注意了，此处’？’是类型实参，而不是类型形参 。重要说三遍！此处’？’是类型实参，而不是类型形参 ！ 此处’？’是类型实参，而不是类型形参 ！再直白点的意思就是，此处的？和Number、String、Integer一样都是一种实际的类型，可以把？看成所有类型的父类。是一种真实的类型。</p><p>可以解决当具体类型不确定的时候，这个通配符就是 ?  ；当操作类型时，不需要使用类型的具体功能时，只使用Object类中的功能。那么可以用 ? 通配符来表未知类型。</p><h2 id="4-6-泛型方法"><a href="#4-6-泛型方法" class="headerlink" title="4.6 泛型方法"></a>4.6 泛型方法</h2><p>在java中,泛型类的定义非常简单，但是泛型方法就比较复杂了。</p><pre class="line-numbers language-java"><code class="language-java">尤其是我们见到的大多数泛型类中的成员方法也都使用了泛型，有的甚至泛型类中也包含着泛型方法，这样在初学者中非常容易将泛型方法理解错了。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>泛型类，是在实例化类的时候指明泛型的具体类型；泛型方法，是在调用方法的时候指明泛型的具体类型 。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 泛型方法的基本介绍 * @param tClass 传入的泛型实参 * @return T 返回值为T类型 * 说明： *     1）public 与 返回值中间&lt;T>非常重要，可以理解为声明此方法为泛型方法。 *     2）只有声明了&lt;T>的方法才是泛型方法，泛型类中的使用了泛型的成员方法并不是泛型方法。 *     3）&lt;T>表明该方法将使用泛型类型T，此时才可以在方法中使用泛型类型T。 *     4）与泛型类的定义一样，此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型。 */</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">genericMethod</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> tClass<span class="token punctuation">)</span><span class="token keyword">throws</span> InstantiationException <span class="token punctuation">,</span>  IllegalAccessException<span class="token punctuation">{</span>        T instance <span class="token operator">=</span> tClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Object obj = genericMethod(Class.forName(&quot;com.test.test&quot;));</code></pre><h3 id="4-6-1-泛型方法的基本用法"><a href="#4-6-1-泛型方法的基本用法" class="headerlink" title="4.6.1 泛型方法的基本用法"></a>4.6.1 泛型方法的基本用法</h3><p>光看上面的例子有的同学可能依然会非常迷糊，我们再通过一个例子，把我泛型方法再总结一下。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericTest</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//这个类是个泛型类，在上面已经介绍过</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Generic</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>             <span class="token keyword">private</span> T key<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Generic</span><span class="token punctuation">(</span>T key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//我想说的其实是这个，虽然在方法中使用了泛型，但是这并不是一个泛型方法。</span>        <span class="token comment" spellcheck="true">//这只是类中一个普通的成员方法，只不过他的返回值是在声明泛型类已经声明过的泛型。</span>        <span class="token comment" spellcheck="true">//所以在这个方法中才可以继续使用 T 这个泛型。</span>        <span class="token keyword">public</span> T <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> key<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 这个方法显然是有问题的，在编译器会给我们提示这样的错误信息"cannot reslove symbol E"         * 因为在类的声明中并未声明泛型E，所以在使用E做形参和返回值类型时，编译器会无法识别。        public E setKey(E key){             this.key = keu        }        */</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**      * 这才是一个真正的泛型方法。     * 首先在public与返回值之间的&lt;T>必不可少，这表明这是一个泛型方法，并且声明了一个泛型T     * 这个T可以出现在这个泛型方法的任意位置.     * 泛型的数量也可以为任意多个      *    如：public &lt;T,K> K showKeyName(Generic&lt;T> container){     *        ...     *        }     */</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">showKeyName</span><span class="token punctuation">(</span>Generic<span class="token operator">&lt;</span>T<span class="token operator">></span> container<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"container key :"</span> <span class="token operator">+</span> container<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当然这个例子举的不太合适，只是为了说明泛型方法的特性。</span>        T test <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> test<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//这也不是一个泛型方法，这就是一个普通的方法，只是使用了Generic&lt;Number>这个泛型类做形参而已。</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showKeyValue1</span><span class="token punctuation">(</span>Generic<span class="token operator">&lt;</span>Number<span class="token operator">></span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"泛型测试"</span><span class="token punctuation">,</span><span class="token string">"key value is "</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//这也不是一个泛型方法，这也是一个普通的方法，只不过使用了泛型通配符?</span>    <span class="token comment" spellcheck="true">//同时这也印证了泛型通配符章节所描述的，?是一种类型实参，可以看做为Number等所有类的父类</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showKeyValue2</span><span class="token punctuation">(</span>Generic<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"泛型测试"</span><span class="token punctuation">,</span><span class="token string">"key value is "</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**     * 这个方法是有问题的，编译器会为我们提示错误信息："UnKnown class 'E' "     * 虽然我们声明了&lt;T>,也表明了这是一个可以处理泛型的类型的泛型方法。     * 但是只声明了泛型类型T，并未声明泛型类型E，因此编译器并不知道该如何处理E这个类型。    public &lt;T> T showKeyName(Generic&lt;E> container){        ...    }      */</span>    <span class="token comment" spellcheck="true">/**     * 这个方法也是有问题的，编译器会为我们提示错误信息："UnKnown class 'T' "     * 对于编译器来说T这个类型并未项目中声明过，因此编译也不知道该如何编译这个类。     * 所以这也不是一个正确的泛型方法声明。    public void showkey(T genericObj){    }    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-2-类中的泛型方法"><a href="#4-6-2-类中的泛型方法" class="headerlink" title="4.6.2 类中的泛型方法"></a>4.6.2 类中的泛型方法</h3><p>当然这并不是泛型方法的全部，泛型方法可以出现杂任何地方和任何场景中使用。但是有一种情况是非常特殊的，当泛型方法出现在泛型类中时，我们再通过一个例子看一下</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericFruit</span> <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Fruit</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"fruit"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Apple</span> <span class="token keyword">extends</span> <span class="token class-name">Fruit</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"apple"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Person"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">GenerateTest</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show_1</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//在泛型类中声明了一个泛型方法，使用泛型E，这种泛型E可以为任意类型。可以类型与T相同，也可以不同。</span>        <span class="token comment" spellcheck="true">//由于泛型方法在声明的时候会声明泛型&lt;E>，因此即使在泛型类中并未声明泛型，编译器也能够正确识别泛型方法中识别的泛型。</span>        <span class="token keyword">public</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">show_3</span><span class="token punctuation">(</span>E t<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//在泛型类中声明了一个泛型方法，使用泛型T，注意这个T是一种全新的类型，可以与泛型类中声明的T不是同一种类型。</span>        <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">show_2</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Apple apple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        GenerateTest<span class="token operator">&lt;</span>Fruit<span class="token operator">></span> generateTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenerateTest</span><span class="token operator">&lt;</span>Fruit<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//apple是Fruit的子类，所以这里可以</span>        generateTest<span class="token punctuation">.</span><span class="token function">show_1</span><span class="token punctuation">(</span>apple<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//编译器会报错，因为泛型类型实参指定的是Fruit，而传入的实参类是Person</span>        <span class="token comment" spellcheck="true">//generateTest.show_1(person);</span>        <span class="token comment" spellcheck="true">//使用这两个方法都可以成功</span>        generateTest<span class="token punctuation">.</span><span class="token function">show_2</span><span class="token punctuation">(</span>apple<span class="token punctuation">)</span><span class="token punctuation">;</span>        generateTest<span class="token punctuation">.</span><span class="token function">show_2</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用这两个方法也都可以成功</span>        generateTest<span class="token punctuation">.</span><span class="token function">show_3</span><span class="token punctuation">(</span>apple<span class="token punctuation">)</span><span class="token punctuation">;</span>        generateTest<span class="token punctuation">.</span><span class="token function">show_3</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-3-泛型方法与可变参数"><a href="#4-6-3-泛型方法与可变参数" class="headerlink" title="4.6.3 泛型方法与可变参数"></a>4.6.3 泛型方法与可变参数</h3><p>再看一个泛型方法和可变参数的例子：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">printMsg</span><span class="token punctuation">(</span> T<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>T t <span class="token operator">:</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"泛型测试"</span><span class="token punctuation">,</span><span class="token string">"t is "</span> <span class="token operator">+</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">printMsg</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">,</span><span class="token number">222</span><span class="token punctuation">,</span><span class="token string">"aaaa"</span><span class="token punctuation">,</span><span class="token string">"2323.4"</span><span class="token punctuation">,</span><span class="token number">55.55</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-4-静态方法与泛型"><a href="#4-6-4-静态方法与泛型" class="headerlink" title="4.6.4 静态方法与泛型"></a>4.6.4 静态方法与泛型</h3><p>静态方法有一种情况需要注意一下，那就是在类中的静态方法使用泛型：静态方法无法访问类上定义的泛型；如果静态方法操作的引用数据类型不确定的时候，必须要将泛型定义在方法上。</p><p>即：如果静态方法要使用泛型的话，必须将静态方法也定义成泛型方法 。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticGenerator</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * 如果在类中定义使用泛型的静态方法，需要添加额外的泛型声明（将这个方法定义成泛型方法）     * 即使静态方法要使用泛型类中已经声明过的泛型也不可以。     * 如：public static void show(T t){..},此时编译器会提示错误信息：          "StaticGenerator cannot be refrenced from static context"     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-5-泛型方法总结"><a href="#4-6-5-泛型方法总结" class="headerlink" title="4.6.5 泛型方法总结"></a>4.6.5 泛型方法总结</h3><p>泛型方法能使方法独立于类而产生变化，以下是一个基本的指导原则：</p><pre class="line-numbers language-java"><code class="language-java">无论何时，如果你能做到，你就该尽量使用泛型方法。也就是说，如果使用泛型方法将整个类泛型化，那么就应该使用泛型方法。另外对于一个<span class="token keyword">static</span>的方法而已，无法访问泛型类型的参数。所以如果<span class="token keyword">static</span>方法要使用泛型能力，就必须使其成为泛型方法。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-6-泛型上下边界"><a href="#4-6-泛型上下边界" class="headerlink" title="4.6 泛型上下边界"></a>4.6 泛型上下边界</h2><p>在使用泛型的时候，我们还可以为传入的泛型类型实参进行上下边界的限制，如：类型实参只准传入某种类型的父类或某种类型的子类。</p><p>为泛型添加上边界，即传入的类型实参必须是指定类型的子类型</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showKeyValue1</span><span class="token punctuation">(</span>Generic<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token operator">></span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>    Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"泛型测试"</span><span class="token punctuation">,</span><span class="token string">"key value is "</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">Generic<span class="token operator">&lt;</span>String<span class="token operator">></span> generic1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generic</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"11111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Generic<span class="token operator">&lt;</span>Integer<span class="token operator">></span> generic2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generic</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Generic<span class="token operator">&lt;</span>Float<span class="token operator">></span> generic3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generic</span><span class="token operator">&lt;</span>Float<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2.4f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Generic<span class="token operator">&lt;</span>Double<span class="token operator">></span> generic4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generic</span><span class="token operator">&lt;</span>Double<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2.56</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这一行代码编译器会提示错误，因为String类型并不是Number类型的子类</span><span class="token comment" spellcheck="true">//showKeyValue1(generic1);</span><span class="token function">showKeyValue1</span><span class="token punctuation">(</span>generic2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">showKeyValue1</span><span class="token punctuation">(</span>generic3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">showKeyValue1</span><span class="token punctuation">(</span>generic4<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们把泛型类的定义也改一下:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Generic</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> T key<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Generic</span><span class="token punctuation">(</span>T key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> T <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> key<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//这一行代码也会报错，因为String不是Number的子类</span>Generic<span class="token operator">&lt;</span>String<span class="token operator">></span> generic1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generic</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"11111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再来一个泛型方法的例子：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//在泛型方法中添加上下边界限制的时候，必须在权限声明与返回值之间的&lt;T>上添加上下边界，即在泛型声明的时候添加</span><span class="token comment" spellcheck="true">//public &lt;T> T showKeyName(Generic&lt;T extends Number> container)，编译器会报错："Unexpected bound"</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token operator">></span> T <span class="token function">showKeyName</span><span class="token punctuation">(</span>Generic<span class="token operator">&lt;</span>T<span class="token operator">></span> container<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"container key :"</span> <span class="token operator">+</span> container<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    T test <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> test<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上面的两个例子可以看出：泛型的上下边界添加，必须与泛型的声明在一起 。</p><h2 id="4-7-关于泛型数组要提一下"><a href="#4-7-关于泛型数组要提一下" class="headerlink" title="4.7 关于泛型数组要提一下"></a>4.7 关于泛型数组要提一下</h2><p>看到了很多文章中都会提起泛型数组，经过查看sun的说明文档，在java中是”不能创建一个确切的泛型类型的数组”的。</p><p>也就是说下面的这个例子是不可以的：</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> ls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而使用通配符创建泛型数组是可以的，如下面这个例子：</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> ls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样也是可以的：</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> ls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面使用<a href="http://docs.oracle.com/javase/tutorial/extra/generics/fineprint.html" target="_blank" rel="noopener">Sun</a><a href="http://docs.oracle.com/javase/tutorial/extra/generics/fineprint.html" target="_blank" rel="noopener">的一篇文档</a>的一个例子来说明这个问题：</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> lsa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Not really allowed.    </span>Object o <span class="token operator">=</span> lsa<span class="token punctuation">;</span>    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> oa <span class="token operator">=</span> <span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> li <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    li<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    oa<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Unsound, but passes run time store check    </span>String s <span class="token operator">=</span> lsa<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Run-time error: ClassCastException.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">这种情况下，由于JVM泛型的擦除机制，在运行时JVM是不知道泛型信息的，所以可以给oa<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>赋上一个ArrayList而不会出现异常，但是在取出数据的时候却要做一次类型转换，所以就会出现ClassCastException，如果可以进行泛型数组的声明，上面说的这种情况在编译期将不会出现任何的警告和错误，只有在运行时才会出错。而对泛型数组的声明进行限制，对于这样的情况，可以在编译期提示代码有类型安全问题，比没有任何提示要强很多。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>下面采用通配符的方式是被允许的:数组的类型不可以是类型变量，除非是采用通配符的方式，因为对于通配符的方式，最后取出数据是要做显式的类型转换的。</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> lsa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK, array of unbounded wildcard type.    </span>Object o <span class="token operator">=</span> lsa<span class="token punctuation">;</span>    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> oa <span class="token operator">=</span> <span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> li <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    li<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    oa<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Correct.    </span>Integer i <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> lsa<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-最后"><a href="#5-最后" class="headerlink" title="5. 最后"></a>5. 最后</h1><p>本文中的例子主要是为了阐述泛型中的一些思想而简单举出的，并不一定有着实际的可用性。另外，一提到泛型，相信大家用到最多的就是在集合中，其实，在实际的编程过程中，自己可以使用泛型去简化开发，且能很好的保证代码质量。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java链表</title>
      <link href="/2019/09/05/Java%E9%93%BE%E8%A1%A8/"/>
      <url>/2019/09/05/Java%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="头插法"><a href="#头插法" class="headerlink" title="头插法"></a>头插法</h1><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> ListNode <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode tmp <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            tmp <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            head<span class="token punctuation">.</span>next <span class="token operator">=</span> ret<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            ret<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>            head <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            tmp <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用临时链表，首先保存<code>head.next</code> ，然后<code>head.next</code>指向返回链表<code>ret.next</code>，让其暂时清空尾部无用节点，返回链表<code>ret.next</code>再指向<code>head</code>，即头部加入新的节点，然后<code>head</code>再指向<code>tmp</code>保存的<code>head.next</code>，<code>tmp</code>清空。</p><a id="more"></a><h1 id="尾插法"><a href="#尾插法" class="headerlink" title="尾插法"></a>尾插法</h1><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> ListNode <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 类似归并排序中的合并过程</span>    ListNode dummyHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ListNode cur <span class="token operator">=</span> dummyHead<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> l2 <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 任一为空，直接连接另一条链表</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l1 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dummyHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建<code>dummyHead</code>，再将新建的<code>cur</code>指向<code>dummyHead</code>，之后不管<code>dummyHead</code>，只使用<code>cur.next</code>来控制就可以了，最后返回<code>dummyHead</code>。</p><blockquote><p>注意：<code>cur = cur.next</code>，等于对cur自己的重定向，<code>cur.next = cur.next.next</code>等于对整个的链表重定向。</p></blockquote><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><pre class="line-numbers language-java"><code class="language-java">Solution <span class="token punctuation">{</span>    <span class="token keyword">public</span> TreeNode <span class="token function">invertTree</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//一定要检查指针为空</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        TreeNode tmp <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 得到二叉树的镜像 —— 不使用递归</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">MirrorNotRecursive</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LinkedList stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TreeNode temp <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            TreeNode node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            node<span class="token punctuation">.</span>left <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            node<span class="token punctuation">.</span>right <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数数组，修改引用的地址真实值，会影响原数组，修改地址，不会影响</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM内存模型和GC</title>
      <link href="/2019/09/04/JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%92%8CGC/"/>
      <url>/2019/09/04/JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%92%8CGC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>来源：<a href="https://www.jianshu.com/p/76959115d486" target="_blank" rel="noopener">https://www.jianshu.com/p/76959115d486</a></p></blockquote><a id="more"></a><h2 id="CPU和内存的交互"><a href="#CPU和内存的交互" class="headerlink" title="CPU和内存的交互"></a>CPU和内存的交互</h2><p>了解jvm内存模型前，了解下cpu和计算机内存的交互情况。【因为Java虚拟机内存模型定义的访问操作与计算机十分相似】</p><p>有篇很棒的文章，从cpu讲到内存模型:<a href="https://www.jianshu.com/p/bf158fbb2432" target="_blank" rel="noopener">什么是java内存模型</a></p><hr><p>在计算机中，cpu和内存的交互最为频繁，相比内存，磁盘读写太慢，内存相当于高速的缓冲区。</p><p>但是随着cpu的发展，内存的读写速度也远远赶不上cpu。因此cpu厂商在每颗cpu上加上高速缓存，用于缓解这种情况。</p><p>cpu上加入了高速缓存这样做解决了处理器和内存的矛盾(一快一慢)，但是引来的新的问题 - <strong>缓存一致性</strong></p><p>在多核cpu中，每个处理器都有各自的高速缓存(L1,L2,L3)，而主内存确只有一个 。</p><pre class="line-numbers language-undefined"><code class="language-undefined">CPU要读取一个数据时，首先从一级缓存中查找，如果没有找到再从二级缓存中查找，如果还是没有就从三级缓存或内存中查找，每个cpu有且只有一套自己的缓存。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>如何保证多个处理器运算涉及到同一个内存区域时，多线程场景下会存在缓存一致性问题，那么运行时保证数据一致性？</p><p>为了解决这个问题，各个处理器需遵循一些协议保证一致性。【如MSI，MESI啥啥的协议。。】</p></blockquote><p>大概如下</p><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/jvm/cpuandmer.png" alt="image"></p><p>cpu与内存.png</p><p>在CPU层面，内存屏障提供了个充分必要条件</p><h3 id="内存屏障-Memory-Barrier"><a href="#内存屏障-Memory-Barrier" class="headerlink" title="内存屏障(Memory Barrier)"></a>内存屏障(Memory Barrier)</h3><p>CPU中，每个CPU又有多级缓存【上图统一定义为高速缓存】，一般分为L1,L2,L3，因为这些缓存的出现，提高了数据访问性能，避免每次都向内存索取，但是弊端也很明显，不能实时的和内存发生信息交换，分<strong>在不同CPU执行的不同线程对同一个变量的缓存值不同。</strong></p><ul><li>硬件层的内存屏障分为两种：<code>Load Barrier</code> 和 <code>Store Barrier</code>即读屏障和写屏障。【内存屏障是硬件层的】</li></ul><h5 id="为什么需要内存屏障"><a href="#为什么需要内存屏障" class="headerlink" title="为什么需要内存屏障"></a>为什么需要内存屏障</h5><pre class="line-numbers language-cpp"><code class="language-cpp">由于现代操作系统都是多处理器操作系统，每个处理器都会有自己的缓存，可能存再不同处理器缓存不一致的问题，而且由于操作系统可能存在重排序，导致读取到错误的数据，因此，操作系统提供了一些内存屏障以解决这种问题<span class="token punctuation">.</span>简单来说<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">.</span>在不同CPU执行的不同线程对同一个变量的缓存值不同，为了解决这个问题。<span class="token number">2</span><span class="token punctuation">.</span>用<span class="token keyword">volatile</span>可以解决上面的问题，不同硬件对内存屏障的实现方式不一样。java屏蔽掉这些差异，通过jvm生成内存屏障的指令。对于读屏障<span class="token operator">:</span>在指令前插入读屏障，可以让高速缓存中的数据失效，强制从主内存取。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="内存屏障的作用"><a href="#内存屏障的作用" class="headerlink" title="内存屏障的作用"></a>内存屏障的作用</h5><pre class="line-numbers language-undefined"><code class="language-undefined">cpu执行指令可能是无序的，它有两个比较重要的作用1.阻止屏障两侧指令重排序2.强制把写缓冲区/高速缓存中的脏数据等写回主内存，让缓存中相应的数据失效。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="volatile型变量"><a href="#volatile型变量" class="headerlink" title="volatile型变量"></a>volatile型变量</h4><p>当我们声明某个变量为volatile修饰时，这个变量就有了线程可见性，volatile通过在读写操作前后添加内存屏障。</p><p>用代码可以这么理解</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//相当于读写时加锁，保证及时可见性，并发时不被随意修改。</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedInteger</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">long</span> value<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">long</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>volatile型变量拥有如下特性</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token number">1</span><span class="token punctuation">.</span>可见性，对于一个该变量的读，一定能看到读之前最后的写入。<span class="token number">2</span><span class="token punctuation">.</span>有序性：　　    当程序执行到<span class="token keyword">volatile</span>变量的读操作或者写操作时，在其前面的操作的更改肯定全部已经进行，且结果已经对后面的操作可见；在其后面的操作肯定还没有进行；    在进行指令优化时，不能将在对<span class="token keyword">volatile</span>变量访问的语句放在其后面执行，也不能把<span class="token keyword">volatile</span>变量后面的语句放到其前面执行。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Java内存区域"><a href="#Java内存区域" class="headerlink" title="Java内存区域"></a>Java内存区域</h2><blockquote><p>前提:本文讲的基本都是以Sun HotSpot虚拟机为基础的，Oracle收购了Sun后目前得到了两个【Sun的HotSpot和JRockit(以后可能合并这两个),还有一个是IBM的IBMJVM】</p></blockquote><p>之所以扯了那么多计算机内存模型，是因为java内存模型的设定符合了计算机的规范。</p><p><strong>Java程序内存的分配是在JVM虚拟机内存分配机制下完成</strong>。</p><p><strong>Java内存模型（Java Memory Model ,JMM）就是一种符合内存模型规范的，屏蔽了各种硬件和操作系统的访问差异的，保证了Java程序在各种平台下对内存的访问都能保证效果一致的机制及规范。</strong></p><blockquote><p>简要言之，jmm是jvm的一种规范，定义了jvm的内存模型。它屏蔽了各种硬件和操作系统的访问差异，不像c那样直接访问硬件内存，相对安全很多，它的主要目的是解决由于多线程通过共享内存进行通信时，存在的本地内存数据不一致、编译器会对代码指令重排序、处理器会对代码乱序执行等带来的问题。可以保证并发编程场景中的原子性、可见性和有序性。</p></blockquote><p>从下面这张图可以看出来，Java数据区域分为五大数据区域。这些区域各有各的用途，创建及销毁时间。</p><pre class="line-numbers language-undefined"><code class="language-undefined">其中方法区和堆是所有线程共享的，栈，本地方法栈和程序虚拟机则为线程私有的。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据java虚拟机规范，java虚拟机管理的内存将分为下面五大区域。</p><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/jvm/jmm.png" alt="image"></p><p>jmm</p><h3 id="五大内存区域"><a href="#五大内存区域" class="headerlink" title="五大内存区域"></a>五大内存区域</h3><h4 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h4><pre class="line-numbers language-undefined"><code class="language-undefined">程序计数器是一块很小的内存空间，它是线程私有的，可以认作为当前线程的行号指示器。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>为什么需要程序计数器</strong></p><blockquote><p>我们知道对于一个处理器(如果是多核cpu那就是一核)，在一个确定的时刻都只会执行一条线程中的指令，一条线程中有多个指令，为了线程切换可以恢复到正确执行位置，每个线程都需有独立的一个程序计数器，不同线程之间的程序计数器互不影响，独立存储。</p><p>注意：如果线程执行的是个java方法，那么计数器记录虚拟机字节码指令的地址。如果为native【底层方法】，那么计数器为空。<strong>这块内存区域是虚拟机规范中唯一没有OutOfMemoryError的区域</strong>。</p></blockquote><h4 id="Java栈（虚拟机栈）"><a href="#Java栈（虚拟机栈）" class="headerlink" title="Java栈（虚拟机栈）"></a>Java栈（虚拟机栈）</h4><p>同计数器也为线程私有，生命周期与相同，就是我们平时说的栈，<strong>栈描述的是Java方法执行的内存模型</strong>。</p><p><strong>每个方法被执行的时候都会创建一个栈帧用于存储局部变量表，操作栈，动态链接，方法出口等信息。每一个方法被调用的过程就对应一个栈帧在虚拟机栈中从入栈到出栈的过程。【栈先进后出，下图栈1先进最后出来】</strong></p><p>对于栈帧的解释参考 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.cnblogs.com%2FnoKing%2Fp%2F8167700.html" target="_blank" rel="noopener">Java虚拟机运行时栈帧结构</a></p><pre class="line-numbers language-css"><code class="language-css">栈帧<span class="token punctuation">:</span> 是用来存储数据和部分过程结果的数据结构。栈帧的位置<span class="token punctuation">:</span>  内存 -> 运行时数据区 -> 某个线程对应的虚拟机栈 -> here[在这里]栈帧大小确定时间<span class="token punctuation">:</span> 编译期确定，不受运行期数据影响。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通常有人将java内存区分为栈和堆，实际上java内存比这复杂，这么区分可能是因为我们最关注，与对象内存分配关系最密切的是这两个。</p><p><strong>平时说的栈一般指局部变量表部分。</strong></p><blockquote><p>局部变量表:一片连续的内存空间，用来存放方法参数，以及方法内定义的局部变量，存放着编译期间已知的数据类型(八大基本类型和对象引用(reference类型),returnAddress类型。它的最小的局部变量表空间单位为Slot，虚拟机没有指明Slot的大小，但在jvm中，long和double类型数据明确规定为64位，这两个类型占2个Slot，其它基本类型固定占用1个Slot。</p><p>reference类型:与基本类型不同的是它不等同本身，即使是String，内部也是char数组组成，它可能是指向一个对象起始位置指针，也可能指向一个代表对象的句柄或其他与该对象有关的位置。</p><p>returnAddress类型:指向一条字节码指令的地址【深入理解Java虚拟机】<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F29056872" target="_blank" rel="noopener">怎么理解returnAddress</a></p></blockquote><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/jvm/zhanzhen.png" alt="image"></p><p>栈帧</p><p><strong>需要注意的是，局部变量表所需要的内存空间在编译期完成分配，当进入一个方法时，这个方法在栈中需要分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表大小。</strong></p><blockquote><p>Java虚拟机栈可能出现两种类型的异常：</p><ol><li>线程请求的栈深度大于虚拟机允许的栈深度，将抛出StackOverflowError。</li><li>虚拟机栈空间可以动态扩展，当动态扩展是无法申请到足够的空间时，抛出OutOfMemory异常。</li></ol></blockquote><h4 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h4><p>本地方法栈是与虚拟机栈发挥的作用十分相似,区别是虚拟机栈执行的是Java方法(也就是字节码)服务，而本地方法栈则为虚拟机使用到的native方法服务，可能底层调用的c或者c++,我们打开jdk安装目录可以看到也有很多用c编写的文件，可能就是native方法所调用的c代码。</p><h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><p>对于大多数应用来说，<strong>堆是java虚拟机管理内存最大的一块内存区域，因为堆存放的对象是线程共享的，所以多线程的时候也需要同步机制</strong>。因此需要重点了解下。</p><p>java虚拟机规范对这块的描述是:所有对象实例及数组都要在堆上分配内存，但随着JIT编译器的发展和逃逸分析技术的成熟，这个说法也不是那么绝对，但是大多数情况都是这样的。</p><blockquote><p>即时编译器:可以把把Java的字节码，包括需要被解释的指令的程序）转换成可以直接发送给处理器的指令的程序)</p><p>逃逸分析:通过逃逸分析来决定某些实例或者变量是否要在堆中进行分配，如果开启了逃逸分析，即可将这些变量直接在栈上进行分配，而非堆上进行分配。这些变量的指针可以被全局所引用，或者其其它线程所引用。</p><p><a href="https://www.jianshu.com/p/20bd2e9b1f03" target="_blank" rel="noopener">参考逃逸分析</a></p></blockquote><blockquote><p>注意:它是所有线程共享的，它的目的是存放对象实例。同时它也是GC所管理的主要区域，因此常被称为GC堆，又由于现在收集器常使用分代算法，Java堆中还可以细分为新生代和老年代，再细致点还有Eden(伊甸园)空间之类的不做深究。</p><p>根据虚拟机规范，Java堆可以存在物理上不连续的内存空间，就像磁盘空间只要逻辑是连续的即可。它的内存大小可以设为固定大小，也可以扩展。</p><p>当前主流的虚拟机如HotPot都能按扩展实现(通过设置 -Xmx和-Xms)，如果堆中没有内存内存完成实例分配，而且堆无法扩展将报OOM错误(OutOfMemoryError)</p></blockquote><h4 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h4><p>方法区同堆一样，是所有线程共享的内存区域，为了区分堆，又被称为非堆。</p><p>用于存储已被虚拟机加载的类信息、常量、静态变量，如static修饰的变量加载类的时候就被加载到方法区中。</p><blockquote><p>运行时常量池</p><p>是方法区的一部分，class文件除了有类的字段、接口、方法等描述信息之外，还有常量池用于存放编译期间生成的各种字面量和符号引用。</p></blockquote><p>在老版jdk，方法区也被称为永久代【因为没有强制要求方法区必须实现垃圾回收，HotSpot虚拟机以永久代来实现方法区，从而JVM的垃圾收集器可以像管理堆区一样管理这部分区域，从而不需要专门为这部分设计垃圾回收机制。不过自从JDK7之后，Hotspot虚拟机便将运行时常量池从永久代移除了。】</p><pre class="line-numbers language-java"><code class="language-java">jdk1<span class="token number">.7</span>开始逐步去永久代。从String<span class="token punctuation">.</span><span class="token function">interns</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法可以看出来String<span class="token punctuation">.</span><span class="token function">interns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">native</span>方法<span class="token operator">:</span>作用是如果字符串常量池已经包含一个等于这个String对象的字符串，则返回代表池中的这个字符串的String对象，在jdk1<span class="token number">.6</span>及以前常量池分配在永久代中。可通过 <span class="token operator">-</span>XX<span class="token operator">:</span>PermSize和<span class="token operator">-</span>XX<span class="token operator">:</span>MaxPermSize限制方法区大小。<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringIntern</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//运行如下代码探究运行时常量池的位置</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//用list保持着引用 防止full gc回收常量池</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//如果在jdk1.6环境下运行 同时限制方法区大小 将报OOM后面跟着PermGen space说明方法区OOM，即常量池在永久代</span><span class="token comment" spellcheck="true">//如果是jdk1.7或1.8环境下运行 同时限制堆的大小  将报heap space 即常量池在堆中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.cnblogs.com%2Fyingsong%2Fp%2F5896207.html" target="_blank" rel="noopener">idea设置相关内存大小设置</a></p><p>这边不用全局的方式，设置main方法的vm参数。</p><p>做相关设置，比如说这边设定堆大小。（-Xmx5m -Xms5m -XX:-UseGCOverheadLimit）</p><pre class="line-numbers language-css"><code class="language-css">这边如果不设置UseGCOverheadLimit将报java<span class="token number">.</span>lang<span class="token number">.</span><span class="token property">OutOfMemoryError</span><span class="token punctuation">:</span> GC overhead limit exceeded，这个错是因为GC占用了多余<span class="token number">98%</span>（默认值）的CPU时间却只回收了少于<span class="token number">2%</span>（默认值）的堆空间。目的是为了让应用终止，给开发者机会去诊断问题。一般是应用程序在有限的内存上创建了大量的临时对象或者弱引用对象，从而导致该异常。虽然加大内存可以暂时解决这个问题，但是还是强烈建议去优化代码，后者更加有效，也可通过UseGCOverheadLimit避免[不推荐，这里是因为测试用，并不能解决根本问题]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>jdk8真正开始废弃永久代，而使用元空间(Metaspace)</strong></p><blockquote><p>java虚拟机对方法区比较宽松，除了跟堆一样可以不存在连续的内存空间，定义空间和可扩展空间，还可以选择不实现垃圾收集。</p></blockquote><h4 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h4><p>在HotSpot虚拟机中。对象在内存中存储的布局分为</p><pre class="line-numbers language-undefined"><code class="language-undefined">1.对象头2.实例数据3.对齐填充<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="对象头【markword】"><a href="#对象头【markword】" class="headerlink" title="对象头【markword】"></a>对象头【markword】</h5><p>在32位系统下，对象头8字节，64位则是16个字节【未开启压缩指针，开启后12字节】。</p><pre class="line-numbers language-undefined"><code class="language-undefined">markword很像网络协议报文头，划分为多个区间，并且会根据对象的状态复用自己的存储空间。为什么这么做:省空间，对象需要存储的数据很多，32bit/64bit是不够的，它被设计成非固定的数据结构以便在极小的空间存储更多的信息，假设当前为32bit，在对象未被锁定情况下。25bit为存储对象的哈希码、4bit用于存储分代年龄，2bit用于存储锁标志位，1bit固定为0。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>不同状态下存放数据</p><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/jvm/cunfangshuju.png" alt="image"></p><p>这其中锁标识位需要特别关注下。<strong>锁标志位与是否为偏向锁对应到唯一的锁状态</strong>。</p><p>锁的状态分为四种<code>无锁状态</code>、<code>偏向锁</code>、<code>轻量级锁</code>和<code>重量级锁</code></p><p>不同状态时对象头的区间含义，如图所示。</p><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/jvm/duixiangtou.jpg" alt="image"></p><p>对象头.jpg</p><p>HotSpot底层通过markOop实现Mark Word，具体实现位于<code>markOop.hpp</code>文件。</p><pre class="line-numbers language-java"><code class="language-java">markOop中提供了大量方法用于查看当前对象头的状态，以及更新对象头的数据，为<span class="token keyword">synchronized</span>锁的实现提供了基础。<span class="token punctuation">[</span>比如说我们知道<span class="token keyword">synchronized</span>锁的是对象而不是代码，而锁的状态保存在对象头中，进而实现锁住对象<span class="token punctuation">]</span>。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关于对象头和锁之间的转换，网上大神总结</p><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/jvm/zhongliangjisuo.png" alt="image"></p><p>偏向锁轻量级锁重量级锁.png</p><h5 id="实例数据"><a href="#实例数据" class="headerlink" title="实例数据"></a>实例数据</h5><pre class="line-numbers language-cpp"><code class="language-cpp">存放对象程序中各种类型的字段类型，不管是从父类中继承下来的还是在子类中定义的。分配策略<span class="token operator">:</span>相同宽度的字段总是放在一起，比如<span class="token keyword">double</span>和<span class="token keyword">long</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="对齐填充"><a href="#对齐填充" class="headerlink" title="对齐填充"></a>对齐填充</h5><p>这部分没有特殊的含义，仅仅起到占位符的作用满足JVM要求。</p><pre class="line-numbers language-undefined"><code class="language-undefined">由于HotSpot规定对象的大小必须是8的整数倍，对象头刚好是整数倍，如果实例数据不是的话，就需要占位符对齐填充。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h4><p>java程序需要通过引用(ref)数据来操作堆上面的对象，那么如何通过引用定位、访问到对象的具体位置。</p><pre class="line-numbers language-undefined"><code class="language-undefined">对象的访问方式由虚拟机决定，java虚拟机提供两种主流的方式1.句柄访问对象2.直接指针访问对象。(Sun HotSpot使用这种方式)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参考<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fblog.csdn.net%2Fu011080472%2Farticle%2Fdetails%2F51321769" target="_blank" rel="noopener">Java对象访问定位</a></p><h5 id="句柄访问"><a href="#句柄访问" class="headerlink" title="句柄访问"></a>句柄访问</h5><blockquote><p>简单来说就是java堆划出一块内存作为句柄池,引用中存储对象的句柄地址,句柄中包含对象实例数据、类型数据的地址信息。</p><h5 id="优点-引用中存储的是稳定的句柄地址-在对象被移动【垃圾收集时移动对象是常态】只需改变句柄中实例数据的指针，不需要改动引用【ref】本身。"><a href="#优点-引用中存储的是稳定的句柄地址-在对象被移动【垃圾收集时移动对象是常态】只需改变句柄中实例数据的指针，不需要改动引用【ref】本身。" class="headerlink" title="优点:引用中存储的是稳定的句柄地址,在对象被移动【垃圾收集时移动对象是常态】只需改变句柄中实例数据的指针，不需要改动引用【ref】本身。"></a>优点:引用中存储的是稳定的句柄地址,在对象被移动【垃圾收集时移动对象是常态】只需改变句柄中实例数据的指针，不需要改动引用【ref】本身。</h5></blockquote><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/jvm/famhshi2.jpg" alt="image"></p><p>访问方式2.jpg</p><h5 id="直接指针"><a href="#直接指针" class="headerlink" title="直接指针"></a>直接指针</h5><blockquote><p>与句柄访问不同的是，ref中直接存储的就是对象的实例数据,但是类型数据跟句柄访问方式一样。</p><p>优点:优势很明显，就是速度快，<strong>相比于句柄访问少了一次指针定位的开销时间</strong>。【可能是出于Java中对象的访问时十分频繁的,平时我们常用的JVM HotSpot采用此种方式】</p></blockquote><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/jvm/fangshi1.jpg" alt="image"></p><p>访问方式1.jpg</p><h2 id="内存溢出"><a href="#内存溢出" class="headerlink" title="内存溢出"></a>内存溢出</h2><pre class="line-numbers language-css"><code class="language-css">两种内存溢出异常[注意内存溢出是error级别的]<span class="token number">1.</span><span class="token property">StackOverFlowError</span><span class="token punctuation">:</span>当请求的栈深度大于虚拟机所允许的最大深度<span class="token number">2.</span><span class="token property">OutOfMemoryError</span><span class="token punctuation">:</span>虚拟机在扩展栈时无法申请到足够的内存空间[一般都能设置扩大]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>java -verbose:class -version 可以查看刚开始加载的类，可以发现这两个类并不是异常出现的时候才去加载，而是jvm启动的时候就已经加载。这么做的原因是在vm启动过程中我们把类加载起来，并创建几个没有堆栈的对象缓存起来，只需要设置下不同的提示信息即可，当需要抛出特定类型的OutOfMemoryError异常的时候，就直接拿出缓存里的这几个对象就可以了。</p><p>比如说OutOfMemoryError对象，jvm预留出4个对象【固定常量】，这就为什么最多出现4次有堆栈的OutOfMemoryError异常及大部分情况下都将看到没有堆栈的OutOfMemoryError对象的原因。</p><p><a href="https://links.jianshu.com/go?to=http%3A%2F%2Flovestblog.cn%2Fblog%2F2016%2F08%2F29%2Foom%2F" target="_blank" rel="noopener">参考OutOfMemoryError解读</a></p><p>两个基本的例子</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemErrorTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建对象速度可能高于jvm回收速度</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OutOfMemoryError</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//递归造成StackOverflowError 这边因为每运行一个方法将创建一个栈帧，栈帧创建太多无法继续申请到内存扩展</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">StackOverflowError</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/jvm/lizi1.png" alt="image"></p><h2 id="4-GC简介"><a href="#4-GC简介" class="headerlink" title="4.GC简介"></a>4.GC简介</h2><blockquote><p>GC(Garbage Collection)：即垃圾回收器，诞生于1960年MIT的Lisp语言，主要是用来回收，释放垃圾占用的空间。</p></blockquote><hr><p>java GC泛指java的垃圾回收机制，该机制是java与C/C++的主要区别之一，我们在日常写java代码的时候，一般都不需要编写内存回收或者垃圾清理的代码，也不需要像C/C++那样做类似delete/free的操作。</p><h2 id="为什么需要学习GC"><a href="#为什么需要学习GC" class="headerlink" title="为什么需要学习GC"></a>为什么需要学习GC</h2><blockquote><p>对象的内存分配在java虚拟机的自动内存分配机制下，一般不容易出现内存泄漏问题。但是写代码难免会遇到一些特殊情况，比如OOM神马的。。尽管虚拟机内存的动态分配与内存回收技术很成熟，可万一出现了这样那样的内存溢出问题，那么将难以定位错误的原因所在。</p></blockquote><p>对于本人来说，由于水平有限，而且作为小开发，并没必要深入到GC的底层实现，但至少想要说学会看懂gc及定位一些内存泄漏问题。</p><p>从三个角度切入来学习GC</p><blockquote><p>1.哪些内存要回收</p><p>2.什么时候回收</p><p>3.怎么回收</p></blockquote><p>哪些内存要回收</p><blockquote><p>java内存模型中分为五大区域已经有所了解。我们知道<code>程序计数器</code>、<code>虚拟机栈</code>、<code>本地方法栈</code>，由线程而生，随线程而灭，其中栈中的栈帧随着方法的进入顺序的执行的入栈和出栈的操作，一个栈帧需要分配多少内存取决于具体的虚拟机实现并且在编译期间即确定下来【忽略JIT编译器做的优化，基本当成编译期间可知】，当方法或线程执行完毕后，内存就随着回收，因此无需关心。</p><p>而<code>Java堆</code>、<code>方法区</code>则不一样。方法区存放着类加载信息，但是一个接口中多个实现类需要的内存可能不太一样，一个方法中多个分支需要的内存也可能不一样【只有在运行期间才可知道这个方法创建了哪些对象没需要多少内存】，这部分内存的分配和回收都是动态的，gc关注的也正是这部分的内存。</p></blockquote><pre class="line-numbers language-css"><code class="language-css">Java堆是GC回收的“重点区域”。堆中基本存放着所有对象实例，gc进行回收前，第一件事就是确认哪些对象存活，哪些死去[即不可能再被引用]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="堆的回收区域"><a href="#堆的回收区域" class="headerlink" title="堆的回收区域"></a>堆的回收区域</h2><pre class="line-numbers language-css"><code class="language-css">为了高效的回收，jvm将堆分为三个区域<span class="token number">1.</span>新生代（Young Generation）NewSize和MaxNewSize分别可以控制年轻代的初始大小和最大的大小<span class="token number">2.</span>老年代（Old Generation）<span class="token number">3.</span>永久代（Permanent Generation）【<span class="token number">1.8</span>以后采用元空间，就不在堆中了】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F53613423%2Fanswer%2F135743258" target="_blank" rel="noopener">GC为什么要分代-R大的回答</a></p><p><a href="https://links.jianshu.com/go?to=http%3A%2F%2Flovestblog.cn%2Fblog%2F2016%2F10%2F29%2Fmetaspace%2F" target="_blank" rel="noopener">关于元空间</a></p><h2 id="判断对象是否存活算法"><a href="#判断对象是否存活算法" class="headerlink" title="判断对象是否存活算法"></a>判断对象是否存活算法</h2><pre class="line-numbers language-bash"><code class="language-bash">1.引用计数算法早期判断对象是否存活大多都是以这种算法，这种算法判断很简单，简单来说就是给对象添加一个引用计数器，每当对象被引用一次就加1，引用失效时就减1。当为0的时候就判断对象不会再被引用。优点:实现简单效率高，被广泛使用与如python何游戏脚本语言上。缺点:难以解决循环引用的问题，就是假如两个对象互相引用已经不会再被其它其它引用，导致一直不会为0就无法进行回收。2.可达性分析算法目前主流的商用语言<span class="token punctuation">[</span>如java、c<span class="token comment" spellcheck="true">#]采用的是可达性分析算法判断对象是否存活。这个算法有效解决了循环利用的弊端。</span>它的基本思路是通过一个称为“GC Roots”的对象为起始点，搜索所经过的路径称为引用链，当一个对象到GC Roots没有任何引用跟它连接则证明对象是不可用的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/jvm/gc.png" alt="image"></p><p>gc.png</p><p>可作为GC Roots的对象有四种</p><pre class="line-numbers language-java"><code class="language-java">①虚拟机栈<span class="token punctuation">(</span>栈桢中的本地变量表<span class="token punctuation">)</span>中的引用的对象，就是平时所指的java对象，存放在堆中。②方法区中的类静态属性引用的对象，一般指被<span class="token keyword">static</span>修饰引用的对象，加载类的时候就加载到内存中。③方法区中的常量引用的对象<span class="token punctuation">,</span>④本地方法栈中JNI（<span class="token keyword">native</span>方法<span class="token punctuation">)</span>引用的对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>即使可达性算法中不可达的对象，也不是一定要马上被回收，还有可能被抢救一下。网上例子很多，基本上和深入理解JVM一书讲的一样<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fblog.csdn.net%2Flwang_IT%2Farticle%2Fdetails%2F78650168" target="_blank" rel="noopener">对象的生存还是死亡</a></p><pre class="line-numbers language-css"><code class="language-css">要真正宣告对象死亡需经过两个过程。<span class="token number">1.</span>可达性分析后没有发现引用链<span class="token number">2.</span>查看对象是否有finalize方法，如果有重写且在方法内完成自救[比如再建立引用]，还是可以抢救一下，注意这边一个类的finalize只执行一次，这就会出现一样的代码第一次自救成功第二次失败的情况。[如果类重写finalize且还没调用过，会将这个对象放到一个叫做F-Queue的序列里，这边finalize不承诺一定会执行，这么做是因为如果里面死循环的话可能会时F-Queue队列处于等待，严重会导致内存崩溃，这是我们不希望看到的。]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.cnblogs.com%2Fonlinemf%2Fp%2F7044953.html" target="_blank" rel="noopener">HotSpot虚拟机如何实现可达性算法</a></p><h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><blockquote><p>jvm中，可达性分析算法帮我们解决了哪些对象可以回收的问题，垃圾收集算法则关心怎么回收。</p></blockquote><h3 id="三大垃圾收集算法"><a href="#三大垃圾收集算法" class="headerlink" title="三大垃圾收集算法"></a>三大垃圾收集算法</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token number">1</span><span class="token punctuation">.</span>标记<span class="token operator">/</span>清除算法【最基础】<span class="token number">2</span><span class="token punctuation">.</span>复制算法<span class="token number">3</span><span class="token punctuation">.</span>标记<span class="token operator">/</span>整理算法jvm采用<span class="token string">`分代收集算法`</span>对不同区域采用不同的回收算法。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.cnblogs.com%2Ffangfuhai%2Fp%2F7203468.html%3Futm_source%3Ditdadao%26utm_medium%3Dreferral" target="_blank" rel="noopener">参考GC算法深度解析</a></p><p><strong>新生代采用复制算法</strong></p><p>新生代中因为对象都是”朝生夕死的”，【深入理解JVM虚拟机上说98%的对象,不知道是不是这么多，总之就是存活率很低】，适用于复制算法【复制算法比较适合用于存活率低的内存区域】。它优化了标记/清除算法的效率和内存碎片问题，且JVM不以5:5分配内存【由于存活率低，不需要复制保留那么大的区域造成空间上的浪费，因此不需要按1:1【原有区域:保留空间】划分内存区域，而是将内存分为一块Eden空间和From Survivor、To Survivor【保留空间】，三者默认比例为8:1:1，优先使用Eden区，若Eden区满，则将对象复制到第二块内存区上。但是不能保证每次回收都只有不多于10%的对象存货，所以Survivor区不够的话，则会依赖老年代年存进行分配】。</p><p>GC开始时，对象只会存于Eden和From Survivor区域，To Survivor【保留空间】为空。</p><p>GC进行时，Eden区所有存活的对象都被复制到To Survivor区，而From Survivor区中，仍存活的对象会根据它们的年龄值决定去向，年龄值达到年龄阈值(默认15是因为对象头中年龄战4bit，新生代每熬过一次垃圾回收，年龄+1)，则移到老年代，没有达到则复制到To Survivor。</p><p><strong>老年代采用标记/清除算法或标记/整理算法</strong></p><p>由于老年代存活率高，没有额外空间给他做担保，必须使用这两种算法。</p><h3 id="枚举根节点算法"><a href="#枚举根节点算法" class="headerlink" title="枚举根节点算法"></a>枚举根节点算法</h3><p><code>GC Roots</code> 被虚拟机用来判断对象是否存活</p><blockquote><p>可作为GC Roos的节点主要是在一些全局引用【如常量或静态属性】、执行上下文【如栈帧中本地变量表】中。那么如何在这么多全局变量和本地变量表找到【枚举】根节点将是个问题。</p></blockquote><p>可达性分析算法需考虑</p><p>1.如果方法区几百兆，一个个检查里面的引用，将耗费大量资源。</p><p>2.在分析时，需保证这个对象引用关系不再变化，否则结果将不准确。【因此GC进行时需停掉其它所有java执行线程(Sun把这种行为称为‘Stop the World’)，即使是号称几乎不会停顿的CMS收集器，枚举根节点时也需停掉线程】</p><p>解决办法:实际上当系统停下来后JVM不需要一个个检查引用，而是通过OopMap数据结构【HotSpot的叫法】来标记对象引用。</p><p>虚拟机先得知哪些地方存放对象的引用，在类加载完时。HotSpot把对象内什么偏移量什么类型的数据算出来，在jit编译过程中，也会在特定位置记录下栈和寄存器哪些位置是引用，这样GC在扫描时就可以知道这些信息。【目前主流JVM使用准确式GC】</p><p>OopMap可以帮助HotSpot快速且准确完成GC Roots枚举以及确定相关信息。但是也存在一个问题，可能导致引用关系变化。</p><p>这个时候有个safepoint(安全点)的概念。</p><p>HotSpot中GC不是在任意位置都可以进入，而只能在safepoint处进入。 GC时对一个Java线程来说，它要么处在safepoint,要么不在safepoint。</p><p>safepoint不能太少，否则GC等待的时间会很久</p><p>safepoint不能太多，否则将增加运行GC的负担</p><p>安全点主要存放的位置</p><pre class="line-numbers language-undefined"><code class="language-undefined">1:循环的末尾 2:方法临返回前/调用方法的call指令后 3:可能抛异常的位置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参考:<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fblog.csdn.net%2FITer_ZC%2Farticle%2Fdetails%2F41847887" target="_blank" rel="noopener">关于安全点safepoint</a></p><h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><pre class="line-numbers language-undefined"><code class="language-undefined">如果说垃圾回收算法是内存回收的方法论，那么垃圾收集器就是具体实现。jvm会结合针对不同的场景及用户的配置使用不同的收集器。年轻代收集器Serial、ParNew、Parallel Scavenge老年代收集器Serial Old、Parallel Old、CMS收集器特殊收集器G1收集器[新型，不在年轻、老年代范畴内]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/jvm/shoujiqi.png" alt="image"></p><p>收集器，连线代表可结合使用</p><h3 id="新生代收集器"><a href="#新生代收集器" class="headerlink" title="新生代收集器"></a>新生代收集器</h3><h3 id="Serial"><a href="#Serial" class="headerlink" title="Serial"></a>Serial</h3><p>最基本、发展最久的收集器，在jdk3以前是gc收集器的唯一选择，Serial是单线程收集器，Serial收集器只能使用一条线程进行收集工作，在收集的时候必须得停掉其它线程，等待收集工作完成其它线程才可以继续工作。</p><pre class="line-numbers language-css"><code class="language-css">虽然Serial看起来很坑，需停掉别的线程以完成自己的gc工作，但是也不是完全没用的，比如说Serial在运行在Client模式下优于其它收集器[简单高效,不过一般都是用Server模式，<span class="token number">64</span>bit的jvm甚至没Client模式]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.cnblogs.com%2Fwxw7blog%2Fp%2F7221756.html" target="_blank" rel="noopener">JVM的Client模式与Server模式</a></p><p>优点:对于Client模式下的jvm来说是个好的选择。适用于单核CPU【现在基本都是多核了】<br>缺点:收集时要暂停其它线程，有点浪费资源，多核下显得。</p><h3 id="ParNew收集器"><a href="#ParNew收集器" class="headerlink" title="ParNew收集器"></a>ParNew收集器</h3><p>可以认为是Serial的升级版，因为它支持多线程[GC线程]，而且收集算法、Stop The World、回收策略和Serial一样，就是可以有多个GC线程并发运行，它是HotSpot第一个真正意义实现并发的收集器。默认开启线程数和当前cpu数量相同【几核就是几个，超线程cpu的话就不清楚了 - -】，如果cpu核数很多不想用那么多，可以通过<em>-XX:ParallelGCThreads</em>来控制垃圾收集线程的数量。</p><pre class="line-numbers language-objectivec"><code class="language-objectivec">优点<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">.</span>支持多线程，多核CPU下可以充分的利用CPU资源<span class="token number">2</span><span class="token punctuation">.</span>运行在Server模式下新生代首选的收集器【重点是因为新生代的这几个收集器只有它和Serial可以配合CMS收集器一起使用】缺点<span class="token punctuation">:</span> 在单核下表现不会比Serial好，由于在单核能利用多核的优势，在线程收集过程中可能会出现频繁上下文切换，导致额外的开销。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Parallel-Scavenge"><a href="#Parallel-Scavenge" class="headerlink" title="Parallel Scavenge"></a>Parallel Scavenge</h3><p>采用复制算法的收集器，和ParNew一样支持多线程。</p><p>但是该收集器重点关心的是吞吐量【吞吐量 = 代码运行时间 / (代码运行时间 + 垃圾收集时间) 如果代码运行100min垃圾收集1min，则为99%】</p><p>对于用户界面，适合使用GC停顿时间短,不然因为卡顿导致交互界面卡顿将很影响用户体验。</p><p>对于后台</p><p>高吞吐量可以高效率的利用cpu尽快完成程序运算任务，适合后台运算</p><blockquote><p>Parallel Scavenge注重吞吐量，所以也成为”吞吐量优先”收集器。</p></blockquote><h3 id="老年代收集器"><a href="#老年代收集器" class="headerlink" title="老年代收集器"></a>老年代收集器</h3><h2 id="Serial-Old"><a href="#Serial-Old" class="headerlink" title="Serial Old"></a>Serial Old</h2><p>和新生代的Serial一样为单线程，Serial的老年代版本，不过它采用”标记-整理算法”，这个模式主要是给Client模式下的JVM使用。</p><p>如果是Server模式有两大用途</p><p>1.jdk5前和Parallel Scavenge搭配使用，jdk5前也只有这个老年代收集器可以和它搭配。</p><p>2.作为CMS收集器的后备。</p><h2 id="Parallel-Old"><a href="#Parallel-Old" class="headerlink" title="Parallel Old"></a>Parallel Old</h2><p>支持多线程，Parallel Scavenge的老年版本，jdk6开始出现， 采用”标记-整理算法”【老年代的收集器大都采用此算法】</p><p>在jdk6以前，新生代的Parallel Scavenge只能和Serial Old配合使用【根据图，没有这个的话只剩Serial Old，而Parallel Scavenge又不能和CMS配合使用】，而且Serial Old为单线程Server模式下会拖后腿【多核cpu下无法充分利用】，这种结合并不能让应用的吞吐量最大化。</p><blockquote><p>Parallel Old的出现结合Parallel Scavenge，真正的形成“吞吐量优先”的收集器组合。</p></blockquote><h3 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h3><p>CMS收集器(Concurrent Mark Sweep)是以一种获取最短回收停顿时间为目标的收集器。【重视响应，可以带来好的用户体验，被sun称为并发低停顿收集器】</p><pre class="line-numbers language-css"><code class="language-css">启用CMS：<span class="token property">-XX</span><span class="token punctuation">:</span>+UseConcMarkSweepGC<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>正如其名，CMS采用的是”标记-清除”(Mark Sweep)算法，而且是支持并发(Concurrent)的</p><p>它的运作分为4个阶段</p><pre class="line-numbers language-css"><code class="language-css"><span class="token number">1.</span>初始标记<span class="token punctuation">:</span>标记一下GC Roots能直接关联到的对象，速度很快<span class="token number">2.</span>并发标记<span class="token punctuation">:</span>GC Roots Tarcing过程，即可达性分析<span class="token number">3.</span>重新标记<span class="token punctuation">:</span>为了修正因并发标记期间用户程序运作而产生变动的那一部分对象的标记记录，会有些许停顿，时间上一般 初始标记 &lt; 重新标记 &lt; 并发标记<span class="token number">4.</span>并发清除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>以上初始标记和重新标记需要stw(停掉其它运行java线程)</p><p>之所以说CMS的用户体验好，是因为CMS收集器的内存回收工作是可以和用户线程一起并发执行。</p><p>总体上CMS是款优秀的收集器，但是它也有些缺点。</p><blockquote><p>1.cms堆cpu特别敏感，cms运行线程和应用程序并发执行需要多核cpu，如果cpu核数多的话可以发挥它并发执行的优势，但是cms默认配置启动的时候垃圾线程数为 (cpu数量+3)/4，它的性能很容易受cpu核数影响，当cpu的数目少的时候比如说为为2核，如果这个时候cpu运算压力比较大，还要分一半给cms运作，这可能会很大程度的影响到计算机性能。</p><p>2.cms无法处理浮动垃圾，可能导致Concurrent Mode Failure（并发模式故障）而触发full GC</p><p>3.由于cms是采用”标记-清除“算法,因此就会存在垃圾碎片的问题，为了解决这个问题cms提供了 <strong>-XX:+UseCMSCompactAtFullCollection</strong>选项，这个选项相当于一个开关【默认开启】，用于CMS顶不住要进行full GC时开启内存碎片合并，内存整理的过程是无法并发的，且开启这个选项会影响性能(比如停顿时间变长)</p></blockquote><pre class="line-numbers language-undefined"><code class="language-undefined">浮动垃圾:由于cms支持运行的时候用户线程也在运行，程序运行的时候会产生新的垃圾，这里产生的垃圾就是浮动垃圾，cms无法当次处理，得等下次才可以。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="G1收集器"><a href="#G1收集器" class="headerlink" title="G1收集器"></a>G1收集器</h3><p>G1(garbage first:尽可能多收垃圾，避免full gc)收集器是当前最为前沿的收集器之一(1.7以后才开始有)，同cms一样也是关注降低延迟，是用于替代cms功能更为强大的新型收集器，因为它解决了cms产生空间碎片等一系列缺陷。</p><blockquote><p>摘自甲骨文:适用于 Java HotSpot VM 的低暂停、服务器风格的分代式垃圾回收器。G1 GC 使用并发和并行阶段实现其目标暂停时间，并保持良好的吞吐量。当 G1 GC 确定有必要进行垃圾回收时，它会先收集存活数据最少的区域（垃圾优先)</p><p>g1的特别之处在于它强化了分区，弱化了分代的概念，是区域化、增量式的收集器，它不属于新生代也不属于老年代收集器。</p><p>用到的算法为标记-清理、复制算法</p></blockquote><pre class="line-numbers language-css"><code class="language-css">jdk<span class="token number">1.7</span>,<span class="token number">1.8</span>的都是默认关闭的，更高版本的还不知道开启选项 <span class="token property">-XX</span><span class="token punctuation">:</span>+UseG<span class="token number">1</span>GC 比如在tomcat的catania<span class="token number">.</span>sh启动参数加上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>g1是区域化的，它将java堆内存划分为若干个大小相同的区域【region】，jvm可以设置每个region的大小(1-32m,大小得看堆内存大小，必须是2的幂),它会根据当前的堆内存分配合理的region大小。</p><blockquote><p><a href="https://links.jianshu.com/go?to=http%3A%2F%2Fhg.openjdk.java.net%2Fjdk7%2Fjdk7%2Fhotspot%2Ffile%2F9b0ca45cd756%2Fsrc%2Fshare%2Fvm%2Fgc_implementation%2Fg1%2FheapRegion.cpp" target="_blank" rel="noopener">jdk7中计算region的源码</a>,这边博主看了下也看不怎么懂，也翻了下openjdk8的看了下关于region的处理似乎不太一样。。</p></blockquote><p>g1通过并发(并行)标记阶段查找老年代存活对象，通过并行复制压缩存活对象【这样可以省出连续空间供大对象使用】。</p><p>g1将一组或多组区域中存活对象以增量并行的方式复制到不同区域进行压缩，从而减少堆碎片，目标是尽可能多回收堆空间【垃圾优先】，且尽可能不超出暂停目标以达到低延迟的目的。</p><p>g1提供三种垃圾回收模式 young gc、mixed gc 和 full gc,不像其它的收集器，根据区域而不是分代，新生代老年代的对象它都能回收。</p><p>几个重要的默认值，更多的查看官方文档<a href="https://links.jianshu.com/go?to=http%3A%2F%2Fwww.oracle.com%2Ftechnetwork%2Fcn%2Farticles%2Fjava%2Fg1gc-1984535-zhs.html" target="_blank" rel="noopener">oracle官方g1中文文档</a></p><pre class="line-numbers language-shell"><code class="language-shell">g1是自适应的回收器，提供了若干个默认值，无需修改就可高效运作-XX:G1HeapRegionSize=n  设置g1 region大小，不设置的话自己会根据堆大小算，目标是根据最小堆内存划分2048个区域-XX:MaxGCPauseMillis=200 最大停顿时间 默认200毫秒<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Minor-GC、Major-GC、FULL-GC、mixed-gc"><a href="#Minor-GC、Major-GC、FULL-GC、mixed-gc" class="headerlink" title="Minor GC、Major GC、FULL GC、mixed gc"></a>Minor GC、Major GC、FULL GC、mixed gc</h2><h3 id="Minor-GC"><a href="#Minor-GC" class="headerlink" title="Minor GC"></a>Minor GC</h3><blockquote><p>在年轻代<code>Young space</code>(包括Eden区和Survivor区)中的垃圾回收称之为 Minor GC,Minor GC只会清理年轻代.</p></blockquote><h3 id="Major-GC"><a href="#Major-GC" class="headerlink" title="Major GC"></a>Major GC</h3><blockquote><p>Major GC清理老年代(old GC)，但是通常也可以指和Full GC是等价，因为收集老年代的时候往往也会伴随着升级年轻代，收集整个Java堆。所以有人问的时候需问清楚它指的是full GC还是old GC。</p></blockquote><h3 id="Full-GC"><a href="#Full-GC" class="headerlink" title="Full GC"></a>Full GC</h3><blockquote><p>full gc是对新生代、老年代、永久代【jdk1.8后没有这个概念了】统一的回收。</p><p>【知乎R大的回答:收集整个堆，包括young gen、old gen、perm gen（如果存在的话)、元空间(1.8及以上)等所有部分的模式】</p></blockquote><h3 id="7-4-mixed-GC【g1特有】"><a href="#7-4-mixed-GC【g1特有】" class="headerlink" title="7.4 mixed GC【g1特有】"></a>7.4 mixed GC【g1特有】</h3><blockquote><p>混合GC</p><p>收集整个young gen以及部分old gen的GC。只有G1有这个模式</p></blockquote><h2 id="查看GC日志"><a href="#查看GC日志" class="headerlink" title="查看GC日志"></a>查看GC日志</h2><h4 id="简单日志查看"><a href="#简单日志查看" class="headerlink" title="简单日志查看"></a>简单日志查看</h4><p>要看得懂并理解GC，需要看懂GC日志。</p><p>这边我在idea上试了个小例子，需要在idea配置参数(-XX:+PrintGCDetails)。</p><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/jvm/GCrizhi.png" alt="image"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GCtest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aaaaaaaaaaaaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token function">GC</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>PSYoungGen<span class="token operator">:</span> 3998K<span class="token operator">-</span><span class="token operator">></span><span class="token function">688K</span><span class="token punctuation">(</span>38400K<span class="token punctuation">)</span><span class="token punctuation">]</span> 3998K<span class="token operator">-</span><span class="token operator">></span><span class="token function">696K</span><span class="token punctuation">(</span>125952K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0016551</span> secs<span class="token punctuation">[</span>本次回收时间<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>Times<span class="token operator">:</span> user<span class="token operator">=</span><span class="token number">0.01</span> sys<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">,</span> real<span class="token operator">=</span><span class="token number">0.00</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span>Full <span class="token function">GC</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>PSYoungGen<span class="token operator">:</span> 688K<span class="token operator">-</span><span class="token operator">></span><span class="token function">0K</span><span class="token punctuation">(</span>38400K<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>ParOldGen<span class="token operator">:</span> 8K<span class="token operator">-</span><span class="token operator">></span><span class="token function">603K</span><span class="token punctuation">(</span>87552K<span class="token punctuation">)</span><span class="token punctuation">]</span> 696K<span class="token operator">-</span><span class="token operator">></span><span class="token function">603K</span><span class="token punctuation">(</span>125952K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>Metaspace<span class="token operator">:</span> 3210K<span class="token operator">-</span><span class="token operator">></span><span class="token function">3210K</span><span class="token punctuation">(</span>1056768K<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0.0121034</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span>Times<span class="token operator">:</span> user<span class="token operator">=</span><span class="token number">0.01</span> sys<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">,</span> real<span class="token operator">=</span><span class="token number">0.01</span> secs<span class="token punctuation">]</span> Heap PSYoungGen<span class="token punctuation">[</span>年轻代<span class="token punctuation">]</span>      total 38400K<span class="token punctuation">,</span> used 333K <span class="token punctuation">[</span><span class="token number">0x0000000795580000</span><span class="token punctuation">,</span> <span class="token number">0x0000000798000000</span><span class="token punctuation">,</span> <span class="token number">0x00000007c0000000</span><span class="token punctuation">)</span>  eden space 33280K<span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x0000000795580000</span><span class="token punctuation">,</span><span class="token number">0x00000007955d34a8</span><span class="token punctuation">,</span><span class="token number">0x0000000797600000</span><span class="token punctuation">)</span>  from space 5120K<span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x0000000797600000</span><span class="token punctuation">,</span><span class="token number">0x0000000797600000</span><span class="token punctuation">,</span><span class="token number">0x0000000797b00000</span><span class="token punctuation">)</span>  to   space 5120K<span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x0000000797b00000</span><span class="token punctuation">,</span><span class="token number">0x0000000797b00000</span><span class="token punctuation">,</span><span class="token number">0x0000000798000000</span><span class="token punctuation">)</span> ParOldGen<span class="token punctuation">[</span>老年代<span class="token punctuation">]</span>       total 87552K<span class="token punctuation">,</span> used 603K <span class="token punctuation">[</span><span class="token number">0x0000000740000000</span><span class="token punctuation">,</span> <span class="token number">0x0000000745580000</span><span class="token punctuation">,</span> <span class="token number">0x0000000795580000</span><span class="token punctuation">)</span>  object space 87552K<span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x0000000740000000</span><span class="token punctuation">,</span><span class="token number">0x0000000740096fe8</span><span class="token punctuation">,</span><span class="token number">0x0000000745580000</span><span class="token punctuation">)</span> Metaspace<span class="token punctuation">[</span>元空间<span class="token punctuation">]</span>      used 3217K<span class="token punctuation">,</span> capacity 4496K<span class="token punctuation">,</span> committed 4864K<span class="token punctuation">,</span> reserved 1056768K  <span class="token keyword">class</span> <span class="token class-name">space</span>    used 352K<span class="token punctuation">,</span> capacity 388K<span class="token punctuation">,</span> committed 512K<span class="token punctuation">,</span> reserved 1048576K<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-2-离线工具查看"><a href="#8-2-离线工具查看" class="headerlink" title="8.2 离线工具查看"></a>8.2 离线工具查看</h4><p>比如sun的<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fjava.net%2Fprojects%2Fgchisto" target="_blank" rel="noopener">gchisto</a>，<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fchewiebug%2FGCViewer" target="_blank" rel="noopener">gcviewer</a>离线分析工具，做个笔记先了解下还没用过，可视化好像很好用的样子。</p><h3 id="自带的jconsole工具、jstat命令"><a href="#自带的jconsole工具、jstat命令" class="headerlink" title="自带的jconsole工具、jstat命令"></a>自带的jconsole工具、jstat命令</h3><p>终端输入jconsole就会出现jdk自带的gui监控工具</p><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/jvm/jconsole.jpg" alt="image"></p><p>jconsole</p><p>可以根据内存使用情况间接了解内存使用和gc情况</p><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/jvm/jconsole1.jpg" alt="image"></p><p>jconsole</p><p>jstat命令</p><p>比如jstat -gcutil pid查看对应java进程gc情况</p><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/jvm/jstat.jpg" alt="image"></p><p>jstat</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">s0</span><span class="token punctuation">:</span> 新生代survivor space<span class="token number">0</span>简称 就是准备复制的那块 单位为<span class="token number">%</span><span class="token property">s1</span><span class="token punctuation">:</span>指新生代s<span class="token number">1</span>已使用百分比，为<span class="token number">0</span>的话说明没有存活对象到这边<span class="token property">e</span><span class="token punctuation">:</span>新生代<span class="token function">eden</span><span class="token punctuation">(</span>伊甸园<span class="token punctuation">)</span>区域<span class="token punctuation">(</span><span class="token number">%</span><span class="token punctuation">)</span><span class="token property">o</span><span class="token punctuation">:</span>老年代<span class="token punctuation">(</span><span class="token number">%</span><span class="token punctuation">)</span><span class="token property">ygc</span><span class="token punctuation">:</span>新生代  次数<span class="token property">ygct</span><span class="token punctuation">:</span>minor gc耗时<span class="token property">fgct</span><span class="token punctuation">:</span>full gc耗时<span class="token punctuation">(</span>秒<span class="token punctuation">)</span><span class="token property">GCT</span><span class="token punctuation">:</span> ygct+fgct 耗时<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="几个疑问"><a href="#几个疑问" class="headerlink" title="几个疑问"></a>几个疑问</h2><h3 id="GC是怎么判断对象是被标记的"><a href="#GC是怎么判断对象是被标记的" class="headerlink" title="GC是怎么判断对象是被标记的"></a>GC是怎么判断对象是被标记的</h3><p>通过枚举根节点的方式，通过jvm提供的一种oopMap的数据结构，简单来说就是不要再通过去遍历内存里的东西，而是通过OOPMap的数据结构去记录该记录的信息,比如说它可以不用去遍历整个栈，而是扫描栈上面引用的信息并记录下来。</p><p>总结:通过OOPMap把栈上代表引用的位置全部记录下来，避免全栈扫描，加快枚举根节点的速度，除此之外还有一个极为重要的作用，可以帮HotSpot实现准确式GC【这边的准确关键就是类型，可以根据给定位置的某块数据知道它的准确类型，HotSpot是通过oopMap外部记录下这些信息，存成映射表一样的东西】。</p><h3 id="什么时候触发GC"><a href="#什么时候触发GC" class="headerlink" title="什么时候触发GC"></a>什么时候触发GC</h3><p>简单来说，触发的条件就是GC算法区域满了或将满了。</p><pre class="line-numbers language-css"><code class="language-css">minor <span class="token function">GC</span><span class="token punctuation">(</span>young GC<span class="token punctuation">)</span><span class="token punctuation">:</span>当年轻代中eden区分配满的时候触发[值得一提的是因为young GC后部分存活的对象会已到老年代<span class="token punctuation">(</span>比如对象熬过<span class="token number">15</span>轮<span class="token punctuation">)</span>，所以过后old gen的占用量通常会变高]full <span class="token property">GC</span><span class="token punctuation">:</span>①手动调用System<span class="token number">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法 [增加了full GC频率，不建议使用而是让jvm自己管理内存，可以设置<span class="token property">-XX</span><span class="token punctuation">:</span>+ DisableExplicitGC来禁止RMI调用System<span class="token number">.</span>gc]②发现perm gen（如果存在永久代的话<span class="token punctuation">)</span>需分配空间但已经没有足够空间③老年代空间不足，比如说新生代的大对象大数组晋升到老年代就可能导致老年代空间不足。④CMS GC时出现Promotion Faield[pf]⑤统计得到的Minor GC晋升到旧生代的平均大小大于老年代的剩余空间。这个比较难理解，这是HotSpot为了避免由于新生代晋升到老年代导致老年代空间不足而触发的FUll GC。比如程序第一次触发Minor GC后，有<span class="token number">5</span>m的对象晋升到老年代，姑且现在平均算<span class="token number">5</span>m，那么下次Minor GC发生时，先判断现在老年代剩余空间大小是否超过<span class="token number">5</span>m，如果小于<span class="token number">5</span>m，则HotSpot则会触发full <span class="token function">GC</span><span class="token punctuation">(</span>这点挺智能的<span class="token punctuation">)</span>Promotion <span class="token property">Faield</span><span class="token punctuation">:</span>minor GC时 survivor space放不下[满了或对象太大]，对象只能放到老年代，而老年代也放不下会导致这个错误。Concurrent Model <span class="token property">Failure</span><span class="token punctuation">:</span>cms时特有的错误，因为cms时垃圾清理和用户线程可以是并发执行的，如果在清理的过程中可能原因：<span class="token number">1</span> cms触发太晚，可以把<span class="token property">XX</span><span class="token punctuation">:</span>CMSInitiatingOccupancyFraction调小[比如<span class="token property">-XX</span><span class="token punctuation">:</span>CMSInitiatingOccupancyFraction=<span class="token number">70</span> 是指设定CMS在对内存占用率达到<span class="token number">70%</span>的时候开始<span class="token function">GC</span><span class="token punctuation">(</span>因为CMS会有浮动垃圾,所以一般都较早启动GC<span class="token punctuation">)</span>]<span class="token number">2</span> 垃圾产生速度大于清理速度，可能是晋升阈值设置过小，Survivor空间小导致跑到老年代，eden区太小，存在大对象、数组对象等情况<span class="token number">3.</span>空间碎片过多，可以开启空间碎片整理并合理设置周期时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>full gc导致了concurrent mode failure，而不是因为concurrent mode failure错误导致触发full gc，真正触发full gc的原因可能是ygc时发生的promotion failure。</p></blockquote><h3 id="cms收集器是否会扫描年轻代"><a href="#cms收集器是否会扫描年轻代" class="headerlink" title="cms收集器是否会扫描年轻代"></a>cms收集器是否会扫描年轻代</h3><blockquote><p>会，在初始标记的时候会扫描新生代。</p><p>虽然cms是老年代收集器，但是我们知道年轻代的对象是可以晋升为老年代的，为了空间分配担保，还是有必要去扫描年轻代。</p></blockquote><h3 id="什么是空间分配担保"><a href="#什么是空间分配担保" class="headerlink" title=".什么是空间分配担保"></a>.什么是空间分配担保</h3><p>在minor gc前，jvm会先检查老年代最大可用空间是否大于新生代所有对象总空间，如果是的话，则minor gc可以确保是安全的，</p><blockquote><p>如果担保失败,会检查一个配置(HandlePromotionFailire),即是否允许担保失败。</p><p>如果允许:继续检查老年代最大可用可用的连续空间是否大于之前晋升的平均大小，比如说剩10m，之前每次都有9m左右的新生代到老年代，那么将尝试一次minor gc(大于的情况)，这会比较冒险。</p><p>如果不允许，而且还小于的情况，则会触发full gc。【为了避免经常full GC 该参数建议打开】</p><p>这边为什么说是冒险是因为minor gc过后如果出现大对象，由于新生代采用复制算法，survivor无法容纳将跑到老年代，所以才会去计算之前的平均值作为一种担保的条件与老年代剩余空间比较，这就是分配担保。</p><p>这种担保是动态概率的手段，但是也有可能出现之前平均都比较低，突然有一次minor gc对象变得很多远高于以往的平均值，这个时候就会导致担保失败【Handle Promotion Failure】，这就只好再失败后再触发一次FULL GC，</p></blockquote><h3 id="为什么复制算法要分两个Survivor，而不直接移到老年代"><a href="#为什么复制算法要分两个Survivor，而不直接移到老年代" class="headerlink" title="为什么复制算法要分两个Survivor，而不直接移到老年代"></a>为什么复制算法要分两个Survivor，而不直接移到老年代</h3><p>这样做的话效率可能会更高，但是old区一般都是熬过多次可达性分析算法过后的存活的对象，要求比较苛刻且空间有限，而不能直接移过去，这将导致一系列问题(比如老年代容易被撑爆)</p><p>分两个Survivor(from/to)，自然是为了保证复制算法运行以提高效率。</p><h3 id="各个版本的JVM使用的垃圾收集器是怎么样的"><a href="#各个版本的JVM使用的垃圾收集器是怎么样的" class="headerlink" title="各个版本的JVM使用的垃圾收集器是怎么样的"></a>各个版本的JVM使用的垃圾收集器是怎么样的</h3><p>准确来说，垃圾收集器的使用跟当前jvm也有很大的关系，比如说g1是jdk7以后的版本才开始出现。</p><p>并不是所有的垃圾收集器都是默认开启的，有些得通过设置相应的开关参数才会使用。比如说cms，需设置(XX:+UseConcMarkSweepGC)</p><p>这边有几个实用的命令，比如说server模式下</p><pre class="line-numbers language-shell"><code class="language-shell">#UnlockExperimentalVMOptions UnlockDiagnosticVMOptions解锁获取jvm参数，PrintFlagsFinal用于输出xx相关参数，以Benchmark类测试，这边会有很多结果 大都看不懂- - 在这边查(usexxxxxxgc会看到jvm不同收集器的开关情况)java -server -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+PrintFlagsFinal Benchmark#后面跟| grep ":"获取已赋值的参数[加:代表被赋值过]java -server -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+PrintFlagsFinal Benchmark| grep ":"#获得用户自定义的设置或者jvm设置的详细的xx参数和值java -server -XX:+PrintCommandLineFlags Benchmark<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>!<img src="https://raw.githubusercontent.com/MajorTee/markdp/master/jvm/UseParallelGC.jpg" alt="image"></p><p>本人用的jdk8，这边UseParallelGC为true，参考深入理解jvm那本书说这个是Parallel Scavenge+Serial old搭配组合的开关，但是网上又说8默认是Parallel Scavenge+Parallel Old,我还是信书的吧 - -。</p><p>更多相关参数<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fupload-images.jianshu.io%2Fupload_images%2F4914401-4503c1ac0196db78.png" target="_blank" rel="noopener">来源</a></p><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/jvm/changyongcanshu.jpg" alt="image"></p><p>常用参数</p><blockquote><p>据说更高版本的jvm默认使用g1</p></blockquote><h3 id="stop-the-world具体是什么，有没有办法避免"><a href="#stop-the-world具体是什么，有没有办法避免" class="headerlink" title="stop the world具体是什么，有没有办法避免"></a>stop the world具体是什么，有没有办法避免</h3><p>stop the world简单来说就是gc的时候，停掉除gc外的java线程。</p><p>无论什么gc都难以避免停顿，即使是g1也会在初始标记阶段发生，stw并不可怕，可以尽可能的减少停顿时间。</p><h3 id="新生代什么样的情况会晋升为老年代"><a href="#新生代什么样的情况会晋升为老年代" class="headerlink" title="新生代什么样的情况会晋升为老年代"></a>新生代什么样的情况会晋升为老年代</h3><p>对象优先分配在eden区，eden区满时会触发一次minor GC</p><blockquote><p>对象晋升规则<br>1 长期存活的对象进入老年代，对象每熬过一次GC年龄+1(默认年龄阈值15，可配置)。<br>2 对象太大新生代无法容纳则会分配到老年代<br>3 eden区满了，进行minor gc后，eden和一个survivor区仍然存活的对象无法放到(to survivor区)则会通过分配担保机制放到老年代，这种情况一般是minor gc后新生代存活的对象太多。<br>4 动态年龄判定，为了使内存分配更灵活，jvm不一定要求对象年龄达到MaxTenuringThreshold(15)才晋升为老年代，若survior区相同年龄对象总大小大于survior区空间的一半，则大于等于这个年龄的对象将会在minor gc时移到老年代</p></blockquote><h3 id="怎么理解g1，适用于什么场景"><a href="#怎么理解g1，适用于什么场景" class="headerlink" title="怎么理解g1，适用于什么场景"></a>怎么理解g1，适用于什么场景</h3><blockquote><p>G1 GC 是区域化、并行-并发、增量式垃圾回收器，相比其他 HotSpot 垃圾回收器，可提供更多可预测的暂停。增量的特性使 G1 GC 适用于更大的堆，在最坏的情况下仍能提供不错的响应。G1 GC 的自适应特性使 JVM 命令行只需要软实时暂停时间目标的最大值以及 Java 堆大小的最大值和最小值，即可开始工作。</p></blockquote><p>g1不再区分老年代、年轻代这样的内存空间，这是较以往收集器很大的差异，所有的内存空间就是一块划分为不同子区域，每个区域大小为1m-32m，最多支持的内存为64g左右，且由于它为了的特性适用于大内存机器。</p><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/jvm/g1.jpg" alt="image"></p><p>g1回收时堆内存情况</p><p>适用场景:</p><p>1.像cms能与应用程序并发执行，GC停顿短【短而且可控】，用户体验好的场景。</p><p>2.面向服务端，大内存，高cpu的应用机器。【网上说差不多是6g或更大】</p><p>3.应用在运行过程中经常会产生大量内存碎片，需要压缩空间【比cms好的地方之一，g1具备压缩功能】。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>深入理解Java虚拟机</p><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.cnblogs.com%2Fchenyangyao%2Fp%2F5269622.html" target="_blank" rel="noopener">JVM内存模型、指令重排、内存屏障概念解析</a></p><p><a href="https://www.jianshu.com/p/9c19eb0ea4d8" target="_blank" rel="noopener">Java对象头</a></p><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.cnblogs.com%2Fduke2016%2Fp%2F6250766.html" target="_blank" rel="noopener">GC收集器</a></p><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F41922036%2Fanswer%2F93079526" target="_blank" rel="noopener">Major GC和Full GC的区别</a></p><p><a href="https://links.jianshu.com/go?to=http%3A%2F%2Fm635674608.iteye.com%2Fblog%2F2236137" target="_blank" rel="noopener">JVM 垃圾回收 Minor gc vs Major gc vs Full gc</a></p><p><a href="https://links.jianshu.com/go?to=http%3A%2F%2Frednaxelafx.iteye.com%2Fblog%2F1044951" target="_blank" rel="noopener">关于准确式GC、保守式GC</a></p><p><a href="https://www.jianshu.com/p/55670407fdb9" target="_blank" rel="noopener">关于CMS垃圾收集算法的一些疑惑</a></p><p><a href="https://www.jianshu.com/p/2a1b2f17d3e4" target="_blank" rel="noopener">图解cms</a></p><p><a href="https://www.jianshu.com/p/0f1f5adffdc1" target="_blank" rel="noopener">G1垃圾收集器介绍</a></p><p><a href="https://links.jianshu.com/go?to=http%3A%2F%2Fwww.cnblogs.com%2FlittleLord%2Fp%2F5380624.html" target="_blank" rel="noopener">详解cms回收机制</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>JMM 是一种规范，是解决由于多线程通过共享内存进行通信时，存在的本地内存数据不一致、编译器会对代码指令重排序、处理器会对代码乱序执行等带来的问题，而且写java代码的时候难免会经常和内存打交道，遇到各种内存溢出问题，有时候又难以定位问题，因此是一定要学习jmm以及GC的。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 底层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java引用机制</title>
      <link href="/2019/08/31/Java%E5%BC%95%E7%94%A8%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/08/31/Java%E5%BC%95%E7%94%A8%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ol><li>创建阶段(<code>Created</code>)</li><li>应用阶段(<code>In Use</code>)</li><li>不可见阶段(<code>Invisible</code>)</li><li>不可达阶段(<code>Unreachable</code>)</li><li>收集阶段(<code>Collected</code>)</li><li>终结阶段(<code>Finalized</code>)</li><li>对象空间重分配阶段(<code>De-allocated</code>)</li></ol><a id="more"></a><h4 id="创建阶段-Created"><a href="#创建阶段-Created" class="headerlink" title="创建阶段(Created)"></a>创建阶段(Created)</h4><p>在创建阶段系统通过下面的几个步骤来完成对象的创建过程</p><blockquote></blockquote><p>为对象分配存储空间<br>开始构造对象<br>从超类到子类对static成员进行初始化<br>超类成员变量按顺序初始化，递归调用超类的构造方法<br>子类成员变量按顺序初始化，子类构造方法调用<br>一旦对象被创建，并被分派给某些变量赋值，这个对象的状态就切换到了应用阶段</p><h4 id="应用阶段-In-Use"><a href="#应用阶段-In-Use" class="headerlink" title="应用阶段(In Use)"></a>应用阶段(<code>In Use</code>)</h4><p>对象至少被一个强引用持有着。</p><h4 id="不可见阶段-Invisible"><a href="#不可见阶段-Invisible" class="headerlink" title="不可见阶段(Invisible)"></a>不可见阶段(<code>Invisible</code>)</h4><p>当一个对象处于不可见阶段时，说明程序本身不再持有该对象的任何强引用，虽然该这些引用仍然是存在着的。<br>简单说就是程序的执行已经超出了该对象的作用域了。</p><h4 id="不可达阶段-Unreachable"><a href="#不可达阶段-Unreachable" class="headerlink" title="不可达阶段(Unreachable)"></a>不可达阶段(<code>Unreachable</code>)</h4><p>对象处于不可达阶段是指该对象不再被任何强引用所持有。<br>与“不可见阶段”相比，“不可见阶段”是指程序不再持有该对象的任何强引用，这种情况下，该对象仍可能被<code>JVM</code>等系统下的某些已装载的静态变量或线程或<code>JNI</code>等强引用持有着，这些特殊的强引用被称为”<code>GC root</code>”。存在着这些<code>GC root</code>会导致对象的内存泄露情况，无法被回收。</p><h4 id="收集阶段-Collected"><a href="#收集阶段-Collected" class="headerlink" title="收集阶段(Collected)"></a>收集阶段(<code>Collected</code>)</h4><p>当垃圾回收器发现该对象已经处于“不可达阶段”并且垃圾回收器已经对该对象的内存空间重新分配做好准备时，则对象进入了“收集阶段”。如果该对象已经重写了<code>finalize()</code>方法，则会去执行该方法的终端操作。<br>这里要特别说明一下：不要重载finazlie()方法！原因有两点：</p><ol><li><p>会影响JVM的对象分配与回收速度<br> 在分配该对象时，JVM需要在垃圾回收器上注册该对象，以便在回收时能够执行该重载方法；在该方法的执行时需要消耗CPU时间且在执行完该方法后才会重新执行回收操作，即至少需要垃圾回收器对该对象执行两次GC。</p></li><li><p>可能造成该对象的再次“复活”<br> 在finalize()方法中，如果有其它的强引用再次持有该对象，则会导致对象的状态由“收集阶段”又重新变为“应用阶段”。这个已经破坏了Java对象的生命周期进程，且“复活”的对象不利用后续的代码管理。</p></li></ol><h4 id="终结阶段"><a href="#终结阶段" class="headerlink" title="终结阶段"></a>终结阶段</h4><p>当对象执行完finalize()方法后仍然处于不可达状态时，则该对象进入终结阶段。在该阶段是等待垃圾回收器对该对象空间进行回收。</p><h4 id="对象空间重新分配阶段"><a href="#对象空间重新分配阶段" class="headerlink" title="对象空间重新分配阶段"></a>对象空间重新分配阶段</h4><p>垃圾回收器对该对象的所占用的内存空间进行回收或者再分配了，则该对象彻底消失了，称之为“对象空间重新分配阶段”。</p><h3 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h3><p>强引用是使用最普遍的引用。如果一个对象具有强引用，那垃圾收器绝不会回收它。当内存空间不足，Java虚拟机宁愿抛出<code>OutOfM moryError</code>错误，使程序异常终止，也不会靠随意回收具有强引用 对象来解决内存不足的问题。</p><h3 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h3><p>软引用是用来描述一些还有用但并非必须的对象。对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围进行第二次回收。如果这次回收还没有足够的内存，才会抛出内存溢出异常。</p><pre class="line-numbers language-Java"><code class="language-Java">/** * 软引用何时被收集 * 运行参数 -Xmx200m -XX:+PrintGC * Created by ccr at 2018/7/14. */public class SoftReferenceDemo {    public static void main(String[] args) throws InterruptedException {        //100M的缓存数据        byte[] cacheData = new byte[100 * 1024 * 1024];        //将缓存数据用软引用持有        SoftReference<byte[]> cacheRef = new SoftReference<>(cacheData);        //将缓存数据的强引用去除        cacheData = null;        System.out.println("第一次GC前" + cacheData);        System.out.println("第一次GC前" + cacheRef.get());        //进行一次GC后查看对象的回收情况        System.gc();        //等待GC        Thread.sleep(500);        System.out.println("第一次GC后" + cacheData);        System.out.println("第一次GC后" + cacheRef.get());        //在分配一个120M的对象，看看缓存对象的回收情况        byte[] newData = new byte[120 * 1024 * 1024];        System.out.println("分配后" + cacheData);        System.out.println("分配后" + cacheRef.get());    }}第一次GC前null第一次GC前[B@7d4991ad[GC (System.gc())  105728K->103248K(175104K), 0.0009623 secs][Full GC (System.gc())  103248K->103139K(175104K), 0.0049909 secs]第一次GC后null第一次GC后[B@7d4991ad[GC (Allocation Failure)  103805K->103171K(175104K), 0.0027889 secs][GC (Allocation Failure)  103171K->103171K(175104K), 0.0016018 secs][Full GC (Allocation Failure)  103171K->103136K(175104K), 0.0089988 secs][GC (Allocation Failure)  103136K->103136K(199680K), 0.0009408 secs][Full GC (Allocation Failure)  103136K->719K(128512K), 0.0082685 secs]分配后null分配后null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的示例中就能看出，软引用关联的对象不会被<code>GC</code>回收。<code>JVM</code>在分配空间时，若果<code>Heap</code>空间不足，就会进行相应的<code>GC</code>，但是这次<code>GC</code>并不会收集软引用关联的对象，但是在JVM发现就算进行了一次回收后还是不足（<code>Allocation Failure</code>），<code>JVM</code>会尝试第二次<code>GC</code>，回收软引用关联的对象。</p><p>像这种如果内存充足，<code>GC</code>时就保留，内存不够，<code>GC</code>再来收集的功能很适合用在缓存的引用场景中。在使用缓存时有一个原则，如果缓存中有就从缓存获取，如果没有就从数据库中获取，缓存的存在是为了加快计算速度，如果因为缓存导致了内存不足进而整个程序崩溃，那就得不偿失了。</p><h3 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h3><blockquote><p>弱引用也是用来描述非必须对象的，他的强度比软引用更弱一些，被弱引用关联的对象，在垃圾回收时，如果这个对象只被弱引用关联（没有任何强引用关联他），那么这个对象就会被回收。</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 弱引用关联对象何时被回收 * Created by ccr at 2018/7/14. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeakReferenceDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//100M的缓存数据</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cacheData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将缓存数据用软引用持有</span>        WeakReference<span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> cacheRef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>cacheData<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一次GC前"</span> <span class="token operator">+</span> cacheData<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一次GC前"</span> <span class="token operator">+</span> cacheRef<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//进行一次GC后查看对象的回收情况</span>        System<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//等待GC</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一次GC后"</span> <span class="token operator">+</span> cacheData<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一次GC后"</span> <span class="token operator">+</span> cacheRef<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将缓存数据的强引用去除</span>        cacheData <span class="token operator">=</span> null<span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//等待GC</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二次GC后"</span> <span class="token operator">+</span> cacheData<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二次GC后"</span> <span class="token operator">+</span> cacheRef<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*第一次GC前[B@7d4991ad第一次GC前[B@7d4991ad第一次GC后[B@7d4991ad第一次GC后[B@7d4991ad第二次GC后null第二次GC后null*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的代码中可以看出，弱引用关联的对象是否回收取决于这个对象有没有其他强引用指向它。这个确实很难理解，既然弱引用关联对象的存活周期和强引用差不多，那直接用强引用好了，干嘛费用弄出个弱引用呢？其实弱引用存在必然有他的应用场景。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>Object<span class="token operator">></span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">putToContainer</span><span class="token punctuation">(</span>Object key<span class="token punctuation">,</span>Object value<span class="token punctuation">)</span><span class="token punctuation">{</span>    container<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//某个类中有这样一段代码</span>    Object key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object value <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">putToContainer</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//..........</span>    <span class="token comment" spellcheck="true">/**     * 若干调用层次后程序员发现这个key指向的对象没有用了，     * 为了节省内存打算把这个对象抛弃，然而下面这个方式真的能把对象回收掉吗？     * 由于container对象中包含了这个对象的引用,所以这个对象不能按照程序员的意向进行回收.     * 并且由于在程序中的任何部分没有再出现这个键，所以，这个键 / 值 对无法从映射中删除。     * 很可能会造成内存泄漏。     */</span>    key <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面一段话摘自《Java核心技术卷1》：</p><blockquote><p>设计 <code>WeakHashMap</code>类是为了解决一个有趣的问题。如果有一个值，对应的键已经不再 使用了， 将会出现什么情况呢？ 假定对某个键的最后一次引用已经消亡，不再有任何途径引 用这个值的对象了。但是，由于在程序中的任何部分没有再出现这个键，所以，这个键 / 值 对无法从映射中删除。为什么垃圾回收器不能够删除它呢？ 难道删除无用的对象不是垃圾回 收器的工作吗？</p></blockquote><blockquote><p>遗憾的是，事情没有这样简单。垃圾回收器跟踪活动的对象。只要映射对象是活动的， 其中的所有桶也是活动的， 它们不能被回收。因此，需要由程序负责从长期存活的映射表中 删除那些无用的值。 或者使用 <code>WeakHashMap</code>完成这件事情。当对键的唯一引用来自散列条<br> 目时， 这一数据结构将与垃圾回收器协同工作一起删除键 / 值对。</p></blockquote><blockquote><p>下面是这种机制的内部运行情况。<code>WeakHashMap</code> 使用弱引用（<code>weak references</code>) 保存键。 <code>WeakReference</code> 对象将引用保存到另外一个对象中，在这里，就是散列键。对于这种类型的 对象，垃圾回收器用一种特有的方式进行处理。通常，如果垃圾回收器发现某个特定的对象 已经没有他人引用了，就将其回收。然而， 如果某个对象只能由 <code>WeakReference</code> 引用， 垃圾 回收器仍然回收它，但要将引用这个对象的弱引用放人队列中。<code>WeakHashMap</code>将周期性地检 查队列， 以便找出新添加的弱引用。一个弱引用进人队列意味着这个键不再被他人使用， 并 且已经被收集起来。于是， <code>WeakHashMap</code>将删除对应的条目。</p></blockquote><p>除了<code>WeakHashMap</code>使用了弱引用，<code>ThreadLocal</code>类中也是用了弱引用。</p><h3 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h3><p>一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来获取一个对象的实例。为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。虚引用和弱引用对关联对象的回收都不会产生影响，如果只有虚引用活着弱引用关联着对象，那么这个对象就会被回收。它们的不同之处在于弱引用的<code>get</code>方法，虚引用的<code>get</code>方法始终返回<code>null</code>,弱引用可以使用<code>ReferenceQueue</code>,虚引用必须配合<code>ReferenceQueue</code>使用。</p><p><code>jdk</code>中直接内存的回收就用到虚引用，由于<code>jvm</code>自动内存管理的范围是堆内存，而直接内存是在堆内存之外（其实是内存映射文件，自行去理解虚拟内存空间的相关概念），所以直接内存的分配和回收都是有<code>Unsafe</code>类去操作，<code>java</code>在申请一块直接内存之后，会在堆内存分配一个对象保存这个堆外内存的引用，这个对象被垃圾收集器管理，一旦这个对象被回收，相应的用户线程会收到通知并对直接内存进行清理工作。</p><p>例子：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhantomReferenceTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> TEST_DATA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ReferenceQueue<span class="token operator">&lt;</span>TestClass<span class="token operator">></span> QUEUE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TestClass obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestClass</span><span class="token punctuation">(</span><span class="token string">"Test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PhantomReference<span class="token operator">&lt;</span>TestClass<span class="token operator">></span> phantomReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhantomReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> QUEUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 该线程不断读取这个虚引用，并不断往列表里插入数据，以促使系统早点进行GC</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                TEST_DATA<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>phantomReference<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这个线程不断读取引用队列，当弱引用指向的对象呗回收时，该引用就会被加入到引用队列中</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Reference<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">TestClass</span><span class="token operator">></span> poll <span class="token operator">=</span> QUEUE<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>poll <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--- 虚引用对象被jvm回收了 ---- "</span> <span class="token operator">+</span> poll<span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--- 回收对象 ---- "</span> <span class="token operator">+</span> poll<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TestClass</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> String name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">TestClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"TestClass - "</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用的虚拟机设置如下：</p><pre class="line-numbers language-jav"><code class="language-jav">-verbose:gc -Xms4m -Xmx4m -Xmn2m<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token function">GC</span> <span class="token punctuation">(</span>Allocation Failure<span class="token punctuation">)</span>  1024K<span class="token operator">-</span><span class="token operator">></span><span class="token function">432K</span><span class="token punctuation">(</span>3584K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0113386</span> secs<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">GC</span> <span class="token punctuation">(</span>Allocation Failure<span class="token punctuation">)</span>  1455K<span class="token operator">-</span><span class="token operator">></span><span class="token function">520K</span><span class="token punctuation">(</span>3584K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0133610</span> secs<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">GC</span> <span class="token punctuation">(</span>Allocation Failure<span class="token punctuation">)</span>  1544K<span class="token operator">-</span><span class="token operator">></span><span class="token function">648K</span><span class="token punctuation">(</span>3584K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0008654</span> secs<span class="token punctuation">]</span>nullnullnull<span class="token punctuation">[</span><span class="token function">GC</span> <span class="token punctuation">(</span>Allocation Failure<span class="token punctuation">)</span>  1655K<span class="token operator">-</span><span class="token operator">></span><span class="token function">973K</span><span class="token punctuation">(</span>3584K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0008111</span> secs<span class="token punctuation">]</span>null<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>省略几个null的输出<span class="token punctuation">[</span><span class="token function">GC</span> <span class="token punctuation">(</span>Allocation Failure<span class="token punctuation">)</span>  1980K<span class="token operator">-</span><span class="token operator">></span><span class="token function">1997K</span><span class="token punctuation">(</span>3584K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0009289</span> secs<span class="token punctuation">]</span><span class="token punctuation">[</span>Full <span class="token function">GC</span> <span class="token punctuation">(</span>Ergonomics<span class="token punctuation">)</span>  1997K<span class="token operator">-</span><span class="token operator">></span><span class="token function">1870K</span><span class="token punctuation">(</span>3584K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0048483</span> secs<span class="token punctuation">]</span><span class="token operator">--</span><span class="token operator">-</span> 弱引用对象被jvm回收了 <span class="token operator">--</span><span class="token operator">--</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span>PhantomReference<span class="token annotation punctuation">@74cbe23d</span><span class="token operator">--</span><span class="token operator">-</span> 回收对象 <span class="token operator">--</span><span class="token operator">--</span> nullnull<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>省略几个null和几次Full GC的输出<span class="token punctuation">[</span>Full <span class="token function">GC</span> <span class="token punctuation">(</span>Ergonomics<span class="token punctuation">)</span>  2971K<span class="token operator">-</span><span class="token operator">></span><span class="token function">2971K</span><span class="token punctuation">(</span>3584K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0024850</span> secs<span class="token punctuation">]</span><span class="token punctuation">[</span>Full <span class="token function">GC</span> <span class="token punctuation">(</span>Allocation Failure<span class="token punctuation">)</span>  2971K<span class="token operator">-</span><span class="token operator">></span><span class="token function">2971K</span><span class="token punctuation">(</span>3584K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0022460</span> secs<span class="token punctuation">]</span>Exception in thread <span class="token string">"Thread-0"</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>OutOfMemoryError<span class="token operator">:</span> Java heap space    at weakhashmap<span class="token punctuation">.</span>PhantomReferenceTest<span class="token punctuation">.</span>lambda$main$<span class="token function">0</span><span class="token punctuation">(</span>PhantomReferenceTest<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">)</span>    at weakhashmap<span class="token punctuation">.</span>PhantomReferenceTest$$Lambda$<span class="token number">1</span><span class="token operator">/</span><span class="token number">2065951873</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Unknown Source<span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">748</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为设置的虚拟机堆大小比较小，所以创建一个100k的对象时直接进入了老年代，等到发生Full GC时才会被扫描然后回收。</p><p><strong>适用场景</strong></p><p>事实上，虚引用有一个很重要的用途就是用来做堆外内存的释放，DirectByteBuffer就是通过虚引用来实现堆外内存的释放的。</p><p><strong>小结</strong></p><ul><li>虚引用是最弱的引用</li><li>虚引用对对象而言是无感知的，对象有虚引用跟没有是完全一样的</li><li>虚引用不会影响对象的生命周期</li><li>虚引用可以用来做为对象是否存活的监控</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 底层机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat架构分析</title>
      <link href="/2019/08/31/Tomcat%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/"/>
      <url>/2019/08/31/Tomcat%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文链接：<a href="https://blog.csdn.net/u010870518/article/details/79006434" target="_blank" rel="noopener">https://blog.csdn.net/u010870518/article/details/79006434</a></p></blockquote><h2 id="一、Tomcat顶层架构"><a href="#一、Tomcat顶层架构" class="headerlink" title="一、Tomcat顶层架构"></a>一、Tomcat顶层架构</h2><p>Tomcat中最顶层的容器是Server，代表着整个服务器，一个Server可以包含至少一个Service，用于具体提供服务。</p><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/9vsog4hfon.jpeg" alt="image"></p><p>Service主要包含两个部分：Connector和Container。从上图中可以看出 Tomcat 的心脏就是这两个组件，他们的作用如下：</p><blockquote><p>1、Connector用于处理连接相关的事情，并提供Socket与Request和Response相关的转化;</p><p>2、Container用于封装和管理Servlet，以及具体处理Request请求；</p></blockquote><a id="more"></a><p>一个Tomcat中只有一个Server，一个Server可以包含多个Service，一个Service只有一个Container，但是可以有多个Connectors，这是因为一个服务可以有多个连接，如同时提供Http和Https链接，也可以提供向相同协议不同端口的连接。</p><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/2uixgvjg8x.jpeg" alt="image"></p><p>多个 Connector 和一个 Container 就形成了一个 Service，有了 Service 就可以对外提供服务了，但是 Service 还要一个生存的环境，必须要有人能够给她生命、掌握其生死大权，那就非 Server 莫属了！所以整个 Tomcat 的生命周期由 Server 控制。</p><p>另外，上述的包含关系或者说是父子关系，都可以在tomcat的conf目录下的server.xml配置文件中看出，下图是删除了注释内容之后的一个完整的server.xml配置文件（Tomcat版本为8.0）</p><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/rd4cx7ek0i.jpeg" alt="image"></p><p>详细的配置文件文件内容可以到Tomcat官网查看：<a href="http://tomcat.apache.org/tomcat-8.0-doc/index.html" target="_blank" rel="noopener">http://tomcat.apache.org/tomcat-8.0-doc/index.html</a></p><p>上边的配置文件，还可以通过下边的一张结构图更清楚的理解：</p><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/9p29co4urs.png" alt="image"></p><p>Server标签设置的端口号为8005，shutdown=”SHUTDOWN” ，表示在8005端口监听“SHUTDOWN”命令，如果接收到了就会关闭Tomcat。一个Server有一个Service，当然还可以进行配置，一个Service有多个，Service左边的内容都属于Container的，Service下边是Connector。</p><h1 id="二、Tomcat顶层架构小结："><a href="#二、Tomcat顶层架构小结：" class="headerlink" title="二、Tomcat顶层架构小结："></a>二、Tomcat顶层架构小结：</h1><blockquote><ol><li>Tomcat中只有一个Server，一个Server可以有多个Service，一个Service可以有多个    Connector和一个Container；</li><li>Server掌管着整个Tomcat的生死大权；</li><li>Service 是对外提供服务的；</li><li>Connector用于接受请求并将请求封装成Request和Response来具体处理；</li><li>Container用于封装和管理Servlet，以及具体处理request请求；</li></ol></blockquote><p>知道了整个Tomcat顶层的分层架构和各个组件之间的关系以及作用，对于绝大多数的开发人员来说Server和Service对我们来说确实很远，而我们开发中绝大部分进行配置的内容是属于Connector和Container的，所以接下来介绍一下Connector和Container。</p><h1 id="三、Connector和Container的微妙关系"><a href="#三、Connector和Container的微妙关系" class="headerlink" title="三、Connector和Container的微妙关系"></a>三、Connector和Container的微妙关系</h1><p>由上述内容我们大致可以知道一个请求发送到Tomcat之后，首先经过Service然后会交给我们的Connector，Connector用于接收请求并将接收的请求封装为Request和Response来具体处理，Request和Response封装完之后再交由Container进行处理，Container处理完请求之后再返回给Connector，最后在由Connector通过Socket将处理的结果返回给客户端，这样整个请求的就处理完了！</p><p>Connector最底层使用的是Socket来进行连接的，Request和Response是按照HTTP协议来封装的，所以Connector同时需要实现TCP/IP协议和HTTP协议！</p><p>Tomcat既然处理请求，那么肯定需要先接收到这个请求，接收请求这个东西我们首先就需要看一下Connector！</p><h1 id="四、Connector架构分析"><a href="#四、Connector架构分析" class="headerlink" title="四、Connector架构分析"></a>四、Connector架构分析</h1><p>Connector用于接受请求并将请求封装成Request和Response，然后交给Container进行处理，Container处理完之后在交给Connector返回给客户端。</p><p>因此，我们可以把Connector分为四个方面进行理解：</p><ol><li>Connector如何接受请求的？</li><li>2如何将请求封装成Request和Response的？</li><li>封装完之后的Request和Response如何交给Container进行处理的？</li><li>Container处理完之后如何交给Connector并返回给客户端的？</li></ol><p>首先看一下Connector的结构图（图B），如下所示：</p><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/8tqnd3zabp.png" alt="image"></p><p>Connector就是使用ProtocolHandler来处理请求的，不同的ProtocolHandler代表不同的连接类型，比如：Http11Protocol使用的是普通Socket来连接的，Http11NioProtocol使用的是NioSocket来连接的。</p><p>其中ProtocolHandler由包含了三个部件：Endpoint、Processor、Adapter。</p><ol><li>Endpoint用来处理底层Socket的网络连接，Processor用于将Endpoint接收到的Socket封装成Request，Adapter用于将Request交给Container进行具体的处理。</li><li>Endpoint由于是处理底层的Socket网络连接，因此Endpoint是用来实现TCP/IP协议的，而Processor用来实现HTTP协议的，Adapter将请求适配到Servlet容器进行具体的处理。</li><li>Endpoint的抽象实现AbstractEndpoint里面定义的Acceptor和AsyncTimeout两个内部类和一个Handler接口。Acceptor用于监听请求，AsyncTimeout用于检查异步Request的超时，Handler用于处理接收到的Socket，在内部调用Processor进行处理。</li></ol><p>至此，我们应该很轻松的回答（1）（2）（3）的问题了，但是（4）还是不知道，那么我们就来看一下Container是如何进行处理的以及处理完之后是如何将处理完的结果返回给Connector的？</p><h2 id="五、Container架构分析"><a href="#五、Container架构分析" class="headerlink" title="五、Container架构分析"></a>五、Container架构分析</h2><p>Container用于封装和管理Servlet，以及具体处理Request请求，在Connector内部包含了4个子容器，结构图如下（图C）：</p><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/xlcojnd9rf.png" alt="image"></p><p>4个子容器的作用分别是：</p><ol><li>Engine：引擎，用来管理多个站点，一个Service最多只能有一个Engine；</li><li>Host：代表一个站点，也可以叫虚拟主机，通过配置Host就可以添加站点；</li><li>Context：代表一个应用程序，对应着平时开发的一套程序，或者一个WEB-INF目录以及下面的web.xml文件；</li><li>Wrapper：每一Wrapper封装着一个Servlet；</li></ol><p>下面找一个Tomcat的文件目录对照一下，如下图所示：</p><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/8gi9a1blv8.png" alt="image"></p><p>Context和Host的区别是Context表示一个应用，我们的Tomcat中默认的配置下webapps下的每一个文件夹目录都是一个Context，其中ROOT目录中存放着主应用，其他目录存放着子应用，而整个webapps就是一个Host站点。</p><p>我们访问应用Context的时候，如果是ROOT下的则直接使用域名就可以访问，例如：<a href="http://www.ledouit.com,如果是Host（webapps）下的其他应用，则可以使用www.ledouit.com/docs进行访问，当然默认指定的根应用（ROOT）是可以进行设定的，只不过Host站点下默认的主营用是ROOT目录下的。" target="_blank" rel="noopener">www.ledouit.com,如果是Host（webapps）下的其他应用，则可以使用www.ledouit.com/docs进行访问，当然默认指定的根应用（ROOT）是可以进行设定的，只不过Host站点下默认的主营用是ROOT目录下的。</a></p><p>看到这里我们知道Container是什么，但是还是不知道Container是如何进行处理的以及处理完之后是如何将处理完的结果返回给Connector的？别急！下边就开始探讨一下Container是如何进行处理的！</p><p>六、Container如何处理请求的<br>Container处理请求是使用Pipeline-Valve管道来处理的！（Valve是阀门之意）</p><p>Pipeline-Valve是责任链模式，责任链模式是指在一个请求处理的过程中有很多处理者依次对请求进行处理，每个处理者负责做自己相应的处理，处理完之后将处理后的请求返回，再让下一个处理着继续处理。<br>但是！Pipeline-Valve使用的责任链模式和普通的责任链模式有些不同！区别主要有以下两点：</p><ol><li>每个Pipeline都有特定的Valve，而且是在管道的最后一个执行，这个Valve叫做BaseValve，BaseValve是不可删除的；</li><li>在上层容器的管道的BaseValve中会调用下层容器的管道。</li></ol><p>我们知道Container包含四个子容器，而这四个子容器对应的BaseValve分别在：StandardEngineValve、StandardHostValve、StandardContextValve、StandardWrapperValve。</p><p>Pipeline的处理流程图如下（图D）：</p><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/20180108212100441.png" alt="image"></p><ol><li>Connector在接收到请求后会首先调用最顶层容器的Pipeline来处理，这里的最顶层容器的Pipeline就是EnginePipeline（Engine的管道）；</li><li>在Engine的管道中依次会执行EngineValve1、EngineValve2等等，最后会执行StandardEngineValve，在StandardEngineValve中会调用Host管道，然后再依次执行Host的HostValve1、HostValve2等，最后在执行StandardHostValve，然后再依次调用Context的管道和Wrapper的管道，最后执行到StandardWrapperValve。</li><li>当执行到StandardWrapperValve的时候，会在StandardWrapperValve中创建FilterChain，并调用其doFilter方法来处理请求，这个FilterChain包含着我们配置的与请求相匹配的Filter和Servlet，其doFilter方法会依次调用所有的Filter的doFilter方法和Servlet的service方法，这样请求就得到了处理！</li><li>当所有的Pipeline-Valve都执行完之后，并且处理完了具体的请求，这个时候就可以将返回的结果交给Connector了，Connector在通过Socket的方式将结果返回给客户端。</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>至此，我们已经对Tomcat的整体架构有了大致的了解，从图A、B、C、D可以看出来每一个组件的基本要素和作用。我们在脑海里应该有一个大概的轮廓了！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WEB服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统 进程 02</title>
      <link href="/2019/07/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B-02/"/>
      <url>/2019/07/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B-02/</url>
      
        <content type="html"><![CDATA[<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>进程是操作系统对运行程序所提供的一种抽象。</p><p>构成：</p><ul><li><p>内存</p><ul><li>进程可以寻址的内存 (称为地址空间) 是进程的一部分</li></ul></li><li><p>寄存器 </p></li><li><p>许多指令显式地读取或更新寄存器</p></li><li><p>其他一些特殊寄存器</p><ul><li>程序计数器（PC）告诉我们当前在执行程序的哪条指令；类似的，堆栈指针和相关的帧指针<br>用于管理堆栈中的函数参数，局部变量和返回地址 </li></ul></li><li><p>持久存储设备 </p><ul><li>一些I/O 信息可能包括当前进程打开的文件列表 </li></ul></li></ul><a id="more"></a><h2 id="进程API"><a href="#进程API" class="headerlink" title="进程API"></a>进程API</h2><ul><li>Create：操作系统必须包含一些创造进程的方法，当您在 shell 中输入命令时，或者双击应用图标时，会调用操作系统创建一个新的进程去运行您指定的程序。</li><li>Destroy：因为已经有一个创建进程的接口，所以操作系统还需要一个强制销毁进程的接口，当然，许多进程会运行直到它运行结束时自动退出，当它们不自动退出时，用户也许希望直接杀死进程，所以一个用来销毁进程的接口是十分有用的。</li><li>wait：有时，用等待的方式让进程停止运行是很有用的，因此，操作系统通常会提供等待的接口。</li><li>Miscellaneous Control：除了杀死或是等待（挂起）进程，通常可能还有其他的控制，例如。大部分操作系统提供一些方法去挂起进程（让进程停止运行一会），然后恢复进程（让进程继续运行）；</li><li>Status：通常有一些接口去获得一些关于进程的状态信息，比如它运行了多久，或是它现在的状态码。 </li></ul><h2 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h2><ul><li><p>运行态：在运行态下，进程在处理器上运行。这意味着它正在执行指令。 </p></li><li><p>就绪态：在就绪态下，进程已准备好运行，但由于某种原因，操作系统选择在此特定时刻不运行它。 </p></li><li><p>阻塞态：在阻塞态下，一个进程执行了某种操作，使它在发生其他事件之前不准备运行。常见示例：进程向磁盘发出了 I/O 请求，它将被阻塞，因此一些其他进程可以使用处理器。 </p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSTEP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 装饰器</title>
      <link href="/2019/07/13/Python-%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
      <url>/2019/07/13/Python-%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="python装饰器"><a href="#python装饰器" class="headerlink" title="python装饰器"></a>python装饰器</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">timeit</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         start <span class="token operator">=</span> time<span class="token punctuation">.</span>clock<span class="token punctuation">(</span><span class="token punctuation">)</span>         func<span class="token punctuation">(</span><span class="token punctuation">)</span>         end <span class="token operator">=</span>time<span class="token punctuation">.</span>clock<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"time used:"</span><span class="token punctuation">,</span> end <span class="token operator">-</span> start<span class="token punctuation">)</span>     <span class="token keyword">return</span> test@timeit<span class="token keyword">def</span> <span class="token function">sum1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     sum <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">+</span> <span class="token number">2</span>     <span class="token keyword">print</span> <span class="token punctuation">(</span>sum<span class="token punctuation">)</span> sum1<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a><p>第一步</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">sum1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sum <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">+</span> <span class="token number">2</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">timeit</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>clock<span class="token punctuation">(</span><span class="token punctuation">)</span>    func<span class="token punctuation">(</span><span class="token punctuation">)</span>    end <span class="token operator">=</span>time<span class="token punctuation">.</span>clock<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"time used:"</span><span class="token punctuation">,</span> end <span class="token operator">-</span> start<span class="token punctuation">)</span>timeit<span class="token punctuation">(</span>sum1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">sum1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sum <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">+</span> <span class="token number">2</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">timeit</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        start <span class="token operator">=</span> time<span class="token punctuation">.</span>clock<span class="token punctuation">(</span><span class="token punctuation">)</span>        func<span class="token punctuation">(</span><span class="token punctuation">)</span>        end <span class="token operator">=</span>time<span class="token punctuation">.</span>clock<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"time used:"</span><span class="token punctuation">,</span> end <span class="token operator">-</span> start<span class="token punctuation">)</span>    <span class="token keyword">return</span> testsum1 <span class="token operator">=</span> timeit<span class="token punctuation">(</span>sum1<span class="token punctuation">)</span>sum1<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="yield-理解"><a href="#yield-理解" class="headerlink" title="yield 理解"></a>yield 理解</h3><p>yield是用于生成器。可以通俗的认为，在一个函数中，使用了yield来代替return的位置的函数，就是生成器。</p><p>它不同于函数的使用方法是：函数使用return来进行返回值，每调用一次，返回一个新加工好的数据返回给你；yield不同，它会在调用生成器的时候，把数据生成object，然后当你需要用的时候，要用next()方法来取，同时不可逆。</p><p>可以通俗的叫它”轮转容器”，可用现实的一种实物来理解：水车，先yield来装入数据、产出generator object、使用next()来释放；好比水车转动后，车轮上的水槽装入水，随着轮子转动，被转到下面的水槽就能将水送入水道中流入田里。</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中向上、向下转型和 .this .new</title>
      <link href="/2019/06/30/Java%E4%B8%AD%E5%90%91%E4%B8%8A%E8%BD%AC%E5%9E%8B%E5%92%8C%E5%90%91%E4%B8%8B%E8%BD%AC%E5%9E%8B/"/>
      <url>/2019/06/30/Java%E4%B8%AD%E5%90%91%E4%B8%8A%E8%BD%AC%E5%9E%8B%E5%92%8C%E5%90%91%E4%B8%8B%E8%BD%AC%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h1><a id="more"></a><p>子类对象转为父类，父类可以是接口。公式：Father f = new Son()；Father是父类或接口，son是子类</p><pre class="line-numbers language-Java"><code class="language-Java">public class Human {    public void sleep() {        System.out.println("Human sleep..");    }    public static void main(String[] args) {        Human h = new Male();// 向上转型        h.sleep();        Male m = new Male();        m.sleep();        // h.speak();此方法不能编译，报错说Human类没有此方法    }}class Male extends Human {    @Override    public void sleep() {        System.out.println("Male sleep..");    }    public void speak() {        System.out.println("I am Male");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>向上转型不要强制转型。向上转型后父类的引用所指向的属性是父类的属性，如果子类重写了父类的方法，那么父类引用指向的或者调用的方法是子类的方法，这个叫动态绑定。向上转型后父类引用不能调用子类自己特有的方法。</p><p>不向下转型使用子类方法，需要的属性写getter方法。</p><pre class="line-numbers language-Java"><code class="language-Java">public class Human {     String name = "Human";     public String getName(){         return this.name;     }    public void sleep() {        System.out.println("Human sleep..");    }    public static void main(String[] args) {        Human h = new Male();// 向上转型        System.out.println(h.getName());    }}class Male extends Human {    String name = "Male";    @Override    public String getName(){        return this.name;    }    @Override    public void sleep() {        System.out.println("Male sleep..");    }    public void speak() {        System.out.println("I am Male");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h1><p>父类对象转为子类。公式：Son s = (Son)f；是强制转型</p><p>向下转型需要考虑安全性，如果父类引用的对象是父类本身，那么在向下转型的过程中是不安全的，编译不会出错，但是运行时会出现<code>java.lang.ClassCastException</code>错误。它可以使用<code>instanceof</code>来避免出错此类错误即能否向下转型，只有先经过向上转型的对象才能继续向下转型。</p><pre class="line-numbers language-Java"><code class="language-Java">package multistate;public class Human {    public void sleep() {        System.out.println("Human sleep..");    }    public static void main(String[] args) {        Human h = new Male();// 向上转型        Human h1 = new Human();        //h.speak();此时需要向下转型，否则不能调用speak方法。         Male m = (Male) h;         m.speak();         /**Male m1 = (Male)h1;         m1.speak();    此时会出现运行时错误，所以可以用instanceOF判断*/         if (h1 instanceof Male){             Male m1 = (Male)h1;             m1.speak();         }    }}class Male extends Human {    @Override    public void sleep() {        System.out.println("Male sleep..");    }    public void speak() {        System.out.println("I am Male");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="this"><a href="#this" class="headerlink" title=".this"></a>.this</h1><p>.this  表达的是在内部类对象域内  通过外部类 .this 指向了一个在内部类指向外围类对象引用的关系。只有这样可以访问外围类对象的属性与方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> innerclasses<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoThis</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DoThis.f()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> DoThis <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> DoThis<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Inner <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        DoThis dt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DoThis<span class="token punctuation">.</span>Inner dti <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dti<span class="token punctuation">.</span><span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="new"><a href="#new" class="headerlink" title=".new"></a>.new</h1><p>new表达的是与.this方向相反  当在外围类作用域上 想创建内部类对象  之前通用的做法是 在外围类创建一个指向内部类的引用来创建内部类，但有一种更加快捷的方式</p><p>直接外围类 .new  就可以表达一个外围类对象引用 。这里必须强调一点，在拥有外部类对象之前是不可能创建外围类对象的，因为内部类对象会暗暗的连接到创建他的外围类对象上</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> innerclasses<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoNew</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">{</span>         <span class="token function">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DoNew.Inner"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        DoNew dn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DoNew<span class="token punctuation">.</span>Inner dni <span class="token operator">=</span> dn<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决brew更新问题</title>
      <link href="/2019/06/29/%E8%A7%A3%E5%86%B3brew%E6%9B%B4%E6%96%B0%E9%97%AE%E9%A2%98/"/>
      <url>/2019/06/29/%E8%A7%A3%E5%86%B3brew%E6%9B%B4%E6%96%B0%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="1-替换-还原-brew-git-仓库地址"><a href="#1-替换-还原-brew-git-仓库地址" class="headerlink" title="1. 替换 / 还原 brew.git 仓库地址"></a>1. 替换 / 还原 brew.git 仓库地址</h3><pre class="line-numbers language-shell"><code class="language-shell"># 替换成阿里巴巴的 brew.git 仓库地址:cd "$(brew --repo)"git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git#=======================================================# 还原为官方提供的 brew.git 仓库地址cd "$(brew --repo)"git remote set-url origin https://github.com/Homebrew/brew.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a><h3 id="2-替换-还原-homebrew-core-git-仓库地址"><a href="#2-替换-还原-homebrew-core-git-仓库地址" class="headerlink" title="2. 替换 / 还原 homebrew-core.git 仓库地址"></a>2. 替换 / 还原 homebrew-core.git 仓库地址</h3><pre class="line-numbers language-shell"><code class="language-shell"># 替换成阿里巴巴的 homebrew-core.git 仓库地址:cd "$(brew --repo)/Library/Taps/homebrew/homebrew-core"git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git#=======================================================# 还原为官方提供的 homebrew-core.git 仓库地址cd "$(brew --repo)/Library/Taps/homebrew/homebrew-core"git remote set-url origin https://github.com/Homebrew/homebrew-core.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-替换-还原-homebrew-bottles-访问地址"><a href="#3-替换-还原-homebrew-bottles-访问地址" class="headerlink" title="3. 替换 / 还原 homebrew-bottles 访问地址"></a>3. 替换 / 还原 homebrew-bottles 访问地址</h3><p>这个步骤跟你的 macOS 系统使用的 shell 版本有关系</p><p>所以，先来查看当前使用的 shell 版本</p><pre class="line-numbers language-shell"><code class="language-shell">echo $SHELL# 如果你的输出结果是 /bin/zsh，参考 zsh 终端操作方式# 如果你的输出结果是 /bin/bash，参考 bash 终端操作方式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-zsh-终端操作方式"><a href="#3-1-zsh-终端操作方式" class="headerlink" title="3.1 zsh 终端操作方式"></a>3.1 zsh 终端操作方式</h4><pre class="line-numbers language-shell"><code class="language-shell"># 替换成阿里巴巴的 homebrew-bottles 访问地址:echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles' >> ~/.zshrcsource ~/.zshrc#=======================================================# 还原为官方提供的 homebrew-bottles 访问地址vi ~/.zshrc# 然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置source ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-bash-终端操作方式"><a href="#3-2-bash-终端操作方式" class="headerlink" title="3.2 bash 终端操作方式"></a>3.2 bash 终端操作方式</h4><pre class="line-numbers language-shell"><code class="language-shell"># 替换 homebrew-bottles 访问 URL:echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles' >> ~/.bash_profilesource ~/.bash_profile#=======================================================# 还原为官方提供的 homebrew-bottles 访问地址vi ~/.bash_profile# 然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置source ~/.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统 虚拟化 01</title>
      <link href="/2019/06/28/OSTEP01/"/>
      <url>/2019/06/28/OSTEP01/</url>
      
        <content type="html"><![CDATA[<h1 id="虚拟化"><a href="#虚拟化" class="headerlink" title="虚拟化"></a>虚拟化</h1><h4 id="物理资源"><a href="#物理资源" class="headerlink" title="物理资源"></a>物理资源</h4><a id="more"></a><p>多程序共享</p><ul><li><p>进程 - 程序</p><p>进程的组成</p><ul><li>寄存器  <strong>虚拟化CPU重点</strong><ul><li>PC</li><li>SP（栈指针）</li><li>GP (general purpose）</li></ul></li><li>地址空间（堆栈）</li></ul></li></ul><p>如果操作系统到程序 A 的执行是单线程的</p><ul><li>如果 A 想执行其他东西</li><li>OS 想从 A 切换到 B </li><li>A 处理的很慢该怎么办</li></ul><p>system calls 可以控制跳转，其中需要在寄存器保留空间保障可以正确跳转回来</p><p>Boot time(OS):</p><p>​    kernel mode</p><p>​    设置 trap handlers（确保特殊指令告诉硬件 trap handlers 在 OS 存储位置）</p><p>​    保存/恢复：寄存器中的 <strong>state</strong></p><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSTEP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb05</title>
      <link href="/2019/06/27/JavaWeb05/"/>
      <url>/2019/06/27/JavaWeb05/</url>
      
        <content type="html"><![CDATA[<h1 id="XML介绍"><a href="#XML介绍" class="headerlink" title="XML介绍"></a>XML介绍</h1><a id="more"></a><h3 id="1、表单提交方式"><a href="#1、表单提交方式" class="headerlink" title="1、表单提交方式"></a>1、表单提交方式</h3><ul><li><p>使用submit提交</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>  .....  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用button提交表单</p><ul><li>代码<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//实现提交方法</span><span class="token keyword">function</span> <span class="token function">form1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//获取form</span>  <span class="token keyword">var</span> form1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"form1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//设置action</span>  form1<span class="token punctuation">.</span>action <span class="token operator">=</span> <span class="token string">"hello.html"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//提交form表单</span>  form1<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>使用超链接提交</p><ul><li>代码<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello.html?username<span class="token punctuation">=</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>使用超链接提<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> //注意问号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><ol><li>onclick：鼠标点击事件</li><li>onchange：改变内容（一般和select一起使用）</li><li>onfocus:得到焦点  (ie5、某些版本的ie6不能用)</li><li>onblur:失去焦点</li></ol><h3 id="2、xml的简介（了解）"><a href="#2、xml的简介（了解）" class="headerlink" title="2、xml的简介（了解）"></a>2、xml的简介（了解）</h3><pre><code>* eXtensible Markup Language：可扩展标记型语言    ** 标记型语言：html是标记型语言        - 也是使用标签来操作    ** 可扩展：（自己写标签）        - html里面的标签是固定，每个标签都有特定的含义 &lt;h1&gt; &lt;br/&gt; &lt;hr/&gt;        - 标签可以自己定义,可以写中文的标签 &lt;person&gt;&lt;/person、&lt;猫&gt;&lt;/猫&gt;* xml用途    ** html是用于显示数据，xml也可以显示数据（不是主要功能）    ** xml主要功能，为了存储数据* xml是w3c组织发布的技术* xml有两个版本 1.0  1.1    - 使用都是1.0版本，（1.1版本不能向下兼容）</code></pre><h3 id="3、xml的应用"><a href="#3、xml的应用" class="headerlink" title="3、xml的应用"></a>3、xml的应用</h3><ul><li><p>不同的系统之间传输数据</p><ul><li>qq之间数据的传输</li><li>画图分析过程</li></ul></li><li><p>用来表示生活中有关系的数据        </p></li><li><p>经常用在文件配置</p><ul><li>比如现在连接数据库 肯定知道数据库的用户名和密码，数据名称 </li><li>如果修改数据库的信息，不需要修改源代码，只要修改配置文件就可以了</li></ul></li></ul><h3 id="4、xml的语法"><a href="#4、xml的语法" class="headerlink" title="4、xml的语法"></a>4、xml的语法</h3><ol><li>xml的文档声明（***）</li></ol><ul><li><p>创建一个文件 后缀名是 .xml</p></li><li><p>如果写xml，第一步 必须要有 一个文档声明（写了文档声明之后，表示写xml文件的内容）<br>  <code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;gbk&quot;?&gt;</code></p><ul><li>文档声明必须写在 第一行第一列</li></ul></li><li><p>属性</p><ul><li>version：xml的版本 1.0(使用) 1.1</li><li>encoding：xml编码 gbk  utf-8  iso8859-1(不包含中文)</li><li>standalone：是否需要依赖其他文件 yes/no</li></ul></li><li><p>xml的中文乱码问题解决</p><ul><li>画图分析乱码问题</li><li>保存时候的编码和设置打开时候的编码一致，不会出现乱码</li></ul></li></ul><ol start="2"><li>定义元素（标签）（***）</li><li>定义属性（***）</li><li>注释（***）</li><li>特殊字符（***）</li><li>CDATA区（了解）</li><li>PI指令（了解）</li></ol><h3 id="5、xml的元素（标签）定义（-）"><a href="#5、xml的元素（标签）定义（-）" class="headerlink" title="5、xml的元素（标签）定义（*****）"></a>5、xml的元素（标签）定义（*****）</h3><ul><li><p>标签定义</p></li><li><p>标签定义有开始必须要有结束：<person></person></p></li><li><p>标签没有内容，可以在标签内结束 ; <aa/></p></li><li><p>标签可以嵌套，必须要合理嵌套</p><ul><li>合理嵌套 <aa><bb></bb></aa></li><li>不合理嵌套 <aa><bb></aa></bb>: 这种方式是不正确的</li></ul></li><li><p>一个xml中，只能有一个根标签，其他标签都是这个标签下面的标签</p></li><li><p>在xml中把空格和换行都当成内容来解析</p><pre class="line-numbers language-html"><code class="language-html">//下面这两段代码含义是不一样的      * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aa</span><span class="token punctuation">></span></span>1111111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aa</span><span class="token punctuation">></span></span>      * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aa</span><span class="token punctuation">></span></span>          11111111111        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aa</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>xml标签可以是中文</p></li><li><p>xml中标签的名称规则</p><ol><li>xml代码区分大小写<br> &lt;p&gt;&lt;P&gt;:这两个标签是不一样的</li><li>xml的标签不能以数字和下划线(_)开头<pre><code> \&lt;2a&gt;\&lt;_aa&gt;: 这样是不正确的</code></pre></li><li>xml的标签不能以xml、XML、Xml等开头<pre><code> \&lt;xmla&gt; \&lt;XmlB&gt; \&lt;XMLC&gt;: 这些都是不正确的</code></pre></li><li>xml的标签不能包含空格和冒号<pre><code> \&lt;a b&gt; \&lt;b:c&gt; : 这些是不正确的</code></pre></li></ol></li></ul><h3 id="6、xml中属性的定义（-）"><a href="#6、xml中属性的定义（-）" class="headerlink" title="6、xml中属性的定义（*****）"></a>6、xml中属性的定义（*****）</h3><ul><li><p>html是标记型文档，可以有属性</p></li><li><p>xml也是标记型文档，可以有属性<br><code>&lt;person id1=&quot;aaa&quot; id2=&quot;bbb&quot;&gt;&lt;/person&gt;</code></p></li><li><p>属性定义的要求</p><ol><li>一个标签上可以有多个属性<br> <code>&lt;person id1=&quot;aaa&quot; id2=&quot;bbb&quot;&gt;&lt;/person&gt;</code></li><li>属性名称不能相同<br>  <code>&lt;person id1=&quot;aaa&quot; id1=&quot;bbb&quot;&gt;&lt;/person&gt;：这个是不正确，不能有两个id1</code></li><li>属性名称和属性值之间使用= ，属性值使用引号包起来 （可以是单引号，也可以是双引号 ）</li><li>xml属性的名称规范和元素的名称规范一致</li></ol></li></ul><h3 id="7、xml中的注释（-）"><a href="#7、xml中的注释（-）" class="headerlink" title="7、xml中的注释（*****）"></a>7、xml中的注释（*****）</h3><ul><li><p>写法 </p><p>&lt;!– xml的注释 –&gt;</p><ul><li>注意的地方</li></ul></li></ul><ul><li>注释不能嵌套<pre><code>      `&lt;!--  &lt;!-- --&gt;  —&gt;`</code></pre>  <code>&lt;!-- &lt;!-- &lt;sex&gt;nv&lt;/sex&gt;--&gt; —&gt;</code><ul><li>注释也不能放到第一行，第一行第一列必须放文档声明</li></ul></li></ul><h3 id="8、xml中的特殊字符（-）"><a href="#8、xml中的特殊字符（-）" class="headerlink" title="8、xml中的特殊字符（*****）"></a>8、xml中的特殊字符（*****）</h3><ul><li>如果想要在xml中现在 a&lt;b ,不能正常显示，因为把&lt;当做标签</li><li>如果就想要显示，需要对特殊字符 &lt; 进行转义<br><code>&lt;    &amp;lt;</code><br><code>&gt;    &amp;gt;</code></li></ul><h3 id="9、CDATA区（了解）"><a href="#9、CDATA区（了解）" class="headerlink" title="9、CDATA区（了解）"></a>9、CDATA区（了解）</h3><ul><li><p>可以解决多个字符都需要转义的操作<br>  <code>if(a&lt;b &amp;&amp; b&lt;c &amp;&amp; d&gt;f) {}</code><br>  <em>把这些内容放到CDATA区里面，不需要转义了</em><br>  ** 写法</p><pre><code>  `&lt;![CDATA[ 内容  ]]&gt;`  - 代码  `&lt;![CDATA[ &lt;b&gt;if(a&lt;b &amp;&amp; b&lt;c &amp;&amp; d&gt;f) {}&lt;/b&gt; ]]&gt;`</code></pre><p>  ** 把特殊字符，当做文本内容，而不是标签</p></li></ul><h3 id="10、PI指令（处理指令）（了解）"><a href="#10、PI指令（处理指令）（了解）" class="headerlink" title="10、PI指令（处理指令）（了解）"></a>10、PI指令（处理指令）（了解）</h3><ul><li><p>可以在xml中设置样式</p></li><li><p>写法： <code>&lt;?xml-stylesheet type=&quot;text/css&quot; href=&quot;css的路径&quot;?&gt;</code></p></li><li><p>设置样式，只能对英文标签名称起作用，对于中文的标签名称不起作用的。</p><p>  xml的语法的总结</p><pre><code>  所有 XML 元素都须有关闭标签  XML 标签对大小写敏感  XML 必须正确地嵌套顺序  XML 文档必须有根元素(只有一个)  XML 的属性值须加引号  特殊字符必须转义 --- CDATA  XML 中的空格、回车换行会解析时被保留</code></pre></li></ul><h3 id="11、xml的约束"><a href="#11、xml的约束" class="headerlink" title="11、xml的约束"></a>11、xml的约束</h3><ul><li><p>为什么需要约束？<br>比如现在定义一个person的xml文件，只想要这个文件里面保存人的信息，比如name age等，但是如果在xml文件中写了一个标签<code>&lt;猫&gt;</code>，发现可以正常显示，因为符合语法规范。但是猫肯定不是人的信息，xml的标签是自定义的，需要技术来规定xml中只能出现的元素，这个时候需要约束。</p></li><li><p>xml的约束的技术 ： <strong>dtd约束</strong> 和 <strong>schema约束</strong> （看懂）</p></li></ul><h3 id="12、dtd的快速入门"><a href="#12、dtd的快速入门" class="headerlink" title="12、dtd的快速入门"></a>12、dtd的快速入门</h3><ul><li><p>创建一个文件 后缀名 .dtd</p><p>  步骤：</p><pre><code>  （1）看xml中有多少个元素 ，有几个元素，在dtd文件中写几个 `&lt;!ELEMENT&gt;`  （2）判断元素是简单元素还是复杂元素      - 复杂元素：有子元素的元素          `&lt;!ELEMENT 元素名称 (子元素)&gt;`      - 简单元素：没有子元素          `&lt;!ELEMENT 元素名称 (#PCDATA)&gt;`  （3）需要在xml文件中引入dtd文件      `&lt;!DOCTYPE 根元素名称 SYSTEM &quot;dtd文件的路径&quot;&gt;`</code></pre><p>  ** 打开xml文件使用浏览器打开的，浏览器只负责校验xml的语法，不负责校验约束</p><p>  ** 如果想要校验xml的约束，需要使用工具（myeclipse工具）</p><p>  ** 打开myeclipse开发工具</p><pre><code>  *** 创建一个项目 day05  *** 在day05的src目录下面创建一个xml文件和一个dtd文件  *** 当xml中引入dtd文件之后，比如只能出现name age，多写了一个a，会提示出错</code></pre></li></ul><h3 id="13、dtd的三种引入方式"><a href="#13、dtd的三种引入方式" class="headerlink" title="13、dtd的三种引入方式"></a>13、dtd的三种引入方式</h3><p>（1）引入外部的dtd文件<br>        <code>&lt;!DOCTYPE 根元素名称 SYSTEM &quot;dtd路径&quot;&gt;</code><br>（2）使用内部的dtd文件</p><pre class="line-numbers language-html"><code class="language-html">    <span class="token doctype">&lt;!DOCTYPE 根元素名称 [        &lt;!ELEMENT person (name,age)></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">name</span> <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">age</span> <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span>    ]><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）使用外部的dtd文件（网络上的dtd文件）</p><pre class="line-numbers language-html"><code class="language-html">        <span class="token doctype">&lt;!DOCTYPE 根元素 PUBLIC "DTD名称" "DTD文档的URL"></span>        - 后面学到框架 struts2 使用配置文件 使用 外部的dtd文件        - <span class="token doctype">&lt;!DOCTYPE struts PUBLIC   "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"               "http://struts.apache.org/dtds/struts-2.0.dtd"></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14、使用dtd定义元素"><a href="#14、使用dtd定义元素" class="headerlink" title="14、使用dtd定义元素"></a>14、使用dtd定义元素</h3><ul><li><p>语法： <code>&lt;!ELEMENT 元素名 约束&gt;</code></p></li><li><p>简单元素：没有子元素的元素</p><pre><code>  `&lt;!ELEMENT name (#PCDATA)&gt;`  *** (#PCDATA): 约束name是字符串类型  *** EMPTY : 元素为空（没有内容）      - `&lt;sex&gt;&lt;/sex&gt;`  *** ANY:任意</code></pre><ul><li><p>复杂元素：<br>  <code>&lt;!ELEMENT person (name,age,sex,school)&gt;</code></p><pre><code>  - 子元素只能出现一次</code></pre><ul><li><p><code>&lt;!ELEMENT 元素名称 (子元素)&gt;</code></p></li><li><p>表示子元素出现的次数<br>  + : 表示一次或者多次<br>  ? ：表示零次或者一次<br>  * ：表示零次或者多次</p></li></ul></li><li><p>子元素直接使用逗号进行隔开 </p><pre><code>  ** 表示元素出现的顺序</code></pre><ul><li>子元素直接使用 <code>|</code>隔开<br>  ** 表示元素只能出现其中的任意一个</li></ul></li></ul></li></ul><h3 id="15、使用dtd定义属性"><a href="#15、使用dtd定义属性" class="headerlink" title="15、使用dtd定义属性"></a>15、使用dtd定义属性</h3><ul><li><p>语法： &lt;!ATTLIST 元素名称</p><pre><code>      属性名称 属性类型 属性的约束          \&gt;</code></pre></li><li><p>属性类型</p><pre><code>  - CDATA: 字符串      -     \&lt;!ATTLIST birthday          ID1 CDATA #REQUIRED          \&gt;  - 枚举 ： 表示只能在一定的范围内出现值，但是只能每次出现其中的一个      ** 红绿灯效果      ** (aa|bb|cc)      - &lt;!ATTLIST age          ID2 (AA|BB|CC)  #REQUIRED</code></pre></li></ul><pre><code>        \&gt;    - ID: 值只能是字母或者下划线开头        - &lt;!ATTLIST name             ID3 ID   #REQUIRED            \&gt;</code></pre><ul><li><p>属性的约束</p><ul><li><p>#REQUIRED：属性必须存在</p></li><li><p>#IMPLIED：属性可有可无</p></li><li><p>#FIXED: 表示一个固定值 #FIXED “AAA”</p><pre><code>  - 属性的值必须是设置的这个固定值  - &lt;!ATTLIST sex      ID4 CDATA #FIXED &quot;ABC&quot;  &gt;</code></pre></li><li><p>直接值</p><pre><code>  * 不写属性，使用直接值  * 写了属性，使用设置那个值 (作为默认值)  - \&lt;!ATTLIST school      ID5 CDATA &quot;WWW&quot;      \&gt;</code></pre></li></ul></li></ul><h3 id="16、实体的定义"><a href="#16、实体的定义" class="headerlink" title="16、实体的定义"></a>16、实体的定义</h3><ul><li><p>语法： <code>&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;</code><br><code>&lt;!ENTITY TEST &quot;HAHAHEHE&quot;&gt;</code><br>  *** 使用实体  <code>&amp;实体名称</code>;  比如 <code>&amp;TEST</code>;</p><p>  ** 注意</p><pre><code>  * 定义实体需要写在内部dtd里面，    如果写在外部的dtd里面，有某些浏览器下，内容得不到</code></pre></li></ul><h3 id="17、xml的解析的简介（写到java代码）（今天最重要的内容）"><a href="#17、xml的解析的简介（写到java代码）（今天最重要的内容）" class="headerlink" title="17、xml的解析的简介（写到java代码）（今天最重要的内容）"></a>17、xml的解析的简介（写到java代码）（<strong>今天最重要的内容</strong>）</h3><ul><li><p>xml是标记型文档</p></li><li><p>js使用dom解析标记型文档？</p><pre><code>  - 根据html的层级结构，在内存中分配一个树形结构，把html的标签，属性和文本都封装成对象  - document对象、element对象、属性对象、文本对象、Node节点对象</code></pre></li><li><p>xml的解析方式（技术）：dom 和 sax</p><pre><code>  ** 画图分析使用dom和sax解析xml过程  *** dom解析和sax解析区别：  ** dom方式解析      * 根据xml的层级结构在内存中分配一个树形结构，把xml的标签，属性和文本都封装成对象      * 缺点：如果文件过大，造成内存溢出      * 优点：很方便实现增删改操作  ** sax方式解析      * 采用事件驱动，边读边解析          - 从上到下，一行一行的解析，解析到某一个对象，返回对象名称      * 缺点：不能实现增删改操作      * 优点：如果文件过大，不会造成内存溢出，方便实现查询操作</code></pre></li><li><p>想要解析xml，首先需要解析器</p><ul><li>不同的公司和组织提供了 针对dom和sax方式的解析器，通过api方式提供</li><li>sun公司提供了针对dom和sax解析器  jaxp</li><li>dom4j组织，针对dom和sax解析器    dom4j（<strong>实际开发中使用</strong>）</li><li>jdom组织，针对dom和sax解析器     jdom</li></ul></li></ul><h3 id="18、jaxp的api的查看"><a href="#18、jaxp的api的查看" class="headerlink" title="18、jaxp的api的查看"></a>18、jaxp的api的查看</h3><p><strong>jaxp是javase的一部分</strong></p><ul><li><p>jaxp解析器在jdk的javax.xml.parsers包里面</p><pre><code>** 四个类：分别是针对dom和sax解析使用的类  *** dom：       DocumentBuilder  : 解析器类        - 这个类是一个抽象类，不能new，          此类的实例可以从 DocumentBuilderFactory.newDocumentBuilder() 方法获取</code></pre></li></ul><pre><code>        - 一个方法，可以解析xml  parse(&quot;xml路径&quot;) 返回是 Document 整个文档        - 返回的document是一个接口，父节点是Node，如果在document里面找不到想要的方法，到Node里面去找        - 在document里面方法             getElementsByTagName(String tagname)             -- 这个方法可以得到标签            -- 返回集合 NodeList            createElement(String tagName)            -- 创建标签            createTextNode(String data)             -- 创建文本            appendChild(Node newChild)             -- 把文本添加到标签下面            removeChild(Node oldChild)             -- 删除节点            getParentNode()             -- 获取父节点            NodeList list            - getLength() 得到集合的长度            - item(int index)下标取到具体的值            for(int i=0;i&lt;list.getLength();i++) {                list.item(i)            }            getTextContent()            - 得到标签里面的内容    DocumentBuilderFactory： 解析器工厂        - 这个类也是一个抽象类，不能new        newInstance() 获取 DocumentBuilderFactory 的实例。*** sax：    SAXParser：解析器类    SAXParserFactory: 解析器工厂</code></pre><h3 id="19、使用jaxp实现查询操作"><a href="#19、使用jaxp实现查询操作" class="headerlink" title="19、使用jaxp实现查询操作"></a>19、使用jaxp实现查询操作</h3><p><strong>查询xml中所有的name元素的值</strong></p><pre><code>* 步骤</code></pre><pre class="line-numbers language-js"><code class="language-js">    <span class="token comment" spellcheck="true">//查询所有name元素的值 java代码 ，用w3c的包</span>    <span class="token comment" spellcheck="true">/*     * 1、创建解析器工厂         DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();     * 2、根据解析器工厂创建解析器         DocumentBuilder builder = builderFactory.newDocumentBuilder();     * 3、解析xml返回document     *    Document document = builder.parse("src/person.xml");     * 4、得到所有的name元素         使用         NodeList nl = document.getElementsByTagName("name");     * 5、返回集合，遍历集合，得到每一个name元素 for循环nl        - 遍历 nl.getLength()          Node name1 = nl.item(i) //得到每一个name元素        - 得到元素里面值 使用          String s = name1.getTextContent() //得到元素值     * */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>查询xml中第一个name元素的值</strong></p><ul><li>步骤<br>   /*<pre><code>   * 1、创建解析器工厂   * 2、根据解析器工厂创建解析器   * 3、解析xml，返回document   *    * 4、得到所有name元素   * 5、使用返回集合，里面方法 item，下标获取具体的元素      NodeList.item(下标)： 集合下标从0开始   * 6、得到具体的值，使用 getTextContent方法   *    * */</code></pre></li></ul><h3 id="20、使用jaxp添加节点"><a href="#20、使用jaxp添加节点" class="headerlink" title="20、使用jaxp添加节点"></a>20、使用jaxp添加节点</h3><p><em>** 在第一个p1下面（末尾）添加 <sex>nv</sex><br>    **步骤<br>    /</em><br>         * 1、创建解析器工厂<br>         * 2、根据解析器工厂创建解析器<br>         * 3、解析xml，返回document<br>         *<br>         * 4、得到第一个p1<br>         *     - 得到所有p1，使用item方法下标得到<br>         * 5、创建sex标签 createElement<br>         * 6、创建文本 createTextNode<br>         * 7、把文本添加到sex下面 appendChild<br>         * 8、把sex添加到第一个p1下面　appendChild<br>         *<br>         * 9、回写xml<br>         * */</p><p>code 创建对象等等跟上边一样</p><pre class="line-numbers language-js"><code class="language-js">         Node p1 <span class="token operator">=</span> nl<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Element gend <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"gender"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Text text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">"male"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建文本</span>         gend<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把文本添加到gend下边</span>         p1<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>gend<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//gend节点添加到p1下边</span>        <span class="token comment" spellcheck="true">//从内存写回文件</span>         TransformerFactory transformerFactory <span class="token operator">=</span> TransformerFactory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Transformer transformer <span class="token operator">=</span> transformerFactory<span class="token punctuation">.</span><span class="token function">newTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         transformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DOMSource</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StreamResult</span><span class="token punctuation">(</span><span class="token string">"src/person.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="21、使用jaxp修改节点"><a href="#21、使用jaxp修改节点" class="headerlink" title="21、使用jaxp修改节点"></a>21、使用jaxp修改节点</h3><p><strong>* 修改第一个p1下面的sex内容是nan<br>    <em>* 步骤<br>    /</em><br>         * 1、创建解析器工厂<br>         * 2、根据解析器工厂创建解析器<br>         * 3、解析xml，返回document<br>         *<br>         * 4、得到sex item方法<br>         * 5、修改sex里面的值<br>            *</strong> setTextContent方法<br>         * p1.setTextContent(“female”);<br>         * 6、回写xml<br>         * */</p><h3 id="22、使用jaxp删除节点"><a href="#22、使用jaxp删除节点" class="headerlink" title="22、使用jaxp删除节点"></a>22、使用jaxp删除节点</h3><p><em>** 删除&lt;sex&gt;nan&lt;/sex&gt;节点<br>    ** 步骤<br>    /</em><br>         * 1、创建解析器工厂<br>         * 2、根据解析器工厂创建解析器<br>         * 3、解析xml，返回document<br>         *<br>         * 4、获取sex元素<br>         * 5、获取sex的父节点  使用getParentNode方法<br>         Node a = p1.getParentNode();<br>         * 6、删除使用父节点删除  removeChild方法<br>         * a.removeChild(p1);<br>         * 7、回写xml<br>         * */</p><h3 id="23、使用jaxp遍历节点"><a href="#23、使用jaxp遍历节点" class="headerlink" title="23、使用jaxp遍历节点"></a>23、使用jaxp遍历节点</h3><p><em>* 把xml中的所有元素名称打印出来<br>    ** 步骤<br>    /</em><br>         * 1、创建解析器工厂<br>         * 2、根据解析器工厂创建解析器<br>         * 3、解析xml，返回document<br>         *<br>         * ====使用递归实现=====<br>         * 4、得到根节点<br>         * 5、得到根节点子节点<br>         * 6、得到根节点子节点的子节点<br>         * <em>/<br>    *</em> 遍历的方法<br>    //递归遍历的方法</p><pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">list1</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判断是元素类型时候才打印</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getNodeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Node<span class="token punctuation">.</span>ELEMENT_NODE<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//判断类型        </span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getNodeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//得到一层子节点</span>        NodeList list <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getChildNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历list</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>int i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//得到每一个节点 如果列表为空，就自动不执行下边的递归调用了</span>            Node node1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//继续得到node1的子节点</span>            <span class="token comment" spellcheck="true">//node1.getChildNodes()</span>            <span class="token function">list1</span><span class="token punctuation">(</span>node1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 0.1</title>
      <link href="/2019/06/21/Golang%200.1/"/>
      <url>/2019/06/21/Golang%200.1/</url>
      
        <content type="html"><![CDATA[<h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><p>唯一解，如大括号方式必须左括号在右上，右括号在左下。<br>在 go 中，每个文件都必须归属于一个包。</p><a id="more"></a><ol><li><p>go 文件的后缀是 .go</p></li><li><p>package main 表示该 hello.go 文件所在的包是 main, 在 go 中，每个文件都必须归属于一个包。</p></li><li><p>import “fmt” 表示：引入一个包，包名 fmt, 引入该包后，就可以使用 fmt 包的函数，比如：fmt.Println</p></li><li><p>func 是一个关键字，表示一个函数。 main 是函数名，是一个主函数，即程序入口</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>fmt.Println(“hello”) 表示调用 fmt 包的函数 Println 输出 “hello,world”</p></li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><p>Go 源文件以 “go” 为扩展名。</p></li><li><p>Go 应用程序的执行入口是 main()函数。</p></li><li><p>Go 语言严格区分大小写。</p></li><li><p>Go 方法由一条条语句构成，每个语句后不需要分号(Go 语言会在每行后自动加分号)，这也体现出 Golang 的简洁性。 </p></li><li><p>Go 编译器是一行行进行编译的，因此一行就写一条语句，不能把多条语句写在同一个，否则报错。</p></li><li><p>go 语言定义的变量或者 import 的包如果没有使用到，代码不能编译通过。</p></li><li><p>可以使用 gofmt 来进行代码格式化</p><blockquote><p>gofmt main.go</p></blockquote></li></ul><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><ol><li><p>指定</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> i <span class="token builtin">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">var</span> j <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">1.2</span><span class="token keyword">var</span> j <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">1.2</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>类型推导</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10.10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>自行推导</p></blockquote></li><li><p>省略var，直接赋值，包含声明定义</p><pre class="line-numbers language-go"><code class="language-go">name <span class="token operator">:=</span> <span class="token string">"ttt"</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>:= 左侧的变量不能是已经声明过的，等价于</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> name <span class="token builtin">string</span>  name <span class="token operator">=</span> <span class="token string">"ttt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>多变量声明</p></li></ol><pre class="line-numbers language-Go"><code class="language-Go">var n1, n2, n3 intfmt.Println("n1=", n1, "n2", n2)var m1 m2 m3 = 100, "tom", 888//依次对应m1 m2 m3 := 100, "tom", 888//类型推导<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>全局变量</li></ol><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span>  n1 <span class="token operator">=</span> <span class="token number">300</span>  n2 <span class="token operator">=</span> <span class="token string">"mm"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//类似包的引入</span><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"unsafe"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="fmt-格式化输出"><a href="#fmt-格式化输出" class="headerlink" title="fmt 格式化输出"></a>fmt 格式化输出</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">//通用</span><span class="token operator">%</span>v    相应值的默认格式。在打印结构体时，“加号”标记（<span class="token operator">%</span><span class="token operator">+</span>v）会添加字段名<span class="token operator">%</span>#v    相应值的Go语法表示<span class="token operator">%</span>T    相应值的类型的Go语法表示<span class="token operator">%</span><span class="token operator">%</span>    字面上的百分号，并非值的占位符<span class="token comment" spellcheck="true">//bool</span><span class="token operator">%</span>t    单词<span class="token boolean">true</span>或<span class="token boolean">false</span><span class="token comment" spellcheck="true">//整数：</span><span class="token number">1</span> <span class="token operator">%</span>b    表示为二进制<span class="token number">2</span> <span class="token operator">%</span>c    该值对应的unicode码值<span class="token number">3</span> <span class="token operator">%</span>d    表示为十进制<span class="token number">4</span> <span class="token operator">%</span>o    表示为八进制<span class="token number">5</span> <span class="token operator">%</span>q    该值对应的单引号括起来的<span class="token keyword">go</span>语法字符字面值，必要时会采用安全的转义表示<span class="token number">6</span> <span class="token operator">%</span>x    表示为十六进制，使用a<span class="token operator">-</span>f<span class="token number">7</span> <span class="token operator">%</span>X    表示为十六进制，使用A<span class="token operator">-</span>F<span class="token number">8</span> <span class="token operator">%</span>U    表示为Unicode格式：U<span class="token operator">+</span><span class="token number">1234</span>，等价于<span class="token string">"U+%04X"</span><span class="token comment" spellcheck="true">//浮点数、复数</span><span class="token number">1</span> <span class="token operator">%</span>b    无小数部分、二进制指数的科学计数法，如<span class="token operator">-</span>123456p<span class="token number">-78</span>；参见strconv<span class="token punctuation">.</span>FormatFloat   <span class="token operator">%</span>e    科学计数法，如<span class="token operator">-</span><span class="token number">1234.456e+78</span>   <span class="token operator">%</span>E    科学计数法，如<span class="token operator">-</span><span class="token number">1234.456E+78</span>   <span class="token operator">%</span>f    有小数部分但无指数部分，如<span class="token number">123.456</span>   <span class="token operator">%</span>F    等价于<span class="token operator">%</span>f <span class="token operator">%</span>g        <span class="token comment" spellcheck="true">//根据实际情况采用%e或%f格式（以获得更简洁、准确的输出）</span>  <span class="token operator">%</span>f<span class="token punctuation">:</span>    默认宽度，默认精度  <span class="token operator">%</span>9f    宽度<span class="token number">9</span>，默认精度  <span class="token operator">%</span><span class="token punctuation">.</span>2f   默认宽度，精度<span class="token number">2</span> <span class="token operator">%</span><span class="token number">9.</span>2f  宽度<span class="token number">9</span>，精度<span class="token number">2</span> <span class="token operator">%</span><span class="token number">9.</span>f   宽度<span class="token number">9</span>，精度<span class="token number">0</span><span class="token number">2</span> <span class="token operator">%</span>g    根据情况选择 <span class="token operator">%</span>e 或 <span class="token operator">%</span>f 以产生更紧凑的（无末尾的<span class="token number">0</span>）输出   <span class="token operator">%</span>G    根据实际情况采用<span class="token operator">%</span>E或<span class="token operator">%</span>F格式（以获得更简洁、准确的输出）<span class="token comment" spellcheck="true">//字符串和 []byte</span><span class="token number">1</span> <span class="token operator">%</span>s    直接输出字符串或者<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>    <span class="token number">2</span> <span class="token operator">%</span>q    该值对应的双引号括起来的<span class="token keyword">go</span>语法字符串字面值，必要时会采用安全的转义表示<span class="token number">3</span> <span class="token operator">%</span>x    十六进制，小写字母，每字节两个字符（使用a<span class="token operator">-</span>f）<span class="token number">4</span> <span class="token operator">%</span>X    十六进制，小写字母，每字节两个字符（使用A<span class="token operator">-</span>F）<span class="token comment" spellcheck="true">//指针</span><span class="token number">1</span> <span class="token operator">%</span>p    表示为十六进制，前缀0x<span class="token comment" spellcheck="true">//其它flag</span><span class="token operator">+</span>    总是输出数值的正负号；对<span class="token operator">%</span>q（<span class="token operator">%</span><span class="token operator">+</span>q）会生成全部是ASCII字符的输出（通过转义）；<span class="token operator">-</span>    在输出右边填充空白而不是默认的左边（即从默认的右对齐切换为左对齐）；#    备用格式：     八进制数前加<span class="token number">0</span>（<span class="token operator">%</span>#o），十六进制数前加0x（<span class="token operator">%</span>#x）或0X（<span class="token operator">%</span>#X），指针去掉前面的0x（<span class="token operator">%</span>#p）；     对<span class="token operator">%</span>q（<span class="token operator">%</span>#q），如果strconv<span class="token punctuation">.</span>CanBackquote返回真会输出反引号括起来的未转义字符串；     对<span class="token operator">%</span>U（<span class="token operator">%</span>#U），如果字符是可打印的，会在输出Unicode格式、空格、单引号括起来的<span class="token keyword">go</span>字面值；<span class="token string">' '</span> （空格）为数值中省略的正负号留出空白（<span class="token operator">%</span> d）；    以十六进制（<span class="token operator">%</span> x<span class="token punctuation">,</span> <span class="token operator">%</span> X）打印字符串或切片时，在字节之间用空格隔开；<span class="token number">0</span>    使用<span class="token number">0</span>而不是空格填充，对于数字，这会将填充移到正负号之后；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>基本数据类型<br>1.1 整数：int int8 int16 int32(rune) int64 uint uint8(byte) uint16 uint32 uint64 byte<br>1.2 浮点数：float32 float64<br>1.3 没有char，用byte保存单个字母字符，汉字不行<br>1.4 bool string(也是基本数据类型)</p><blockquote><p>rune类似int32，但是用Unicode保存，用于汉字</p></blockquote></li><li><p>派生/复杂数据类型<br>指针，数组，结构体(struct)，管道(Channel)，函数，切片，接口，map<br>结构体相当于class</p></li><li><p>注意</p><blockquote><p>Printf(“%T”, n) 查看类型<br>fmt.Printf(“%d”, unsafe.Sizeof(n))<br>unsafe包的一个函数，返回占用字节数</p></blockquote></li></ol><blockquote><p>num := 5.12245e4  -&gt; 51224.5<br>num := 5.12245e-2  -&gt; 0.0512245 </p></blockquote><ol start="4"><li>字符</li></ol><p>​    Go中由于没有字符，因此字符串是由字节拼接的。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> c <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token string">'a'</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// c->97</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// c->a </span><span class="token keyword">var</span> d <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token string">'汉'</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%c %d"</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 汉 27721</span><span class="token comment" spellcheck="true">//byte仅保存255以内，字符常量用单引号</span><span class="token keyword">var</span> d <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">27721</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 汉</span><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">'a'</span>fmt<span class="token punctuation">.</span><span class="token function">Prinln</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 107</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>布尔</li></ol><p>只占用1字节</p><p>布尔类型只能用 ，true false 表示，0、1不行</p><ol start="6"><li>字符串</li></ol><p>一旦赋值，字符串不可变</p><pre class="line-numbers language-go"><code class="language-go">str <span class="token operator">:=</span> <span class="token string">"ni"</span>str <span class="token operator">:=</span> <span class="token string">`\n`</span> <span class="token comment" spellcheck="true">//反引号，直接原始输出</span>str；<span class="token operator">=</span> <span class="token string">"fasfas"</span> <span class="token operator">+</span>             <span class="token string">"fsdad"</span> <span class="token comment" spellcheck="true">//加号必须在上边</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>默认值</li></ol><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> a <span class="token builtin">int</span><span class="token keyword">var</span> b <span class="token builtin">float64</span><span class="token keyword">var</span> c <span class="token builtin">bool</span><span class="token keyword">var</span> nana <span class="token builtin">string</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d %f %v %v"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//%v原值输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li>类型转换</li></ol><p>必须显示转换</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> i <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">var</span> n <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token function">float32</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">var</span> i2 <span class="token builtin">int8</span> <span class="token operator">=</span> <span class="token function">int8</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="9"><li>string和基本数据类型转换</li></ol><p>基本数据类型转为string</p><ul><li>fmt.Pringf(“%参数”, 表达式)</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">99</span><span class="token keyword">var</span> str <span class="token builtin">string</span>str <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Pringf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用strconv包函数</li></ul><pre class="line-numbers language-go"><code class="language-go">str <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatInt</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>string转为基本数据类型</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> str <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"true"</span><span class="token keyword">var</span> b <span class="token builtin">bool</span>b <span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token operator">=</span> strvonv<span class="token punctuation">.</span><span class="token function">ParseBool</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// strvonv.ParseBool返回两个值</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"b type %T b=%v"</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token keyword">var</span> str2 <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token keyword">var</span> n1 <span class="token builtin">int64</span>n1<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//中间是10代表10进制， 64->64位</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"n1 type %T n1=%v"</span><span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n1<span class="token punctuation">)</span><span class="token keyword">var</span> str3 <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"123.456"</span><span class="token keyword">var</span> f1 <span class="token builtin">float64</span>f1<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> srrconv<span class="token punctuation">.</span><span class="token function">ParesFloat</span><span class="token punctuation">(</span>str3<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"f1 type %T f1=%v\n"</span><span class="token punctuation">,</span> f1<span class="token punctuation">,</span> f1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>不能有效转换会转为默认值</em></p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推一些技术演讲</title>
      <link href="/2019/01/18/%E6%8E%A8%E4%B8%80%E4%BA%9B%E6%8A%80%E6%9C%AF%E6%BC%94%E8%AE%B2/"/>
      <url>/2019/01/18/%E6%8E%A8%E4%B8%80%E4%BA%9B%E6%8A%80%E6%9C%AF%E6%BC%94%E8%AE%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="推一些技术演讲"><a href="#推一些技术演讲" class="headerlink" title="推一些技术演讲"></a>推一些技术演讲</h1><h2 id="一、The-future-of-technology-科技的未来"><a href="#一、The-future-of-technology-科技的未来" class="headerlink" title="一、The future of technology | 科技的未来"></a>一、The future of technology | 科技的未来</h2><p>视频：<a href="https://youtu.be/gTAghAJcO1o" target="_blank" rel="noopener">https://youtu.be/gTAghAJcO1o</a></p><p>关于科技的未来， Alan Kay 有着比其他人更深刻的思考。在 这个演讲 中，Kay 解释了施乐帕罗奥多研究中心是怎样在很短的一段时间内发明出如此多的新技术的。这些现在看来大名鼎鼎的技术包括了：个人电脑、位图显示、图形界面、桌面发布、文字处理、激光打印，以太网以及面向对象编程。</p><a id="more"></a><p>在 Kay 看来，实现这一成就的关键在于一种专注于创新的企业文化。这种文化注重从最基础的研究做起，而不是仅在已有的创新的基础上升级和改良。这类创新通常需要大量的金钱投入，长时间的研究周期以及独辟蹊径的问题解决方式综合作用才能取得成功。</p><p>关于未来科技趋势，另外一些重要的演讲：</p><ol><li><p>《The Mother of All Demos | 多媒体演示之祖》 作者：Douglas Engelbart，鼠标之父的一个多媒体演示视频。其中包括了对超链接、计算机制图、视频会议、鼠标、文字处理等等内容的演示。而这一切都发生在 1968 年！这就是 Kay 在他演讲中引述的所谓跨时代式的创新。</p></li><li><p>《The Future of Programming | 编程的未来》  作者：Bret Victor。Bret 在他的演讲中带领我们回顾了过去并提醒大家：对于一个需要创造力的人来说，最危险的情形莫过于他拥有了「我知道我正在干什么」这种想法。因为一旦有了这种想法，你就会失去通过寻找不同途径来解决一件事情的意愿，进而失去了这种能力。换句话说，在创新的世界里，你变瞎了。</p></li><li><p>《The Computer Revolution Hasn’t Happened Yet | 计算机革命尚未发生》  作者：Alan Kay。「我创造了『面向对象』这个词，而且我可以告诉你我根本没把 C++ 放在心上。」</p></li></ol><h2 id="二、User-interface-用户界面"><a href="#二、User-interface-用户界面" class="headerlink" title="二、User interface | 用户界面"></a>二、User interface | 用户界面</h2><p>视频：<a href="http://vimeo.com/36579366" target="_blank" rel="noopener">http://vimeo.com/36579366</a></p><p>听完 Bret Victor 的 这个演讲， 你会觉得你所会的所有的编程语言和工具都 out 了。在这个演讲中， Bret 展示了一个全新的代码编写方式。这种方式使你不必在脑中反复推演那些枯燥的逻辑。通过一种交互式界面，你可以直观的体验和感受到你的代码，计算机将替你完成其余沉闷的工作。这种方式不仅使学习编程变得更加简单，而且它从根本上改变了我们解决问题的方式。</p><p>另一些 UI 好货：</p><ol><li><p>《Stop Drawing Dead Fish | 别再画死鱼了》 作者：Bret Victor。用计算机为艺术带去生机。</p></li><li><p>《Media Thinking for the Unthinkable | “图说”不可想》作者：Bret Victor。为科学与工程学设计新的媒介。</p></li><li><p>《Doing With Images Makes Symbols | 用图像制造符号》。Alan Kay。人类是怎样学习的以及怎样建立起能够支持这个学习方式的 UI。「你身体里想学习的那部分不会说英语。」</p></li></ol><h2 id="三、Programming-language-design-编程语言设计"><a href="#三、Programming-language-design-编程语言设计" class="headerlink" title="三、Programming language design | 编程语言设计"></a>三、Programming language design | 编程语言设计</h2><p>Rich Hickey是 Clojure 语言的开发者，将带领你从一个全新的角度去审视计算机科学的一些基本概念。复杂度 （Complexity） 便是其中之一。Rich 将在 这个演讲 中指出能定义这一概念的最好的一些工具和最好的一门语言。</p><p>其他一些演讲：</p><ol><li><p>《Are We There Yet? | 我们距离未来还有多远？》。Rich Hickey。另一个有关基本原则的讲座。Hickey 将带领你重新审视状态，时间，身份，值和类型等一系列基础概念。</p></li><li><p>《Growing a Language | 发展一门编程语言》。Guy Steele。这是我看过的有关编程语言最有智慧的演讲之一。虽然只有十几分钟，却回味无穷。</p></li><li><p>《The Science of Insecurity | 有关不安全性的科学》。Meredith Patterson。为什么说现在的系统和协议都是与生俱来的不安全？以及我们在未来怎样修复这种不安全性。</p></li></ol><h2 id="四、Software-engineering-软件工程"><a href="#四、Software-engineering-软件工程" class="headerlink" title="四、Software engineering | 软件工程"></a>四、Software engineering | 软件工程</h2><p>视频：<a href="http://vimeo.com/9270320" target="_blank" rel="noopener">http://vimeo.com/9270320</a></p><p>Greg Wilson 将带领大家仔细审视我们在软件工程中是怎样制定决策的。在开发中，我们往往需要做出各种决定，例如是用 Java 还是 Ruby？用 Play 框架或是 Rails 框架？是测试驱动开发还是敏捷开发？需不需要代码审查？等等。大多数情况下，我们对以上这些问题的答案通常只来源于一个单一的知识层面。比如说我们自己的想法，网络热点，外部趋势亦或者是一些奇闻轶事。而 这个演讲 提醒了我们应当改变这种实践方式，进而转向另一个以循证为基础的软件工程模式。</p><p>其他好的演讲：</p><ol><li><p>《Real Software | 真 · 软件工程》作者：Glenn Vanderburg。 大学课堂里所教的软件工程知识基本是没用的。按照他们所教的方法开发软件系统，不仅不能保证产品质量，而且也无法有效控制成本。甚至有些时候，按照这些方法根本开发不出任何系统。</p></li><li><p>《Hammock Driven Development | 吊床驱动开发模式》作者：Rich Hickey。「绝大多数软件的重大缺陷通常都源于开发时错误的构想。」为了解决这种问题，开发者应该离开自己的电脑，并在一段时间内专注于构思软件，同时 记录 好自己的想法。</p></li><li><p>《The Language of the System | 系统的语言》。Rich Hickey。我们通常过于专注于开发出一个完美的编程语言，然后用它去构建一个系统。但是我们是否想过去开发一种能用于不同系统之间的通信的语言呢？</p></li></ol><h2 id="五、Computers-and-learning-计算机与学习"><a href="#五、Computers-and-learning-计算机与学习" class="headerlink" title="五、Computers and learning | 计算机与学习"></a>五、Computers and learning | 计算机与学习</h2><p>视频：<a href="https://youtu.be/U6FvJ6jMGHU" target="_blank" rel="noopener">https://youtu.be/U6FvJ6jMGHU</a></p><p>Daphne Koller 和 Andrew Ng  正在尝试着重新定义教育。他们创办了一个名为 Coursera 的在线教育机构。这个机构致力于把那些真正的大学课程，通过互联网免费普及到全世界。这个演讲 中，他们讲解了一系列他们应用在这个为数十万学生服务的在线课堂上的技术。其中包括在线视频，交流论坛，交互式UI，自动评分以及同学互评系统。通过 Coursera 的运作，我们还获得了一个前所未有的，观察人类学习方式的角度。</p><p>其他一些有关教育的重要演讲：</p><ol><li><p>《Let’s use video to reinvent education | 让我们用视频改造教育》作者：Salman Khan。Koller 的演讲是关于大学教育的演讲。而 Khan 的演讲则讲述了怎样通过 可汗学院 来为上大学前的学生们提供在线教育。</p></li><li><p>《Teaching Creative Computer Science | 创造性计算机科学教育》。 作者：Simon Peyton Jones。每一个孩子都应该学习计算机科学，因为它能 开阔他们的思路。</p></li><li><p>《Machine Learning | 机器学习，一个爱情故事》。 作者：Hilary Mason。当你们在谈论教书育人时我在谈论什么。</p></li></ol><h2 id="六、A-career-in-programming-以编程为业"><a href="#六、A-career-in-programming-以编程为业" class="headerlink" title="六、A career in programming | 以编程为业"></a>六、A career in programming | 以编程为业</h2><p>视频：<a href="https://youtu.be/a1zDuOPkMSw" target="_blank" rel="noopener">https://youtu.be/a1zDuOPkMSw</a></p><p>这个演讲 绘制了一幅能让你不仅在研究领域，而且在其他任何领域都能获得成功的职业蓝图。所以，基于这个事实，人们还给这个演讲起了一个别名：「你和你的事业」。「为什么只有少数科学家才能在科学发展的进程中做出巨大的贡献，而其他很多科学家却在这个过程中逐渐被遗忘？」在讲座中，Richard Hamming 分享了他对这个问题的见解。他认为，其中最重要的因素包括了勇气，运气，动力（「知识和生产力像复利一样」），对重要问题的专注（「如果你不专注于重要问题，相当于你在做 无用功」），开放的思想，推销自己成果的能力（「我建议你在阅读一份期刊的时候想一想，为什么我能读到这些文章？」），等等。这个讲座应该让所有高中生都看一看。</p><p>更多编程领域成功学：</p><ol><li><p>《The Myth of the Genius Programmer | 天才码农之谜》。 作者：Brian Fitzpatrick 和 Ben Collins-Sussaman。这不是一个有关天才程序员或 10倍速编程高手 的故事。这个演讲的主题是关于怎样建立一个为个人发展，团队合作能提供有效支持的企业文化，进而避免精英主义气氛的产生。</p></li><li><p>《Programming Well With Others: Social Skills for Geeks | 与他人愉快的编程：技术宅的社交技巧指南》。Brian Fitzpatrick 和 Ben Collins-Sussaman。BB 组合再次联手告诉大家：一个成功的软件工程师的世界里不应该仅仅只有语言，编译器，调试器和算法。</p></li><li><p>《JavaScript Masterclass | JavaScript 大师课》。 作者：Angelina Fabbro。 别让标题骗了你：这是一个让中级水平的程序员能就任何话题（不仅仅是 JavaScript）都谈笑风生的简明教程。</p></li></ol><h2 id="七、Computer-gaming-电脑游戏"><a href="#七、Computer-gaming-电脑游戏" class="headerlink" title="七、Computer gaming | 电脑游戏"></a>七、Computer gaming | 电脑游戏</h2><p>视频：<a href="https://youtu.be/dE1DuBesGYM" target="_blank" rel="noopener">https://youtu.be/dE1DuBesGYM</a></p><p>当一个孩子从高中毕业的时候，他已经花了 10000 个小时在打游戏上面。这基本与他上学的时间相当（如果他从未缺课）。这些时间也足以让他们 在某一领域成为专家。那在这 10000 小时里他们究竟学到了什么？Jane McGonigal 将为你展示怎样运用这些时间和学习的过程让世界变得更美好。</p><p>更多好“游戏”：</p><ol><li><p>《The game that can give you 10 extra years of life | 给了我10年新生的那个游戏》。 作者：Jane McGonigal。一个振聋发聩的演讲，有关游戏是怎样改善了 Jane 的生活。并介绍了在她经历了剧烈的生活动荡后，游戏是怎样帮助她走出自杀阴霾的。</p></li><li><p>《Human Computation | 人体计算机》。 作者：Luis von Ahn。我们可以运用人脑的能力和一些游戏去解决那些对计算机来说都很难解决的问题。比如图像识别，翻译和一些「常识性问题」。</p></li><li><p>《Design Outside the Box | 创造性设计》。 作者：Jesse Schell。当游戏入侵了我们生活的方方面面之后会发生什么？</p></li></ol><h2 id="八、Fun-Talks-趣谈"><a href="#八、Fun-Talks-趣谈" class="headerlink" title="八、Fun Talks | 趣谈"></a>八、Fun Talks | 趣谈</h2><p>视频：<a href="https://www.destroyallsoftware.com/talks/wat" target="_blank" rel="noopener">https://www.destroyallsoftware.com/talks/wat</a></p><p>现在是轻松一刻。Gary Bernhardt 的 5 分钟 Wat 小视频。 满满正能量。</p><p>其他的人生正能量罐：</p><ol><li><p>《Computers are a sadness, I am the cure | 计算机是忧伤的毒，我才是解药》。 作者：James Mickens</p></li><li><p>《Programming is terrible – lessons from a life wasted | 讨厌的编程 – 一个废柴的人生课》。 作者：Thomas Figg</p></li><li><p>《The Web Will Die When OOP Dies | OOP如果死了，Web还活着干什么》。 作者：Zed Shaw</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资料 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些技巧</title>
      <link href="/2019/01/17/%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7/"/>
      <url>/2019/01/17/%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="一些技巧"><a href="#一些技巧" class="headerlink" title="一些技巧"></a>一些技巧</h1><blockquote><p>Jupyter Notebook 配置</p><p>个人配置命令：<code>jt -t onedork -f firacode -fs 12 -nfs 15 -cellw 88% -T -N</code></p><p>地址：<a href="https://github.com/dunovank/jupyter-themes" target="_blank" rel="noopener">https://github.com/dunovank/jupyter-themes</a></p></blockquote><h2 id="合并文件"><a href="#合并文件" class="headerlink" title="合并文件"></a>合并文件</h2><blockquote><p>cat *.csv  &gt; full.csv<br>无序的</p></blockquote><h2 id="Python-KeyError异常"><a href="#Python-KeyError异常" class="headerlink" title="Python KeyError异常"></a>Python KeyError异常</h2><p>如果不知道 dict 中是否有 key 的值,那么最好用</p><blockquote><p>dict.get(key)</p></blockquote><p>用 dict[key] 读取会报KeyError异常</p><p>dict.get方法主要是提供一个取不到对应key的value就返回默认值的功能,而dict[key]实际上是调用了 <code>__getitem__</code> 方法</p><p>说明:</p><blockquote><p>D.get(key[, d])  -&gt;D[k] if k in D, else d.   d defaults to None.</p></blockquote><h2 id="编码转换"><a href="#编码转换" class="headerlink" title="编码转换"></a>编码转换</h2><blockquote><p>iconv -f utf-8 -t gb18030 new.csv &gt; market.csv</p></blockquote><h2 id="Jupyter-Notebook-配置"><a href="#Jupyter-Notebook-配置" class="headerlink" title="Jupyter Notebook 配置"></a>Jupyter Notebook 配置</h2><blockquote><p>个人配置命令：<code>jt -t onedork -f firacode -fs 12 -nfs 15 -cellw 88% -T -N</code><br>地址：<a href="https://github.com/dunovank/jupyter-themes" target="_blank" rel="noopener">https://github.com/dunovank/jupyter-themes</a></p></blockquote><h2 id="vim在-vimrc-中快速安装-vim-plug"><a href="#vim在-vimrc-中快速安装-vim-plug" class="headerlink" title="vim在 ~/.vimrc 中快速安装 vim-plug"></a>vim在 ~/.vimrc 中快速安装 vim-plug</h2><pre class="line-numbers language-shell"><code class="language-shell">let $BUNDLE = expand("$HOME/.dotfiles/data/vimdata/bundle")let $PLUG_DIR = expand("$BUNDLE/vim-plug")if empty(glob(expand("$PLUG_DIR/plug.vim")))  silent !curl -fLo $PLUG_DIR/plug.vim --create-dirs    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim  autocmd VimEnter * PlugInstall --sync | source ~/.vimrcendifsource $PLUG_DIR/plug.vim<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码的意思是如果 vim-plug.vim 文件不存在, 就自动从 github 上下载最新版本到指定目录并加载。</p><h2 id="Mac下使用tree工具"><a href="#Mac下使用tree工具" class="headerlink" title="Mac下使用tree工具"></a>Mac下使用tree工具</h2><pre class="line-numbers language-Shell"><code class="language-Shell">brew install treetree -L 2 -N > dir.txtalias tree="find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>-N 解决中文乱码<br>第三行是使用find命令模拟出tree命令的效果，保存zsh文件中使用别名来快速执行该命令</p><h2 id="代理终端"><a href="#代理终端" class="headerlink" title="代理终端"></a>代理终端</h2><p>把代理服务器地址写入shell配置文件<code>.bashrc</code>或者<code>.zshrc</code></p><p>直接在<code>.bashrc</code>或者<code>.zshrc</code>添加下面内容</p><pre class="line-numbers language-shell"><code class="language-shell">export http_proxy="http://localhost:port" export https_proxy="http://localhost:port"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以使用shadowsocks代理为例，ss的代理端口为<code>1080</code>,那么应该设置为</p><pre class="line-numbers language-shell"><code class="language-shell">export http_proxy="socks5://127.0.0.1:1086" export https_proxy="socks5://127.0.0.1:1086"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者直接设置ALL_PROXY</p><pre class="line-numbers language-shell"><code class="language-shell">export ALL_PROXY=socks5://127.0.0.1:1086 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>localhost</code>就是一个域名，域名默认指向 <code>127.0.0.1</code>，两者是一样的。</p><p>然后<code>ESC</code>后<code>:wq</code>保存文件，接着在终端中执行<br><code>source ~/.bashrc</code></p><p>或者退出当前终端再起一个终端。 这个办法的好处是把代理服务器永久保存了，下次就可以直接用了。</p><p>或者通过设置alias简写来简化操作，每次要用的时候输入<code>setproxy</code>，不用了就<code>unsetproxy</code>。</p><pre class="line-numbers language-shell"><code class="language-shell">alias setproxy="export ALL_PROXY=socks5://127.0.0.1:1086" alias unsetproxy="unset ALL_PROXY" alias ip="curl -i http://ip.cn"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用curl命令监测是否返回数据：</p><p><code>curl https://www.google.com</code></p><h2 id="win-Tree-工具"><a href="#win-Tree-工具" class="headerlink" title="win Tree 工具"></a>win Tree 工具</h2><pre class="line-numbers language-shell"><code class="language-shell">tree /F > dir.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="终端代理（Win）"><a href="#终端代理（Win）" class="headerlink" title="终端代理（Win）"></a>终端代理（Win）</h2><p>set https_proxy=<a href="http://127.0.0.1:1086" target="_blank" rel="noopener">http://127.0.0.1:1086</a></p><p>set http_proxy=<a href="http://127.0.0.1:1086" target="_blank" rel="noopener">http://127.0.0.1:1086</a></p>]]></content>
      
      
      <categories>
          
          <category> 经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python理解二</title>
      <link href="/2019/01/17/Python%E7%90%86%E8%A7%A3%E4%BA%8C/"/>
      <url>/2019/01/17/Python%E7%90%86%E8%A7%A3%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="Python理解点-2"><a href="#Python理解点-2" class="headerlink" title="Python理解点 #2"></a>Python理解点 #2</h1><blockquote><p>lambda(λ)  使用方法和特性<br>函数柯西化<br>Assert<br>nonlocal 关键字<br>Object + Function = Bound Method<br>高阶函数（Higher-Order Functions）<br>类的继承（Inheritance）<br>递归（Recursion）与 优化（memo）<br>可变函数（Mutable Functions）<br>__str__ 和 __repr__</p></blockquote><a id="more"></a><h2 id="lambda-λ-使用方法和特性"><a href="#lambda-λ-使用方法和特性" class="headerlink" title="lambda(λ)  使用方法和特性"></a>lambda(λ)  使用方法和特性</h2><h2 id="递归（Recursion）与-优化（memo）"><a href="#递归（Recursion）与-优化（memo）" class="headerlink" title="递归（Recursion）与 优化（memo）"></a>递归（Recursion）与 优化（memo）</h2><p>def fib(n):<br>​    “””The nth Fibonacci number.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> fib<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token number">6765</span><span class="token string">""</span>"<span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">or</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> n<span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> fib<span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span> <span class="token operator">+</span> fib<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Time"><a href="#Time" class="headerlink" title="Time"></a>Time</h1><p>def count(f):<br>​    “””Return a counted version of f with a call_count attribute.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">or</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">return</span> n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">else</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">return</span> fib<span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span> <span class="token operator">+</span> fib<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> fib <span class="token operator">=</span> count<span class="token punctuation">(</span>fib<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> fib<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token number">6765</span><span class="token operator">>></span><span class="token operator">></span> fib<span class="token punctuation">.</span>call_count<span class="token number">21891</span><span class="token string">""</span>"<span class="token keyword">def</span> <span class="token function">counted</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    counted<span class="token punctuation">.</span>call_count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> f<span class="token punctuation">(</span>n<span class="token punctuation">)</span>counted<span class="token punctuation">.</span>call_count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">return</span> counted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Memoization"><a href="#Memoization" class="headerlink" title="Memoization"></a>Memoization</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""The nth Fibonacci number.    >>> fib(20)    6765    """</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">or</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> n    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> fib<span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span> <span class="token operator">+</span> fib<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Time</span><span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Return a counted version of f with a call_count attribute.    >>> def fib(n):    ...     if n == 0 or n == 1:    ...         return n    ...     else:    ...         return fib(n-2) + fib(n-1)    >>> fib = count(fib)    >>> fib(20)    6765    >>> fib.call_count    21891    """</span>    <span class="token keyword">def</span> <span class="token function">counted</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        counted<span class="token punctuation">.</span>call_count <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> f<span class="token punctuation">(</span>n<span class="token punctuation">)</span>    counted<span class="token punctuation">.</span>call_count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">return</span> counted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Memoization</span><span class="token keyword">def</span> <span class="token function">memo</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Memoize f.    >>> def fib(n):    ...     if n == 0 or n == 1:    ...         return n    ...     else:    ...         return fib(n-2) + fib(n-1)    >>> fib = count(fib)    >>> fib(20)    6765    >>> fib.call_count    21891    >>> counted_fib = count(fib)    >>> fib  = memo(counted_fib)    >>> fib(20)    6765    >>> counted_fib.call_count    21    >>> fib(35)    9227465    >>> counted_fib.call_count    36    """</span>    cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">memoized</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> n <span class="token operator">not</span> <span class="token keyword">in</span> cache<span class="token punctuation">:</span>            cache<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">(</span>n<span class="token punctuation">)</span>        <span class="token keyword">return</span> cache<span class="token punctuation">[</span>n<span class="token punctuation">]</span>    <span class="token keyword">return</span> memoized<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>memo() 将每次计算到的 f(n) 存入dict，之后相同的 f(n) 直接读取不计算</p><h2 id="str-和-repr"><a href="#str-和-repr" class="headerlink" title="__str__ 和 __repr__"></a>__str__ 和 __repr__</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">str_repr_demos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> fractions <span class="token keyword">import</span> Fraction    half <span class="token operator">=</span> Fraction<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    half    <span class="token keyword">print</span><span class="token punctuation">(</span>half<span class="token punctuation">)</span>    str<span class="token punctuation">(</span>half<span class="token punctuation">)</span>    repr<span class="token punctuation">(</span>half<span class="token punctuation">)</span>    s <span class="token operator">=</span> <span class="token string">'hello world'</span>    str<span class="token punctuation">(</span>s<span class="token punctuation">)</span>    repr<span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token string">"'hello world'"</span>    repr<span class="token punctuation">(</span>repr<span class="token punctuation">(</span>repr<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    eval<span class="token punctuation">(</span>eval<span class="token punctuation">(</span>eval<span class="token punctuation">(</span>repr<span class="token punctuation">(</span>repr<span class="token punctuation">(</span>repr<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Errors: eval('hello world')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Implementing generic string functions</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Bear</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""A Bear."""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__repr__ <span class="token operator">=</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> <span class="token string">'oski'</span>        self<span class="token punctuation">.</span>__str__ <span class="token operator">=</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> <span class="token string">'oski the bear'</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Bear()'</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'a bear'</span><span class="token keyword">def</span> <span class="token function">print_bear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    oski <span class="token operator">=</span> Bear<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>oski<span class="token punctuation">)</span> <span class="token operator">>></span><span class="token operator">></span> a bear    <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>oski<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>></span><span class="token operator">></span> a bear    <span class="token keyword">print</span><span class="token punctuation">(</span>repr<span class="token punctuation">(</span>oski<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>></span><span class="token operator">></span> Bear<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>oski<span class="token punctuation">.</span>__repr__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>></span><span class="token operator">></span> oski    <span class="token keyword">print</span><span class="token punctuation">(</span>oski<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>></span><span class="token operator">></span> oski the bear<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">repr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> type<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>__repr__<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    t <span class="token operator">=</span> type<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">if</span> hasattr<span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">'__str__'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> t<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> repr<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跟上边的结果一样</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python理解点</title>
      <link href="/2018/09/15/Python%E7%90%86%E8%A7%A3%E7%82%B9/"/>
      <url>/2018/09/15/Python%E7%90%86%E8%A7%A3%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="Python理解点-1"><a href="#Python理解点-1" class="headerlink" title="Python理解点 #1"></a>Python理解点 #1</h1><blockquote><p>if <strong>name</strong> == “<strong>__main__</strong>“<br>super() 和 <strong>init</strong>() 方法<br>关键字yield</p></blockquote><a id="more"></a><h2 id="if-name-“-main-”"><a href="#if-name-“-main-”" class="headerlink" title="if name == “__main__”"></a>if <strong>name</strong> == “__main__”</h2><p>当Python解析器读取一个源文件时,它会执行所有的代码。在执行代码前,会定义一些特殊的变量.例如，如果解析器运行的模块(源文件)作为主程序，它将会把 <em>\</em>name__ 变量设置成 “ <em>\</em>main__ “ 。如果只是引入其他的模块，__name__ 变量将会设置成模块的名字。</p><p>设置完特殊变量，它就会执行 import 语句并且加载这些模块，当遇到 def 代码段的时候,它就会创一个函数对象并创建一个名叫 myfunction 变量指向函数对象。接下来会读取 if 语句并检查 __name__ 是不是等于 “__main__” 。如果是的话就会执行这个代码段。</p><p>这么做的原因是有时需要将模块既可以直接的执行，还可以被当做模块导入到其他模块中去。通过检查是不是主函数，可以让代码只在它作为主程序运行时执行，而当其他位置调用模块中的函数的时候不必执行。</p><h2 id="super-和-init-方法"><a href="#super-和-init-方法" class="headerlink" title="super() 和 __init__() 方法"></a>super() 和 __init__() 方法</h2><p>super() 的好处就是可以避免直接使用父类的名字（初级应用），但是它主要用于<strong>多重继承</strong>。</p><p>它获取调用堆栈帧，并找到类（隐式存储为本地自由变量，__ class__，使调用函数成为类的闭包）和该函数的第一个参数，它应该是通知它的实例或类 使用哪种方法解决顺序（MRO）。</p><p>super()要点是不要避免编写父类，关键是要确保方法解析顺序（MRO）中的下一个方法被调用。 这在多重继承中变得很重要。</p><p>MRO: 类都有一个名为 __ mro __ 的属性，它的值是一个元组，按照方法解析顺序列出各个超类，从当前类一直往上， 直到object类。</p><p>使用 __ mro __ 方法可以打印顺序。</p><p>示例：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Base init'ed"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">ChildA</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ChildA init'ed"</span><span class="token punctuation">)</span>        Base<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">ChildB</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ChildB init'ed"</span><span class="token punctuation">)</span>        super<span class="token punctuation">(</span>ChildB<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># super后的__init__()无self</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这些类之后创建依赖类：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">UserDependency</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"UserDependency init'ed"</span><span class="token punctuation">)</span>        super<span class="token punctuation">(</span>UserDependency<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>ChildB 使用了 super, ChildA 没有使用：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">UserA</span><span class="token punctuation">(</span>ChildA<span class="token punctuation">,</span> UserDependency<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"UserA init'ed"</span><span class="token punctuation">)</span>        super<span class="token punctuation">(</span>UserA<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">UserB</span><span class="token punctuation">(</span>ChildB<span class="token punctuation">,</span> UserDependency<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"UserB init'ed"</span><span class="token punctuation">)</span>        super<span class="token punctuation">(</span>UserB<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>UserA does not call the UserDependency method:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> UserA<span class="token punctuation">(</span><span class="token punctuation">)</span>UserA init'edChildA init'edBase init'ed<span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>UserA object at <span class="token number">0x0000000003403BA8</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> UserA<span class="token punctuation">.</span>__mro__<span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'__main__.UserA'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'__main__.ChildA'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'__main__.UserDependency'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'__main__.Base'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'object'</span><span class="token operator">></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以看到没有遵循方法调试顺序调用&lt;class ‘<strong>main</strong>.ChildA’&gt;之后的下一个&lt;class ‘<strong>main</strong>.UserDependency’&gt;</p></blockquote><p>But UserB, because ChildB uses super, does!:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> UserB<span class="token punctuation">(</span><span class="token punctuation">)</span>UserB init'edChildB init'ed<span class="token operator">**</span>UserDependency init'ed<span class="token operator">**</span>Base init'ed<span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>UserB object at <span class="token number">0x0000000003403438</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> UserB<span class="token punctuation">.</span>__mro__<span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'__main__.UserB'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'__main__.ChildB'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'__main__.UserDependency'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'__main__.Base'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'object'</span><span class="token operator">></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="关键字yield"><a href="#关键字yield" class="headerlink" title="关键字yield"></a>关键字yield</h1><p>为了理解yield有什么用，首先得理解generators，而理解generators前还要理解iterables </p><h3 id="Iterables-（可迭代对象）"><a href="#Iterables-（可迭代对象）" class="headerlink" title="Iterables （可迭代对象）"></a>Iterables （可迭代对象）</h3><p>当创建了一个列表，可以一个一个的读取它的每一项，这叫做iteration：</p><pre class="line-numbers language-python"><code class="language-python">mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> i <span class="token keyword">in</span> mylist<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Mylist是可迭代的，当用列表推导式的时候，就创建了一个列表，而这个列表也是可迭代的：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> mylist <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token operator">*</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> i <span class="token keyword">in</span> mylist<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token number">0</span><span class="token number">1</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有可以用在 for…in… 语句中的都是可迭代的，比如lists、strings、files …</p><p>因为这些可迭代的对象可以随意的读取，所以非常方便易用。但是必须把它们的值放到内存里，当它们有很多值时就会消耗太多的内存 。</p><h3 id="Generators"><a href="#Generators" class="headerlink" title="Generators"></a>Generators</h3><p>生成器也是迭代器的一种，但是只能迭代它们一次。原因很简单，因为它们不是全部存在内存里，它们只在要<br>调用的时候在内存里生成：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> mygenerator <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">*</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> i <span class="token keyword">in</span> mygenerator<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token number">0</span><span class="token number">1</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成器和迭代器的区别就是用 () 代替 [] ，还有不能用 for i in mygenerator 第二次调用生成器:<br>首先计算0，然后会在内存里丢掉0去计算1，直到计算完4。</p><h3 id="Yield"><a href="#Yield" class="headerlink" title="Yield"></a>Yield</h3><p>Yield 的用法和关键字 return 差不多，下面的函数将会返回一个生成器：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">createGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> mylist <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> mylist<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">yield</span> i<span class="token operator">*</span>i<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> mygenerator <span class="token operator">=</span> createGenerator<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 创建生成器</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>mygenerator<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mygenerator is an object!</span><span class="token operator">&lt;</span>generator object createGenerator at <span class="token number">0xb7555c34</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> i <span class="token keyword">in</span> mygenerator<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token number">0</span><span class="token number">1</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里这个例子好像没什么用，不过当你的函数要返回一个非常大的集合并且你希望只读一次的话，那么它就非常的方便了。要理解 Yield 你必须先理解当你调用函数的时候，函数里的代码并没有运行。函数仅仅返回生成器对象，这就是它最微妙的地方:-)</p><p>然后呢，每当 for 语句迭代生成器的时候你的代码才会运转。</p><p>现在，到了最难的部分：</p><p>当 for 语句第一次调用函数里返回的生成器对象，函数里的代码就开始运作，直到碰到 yield ，然后会返回本次循环的第一个返回值。所以下一次调用也将运行一次循环然后返回下一个值，直到没有值可以返回。一旦函数运行并没有碰到 yeild 语句就认为生成器已经为空了。原因有可能是循环结束或者没有满足 if/else 之类的 。</p><p>示例代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> node<span class="token punctuation">.</span>_get_child_candidates<span class="token punctuation">(</span>self<span class="token punctuation">,</span> distance<span class="token punctuation">,</span> min_dist<span class="token punctuation">,</span> max_dist<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>_leftchild <span class="token operator">and</span> distance <span class="token operator">-</span> max_dist <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>_median<span class="token punctuation">:</span>           <span class="token keyword">yield</span> self<span class="token punctuation">.</span>_leftchild    <span class="token keyword">if</span> self<span class="token punctuation">.</span>_rightchild <span class="token operator">and</span> distance <span class="token operator">+</span> max_dist <span class="token operator">>=</span> self<span class="token punctuation">.</span>_median<span class="token punctuation">:</span>        <span class="token keyword">yield</span> self<span class="token punctuation">.</span>_rightchild<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用代码：</p><pre class="line-numbers language-python"><code class="language-python">result<span class="token punctuation">,</span> candidates <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>self<span class="token punctuation">]</span><span class="token keyword">while</span> candidates<span class="token punctuation">:</span>    node <span class="token operator">=</span> candidates<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    distance <span class="token operator">=</span> node<span class="token punctuation">.</span>_get_dist<span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">if</span> distance <span class="token operator">&lt;=</span> max_dist <span class="token operator">and</span> distance <span class="token operator">>=</span> min_dist<span class="token punctuation">:</span>        result<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>node<span class="token punctuation">.</span>_values<span class="token punctuation">)</span>    candidates<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>node<span class="token punctuation">.</span>_get_child_candidates<span class="token punctuation">(</span>distance<span class="token punctuation">,</span> min_dist<span class="token punctuation">,</span> max_dist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码讲解：</strong></p><p>生成器：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 这里你创建node方法的对象将会返回一个生成器</span><span class="token keyword">def</span> node<span class="token punctuation">.</span>_get_child_candidates<span class="token punctuation">(</span>self<span class="token punctuation">,</span> distance<span class="token punctuation">,</span> min_dist<span class="token punctuation">,</span> max_dist<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 这里的代码你每次使用生成器对象的时候将会调用</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>_leftchild <span class="token operator">and</span> distance <span class="token operator">-</span> max_dist <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>_median<span class="token punctuation">:</span>        <span class="token keyword">yield</span> self<span class="token punctuation">.</span>_leftchild    <span class="token keyword">if</span> self<span class="token punctuation">.</span>_rightchild <span class="token operator">and</span> distance <span class="token operator">+</span> max_dist <span class="token operator">>=</span> self<span class="token punctuation">.</span>_median<span class="token punctuation">:</span>        <span class="token keyword">yield</span> self<span class="token punctuation">.</span>_rightchild    <span class="token comment" spellcheck="true"># 如果代码运行到这里,生成器就被认为变成了空的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建空列表和一个当前对象索引的列表</span>result<span class="token punctuation">,</span> candidates <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>self<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 在candidates上进行循环(在开始只保含一个元素)</span><span class="token keyword">while</span> candidates<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 获得最后一个condidate然后从列表里删除</span>    node <span class="token operator">=</span> candidates<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取obj和candidate的distance</span>    distance <span class="token operator">=</span> node<span class="token punctuation">.</span>_get_dist<span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 如果distance何时将会填入result</span>    <span class="token keyword">if</span> distance <span class="token operator">&lt;=</span> max_dist <span class="token operator">and</span> distance <span class="token operator">>=</span> min_dist<span class="token punctuation">:</span>        result<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>node<span class="token punctuation">.</span>_values<span class="token punctuation">)</span>    candidates<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>node<span class="token punctuation">.</span>_get_child_candidates<span class="token punctuation">(</span>distance<span class="token punctuation">,</span> min_dist<span class="token punctuation">,</span> max_dist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码有几个有意思的地方：</p><ul><li>一般的时候我们会在循环迭代一个列表的同时在列表中添加元素:-) 尽管在有限循环里结束多少有一些危险,但也不失为一个简单的方法去遍历嵌套的数据。在这candidates.extend(node._get_child_candidates(distance, min_dist, max_dist)) 将遍历生成器的每一个值，但是 while 循环中的condidates将不再保存已经遍历过的生成器对象， 也就是说添加进condidates的生成器对象只会遍历一遍。</li><li>extend() 是一个列表对象的方法，它可以把一个迭代对象添加进列表 </li></ul><p>常见用法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是在你给的代码里得到的是生成器，这样做的好处：</p><ol><li>你不需要读这个值两次</li><li>你能得到许多孩子节点但是你不希望他们全部存入内存</li></ol><p>这种方法之所以能很好的运行是因为Python不关心方法的参数是不是一个列表，它只希望接受一个迭代器，所以不管是strings、lists、tuples或者generators都可以！这种方法叫做duck typing，这也是Python看起来特别cool的原因之一。</p><p>好了，看到这里可以打住了，下面让我们看看生成器的高级用法：</p><p><strong>控制迭代器的穷尽：</strong> </p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 让我们建个银行,生产许多ATM</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> crisis <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">def</span> <span class="token function">create_atm</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">while</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>crisis<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">yield</span> <span class="token string">"$100"</span><span class="token operator">>></span><span class="token operator">></span> hsbc <span class="token operator">=</span> Bank<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 当一切就绪了你想要多少ATM就给你多少</span><span class="token operator">>></span><span class="token operator">></span> corner_street_atm <span class="token operator">=</span> hsbc<span class="token punctuation">.</span>create_atm<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>corner_street_atm<span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>$<span class="token number">100</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>corner_street_atm<span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>$<span class="token number">100</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>corner_street_atm<span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> cash <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'$100'</span><span class="token punctuation">,</span> <span class="token string">'$100'</span><span class="token punctuation">,</span> <span class="token string">'$100'</span><span class="token punctuation">,</span> <span class="token string">'$100'</span><span class="token punctuation">,</span> <span class="token string">'$100'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> hsbc<span class="token punctuation">.</span>crisis <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token comment" spellcheck="true"># cao,经济危机来了没有钱了!</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>corner_street_atm<span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>type <span class="token string">'exceptions.StopIteration'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> wall_street_atm <span class="token operator">=</span> hsbc<span class="token punctuation">.</span>create_atm<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 对于其他ATM,它还是True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>wall_street_atm<span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>type <span class="token string">'exceptions.StopIteration'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> hsbc<span class="token punctuation">.</span>crisis <span class="token operator">=</span> <span class="token boolean">False</span> <span class="token comment" spellcheck="true"># 麻烦的是,尽管危机过去了,ATM还是空的</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>corner_street_atm<span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>type <span class="token string">'exceptions.StopIteration'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> brand_new_atm <span class="token operator">=</span> hsbc<span class="token punctuation">.</span>create_atm<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 只能重新新建一个bank了</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> cash <span class="token keyword">in</span> brand_new_atm<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">print</span> cash$<span class="token number">100</span>$<span class="token number">100</span>$<span class="token number">100</span>$<span class="token number">100</span>$<span class="token number">100</span>$<span class="token number">100</span>$<span class="token number">100</span>$<span class="token number">100</span>$<span class="token number">100</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它对于一些不断变化的值很有用，像控制你资源的访问。</p><h3 id="Itertools，你的好基友"><a href="#Itertools，你的好基友" class="headerlink" title="Itertools，你的好基友"></a>Itertools，你的好基友</h3><p>itertools模块包含了一些特殊的函数可以操作可迭代对象。有没有想过复制一个生成器？链接两个生成器？把嵌套列表里的值组织成一个列表？Map/Zip还不用创建另一个列表？</p><p>来吧 <code>import itertools</code><br>来一个例子？让我们看看4匹马比赛有多少个排名结果：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> horses <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> races <span class="token operator">=</span> itertools<span class="token punctuation">.</span>permutations<span class="token punctuation">(</span>horses<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>races<span class="token punctuation">)</span><span class="token operator">&lt;</span>itertools<span class="token punctuation">.</span>permutations object at <span class="token number">0xb754f1dc</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>itertools<span class="token punctuation">.</span>permutations<span class="token punctuation">(</span>horses<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 折腾总结</title>
      <link href="/2018/08/02/Hexo-%E6%8A%98%E8%85%BE%E6%80%BB%E7%BB%93/"/>
      <url>/2018/08/02/Hexo-%E6%8A%98%E8%85%BE%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="MD-格式"><a href="#MD-格式" class="headerlink" title="MD 格式"></a>MD 格式</h1><ul><li>title date 等等 后边要先加空格再写内容<pre><code>categories: tenserflow笔记 这个样子</code></pre></li></ul><a id="more"></a><p>在Next主题中使用思源宋体，使用<a href="http://t.cn/EvapEo9" target="_blank" rel="noopener">把Hexo博客NexT主题文章字体改成思源宋体，通过Adobe Typekit加载</a>文章中的办法实施完成，其中对Hexo主目录的配置文件进行设置过程中，从Next配置文件复制过来的custom_file_path: 信息没有注意缩进进关系，浪费很多时间。</p><pre class="line-numbers language-shell"><code class="language-shell">theme_config:  custom_file_path:    # Default paths: layout/_custom/*    head: source/_data/head.swig    #header: source/_data/header.swig    #sidebar: source/_data/sidebar.swig    # Default path: source/css/_variables/custom.styl    variables: source/_data/variables.styl    # Default path: source/css/_mixins/custom.styl    #mixins: source/_data/mixins.styl    # Default path: source/css/_custom/custom.styl    #styles: source/_data/styles.styl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下作为备份引用：</p><blockquote><p>我想把文章字体改成思源宋体，NexT主题配置的设置字体中有通过_config.yml设置文件中的选项实现文章字体修改的：</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">font:  enable: true  # 外链字体库地址，例如 //fonts.googleapis.com (默认值)  host:  # 文章字体  posts:    external: true    family:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>但这个前提是要把外链字体库地址写好。但是Google Fonts尚未托管思源宋体，直接在这里写就不合适了。网上大家都是通过Adobe Typekit来实现思源宋体加载的，在Hexo中使用Typekit来加载思源宋体有相关文章涉及，如<a href="https://kylindc.github.io/post/37189/" target="_blank" rel="noopener">Hexo 折腾手记其一：使用 Adobe Typekit 云字体 (Web Font)</a>，不过在NexT主题中如何加载，似乎没有针对性的文章（Google搜索“Hexo NexT Typekit”没有得到针对性的结果），我自己稍微探索一下搞定了。<br>获取Adobe Typekit代码<br>如何获取Adobe Typekit代码，上述文章已有提及，这里注意注册Adobe ID时选择国家/地区时必须选择中国（China）以外的选项，<a href="https://helpx.adobe.com/typekit/using/typekit-unavailable.html" target="_blank" rel="noopener">因为根据Adobe的限制，Typekit在中国不能使用</a>，所以国家选择中国的Adobe ID进入Adobe Typekit会显示Access Denied。<br>进入<a href="https://typekit.com/" target="_blank" rel="noopener">Adobe Typekit</a>，创建Kit，找到Source Han Serif Simplified Chinese字体加入Kit中。加入时会提示要把Kit转化为使用Dynamic Link，应该是因为东亚字体太大，需要动态加载，这也是好事，这样就只动态加载需要的字形，而不用下载整个动辄几十M的字体。注意要点Publish，然后切换到Embed Code，可以看到相应的嵌入代码：</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://use.typekit.net/&lt;Your_kitId>.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">try</span><span class="token punctuation">{</span>Typekit<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token keyword">async</span><span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中<Your_kitId>为自己生成的Kit的ID。</p><blockquote><p>利用Data Files功能，加入Adobe Typekit代码及做文章字体设置<br>接下来就是让NexT主题加载Typekit的代码，并设置文章正文字体了。网上关于NexT主题改字体的非官方文章通常有一段时日了，除了改_config.yml之外，很多都提到直接修改themes/next主题目录内的文件来实现，但这样在主题更新时要处理一些文件冲突就比较麻烦。<br>其实NexT已经提供了Data Files功能，6.0.2版起更实现了通过此功能把主题的自定义设置文件可以都放在主题目录以外。所以可以方便地使用这个功能，把我们需要的代码放置在Hexo主目录下的设置文件_config.yml以及source/_data目录下的自定义设置文件里，这样可以直接与其他Hexo源文件一起用git同步，在以后更新NexT主题的文件时也不用担心主题设置丢失。<br>具体到加思源宋体这个问题，我们要放的有两个，一个是把上述Typekit代码放到站点的<head>里，要利用对head的自定义设置来实现；一个是指定文章正文使用思源宋体，这个要通过指定自定义的css variables来实现。这里我首先使用上述Data Files功能提到的Hexo-Way，将指定相关自定义文件路径的主题配置写在Hexo的_config.yml文件中：</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">theme: nexttheme_config:  custom_file_path:    # Default paths: layout/_custom/*    head: source/_data/head.swig    #header: source/_data/header.swig    #sidebar: source/_data/sidebar.swig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">    # Default path: source/css/_variables/custom.styl    variables: source/_data/variables.styl    # Default path: source/css/_mixins/custom.styl    #mixins: source/_data/mixins.styl    # Default path: source/css/_custom/custom.styl    #styles: source/_data/styles.styl <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>把themes/next/_config.yml中的custom_file_path内容复制到Hexo主目录的_config.yml文件中，并把上述head和variables两个文件设置的注释取消，使其起效。<br>然后创建source/_data目录，新建head.swig和variables.styl两个文件。<br>head.swig文件中写入上述获取到的Typekit代码：</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://use.typekit.net/&lt;Your_kitId>.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">try</span><span class="token punctuation">{</span>Typekit<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token keyword">async</span><span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>variables.styl文件中则写入$font-family-posts变量设置：<br>variables.styl文件写入：</p><pre class="line-numbers language-shell"><code class="language-shell">$font-family-posts        = "Noto Serif CJK SC", "Source Han Serif SC", "Source Han Serif", source-han-serif-sc, "宋体", serif, $font-family-base<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>同时可以把font-family-posts修改为headings、global、logo</strong><br>这个字体的写法参考了<a href="https://sspai.com/post/38705" target="_blank" rel="noopener">思源宋体，如何评价，以及如何正确使用</a>。上述写法把_config.yml文件里面的文章正文字体设置忽略掉，只用全局的$font-family-base做fallback。<br>完成以上设置，hexo clean，hexo g，hexo d后，文章正文就用上了思源宋体。</p>]]></content>
      
      
      <categories>
          
          <category> 经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K2P路由器刷机注意点</title>
      <link href="/2018/08/02/K2P%E8%B7%AF%E7%94%B1%E5%99%A8%E5%88%B7%E6%9C%BA%E6%B3%A8%E6%84%8F%E7%82%B9/"/>
      <url>/2018/08/02/K2P%E8%B7%AF%E7%94%B1%E5%99%A8%E5%88%B7%E6%9C%BA%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="仅仅针对B1版本固件"><a href="#仅仅针对B1版本固件" class="headerlink" title="仅仅针对B1版本固件"></a>仅仅针对B1版本固件</h1><ul><li>设置电脑网络 使用IP地址192.168.2.2 子网掩码 255.255.255.0 默认网关 192.168.2.1</li><li>路由器使用LAN口连接电脑，电脑不要连接无线网络</li><li>路由器电源拔掉 → 按住reset不动 → 插上电源 → 坚持十秒 → 松手</li><li>浏览器端输入 <a href="http://192.168.2.1，进入k2p的CFE模式。不要动。" target="_blank" rel="noopener">http://192.168.2.1，进入k2p的CFE模式。不要动。</a></li><li>电脑关闭网络防火墙</li><li>打开tftp64.exe（.bin文件复制到软件根目录下）</li><li>在浏览器输入：</li></ul><p><a href="http://192.168.2.1/do.htm?cmd=flash+-noheader+192.168.2.2:k2p_bcm_v1*.bin+flash0.trx" target="_blank" rel="noopener">http://192.168.2.1/do.htm?cmd=flash+-noheader+192.168.2.2:k2p_bcm_v1*.bin+flash0.trx</a></p><ul><li>tftp会自动跳出进度条</li><li>完成后再CFE模式页面使用REBOOT重启即可</li></ul>]]></content>
      
      
      <categories>
          
          <category> 经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析常用的 Python 库</title>
      <link href="/2018/07/02/%E7%AC%AC%E4%B8%89%E6%96%B9%20Python%20%E5%BA%93/"/>
      <url>/2018/07/02/%E7%AC%AC%E4%B8%89%E6%96%B9%20Python%20%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="数据分析常用的-Python-库"><a href="#数据分析常用的-Python-库" class="headerlink" title="数据分析常用的 Python 库"></a>数据分析常用的 Python 库</h1><blockquote><p>主要内容来源</p><ul><li>[<a href="https://developers.google.com/machine-learning/crash-course/，Google" target="_blank" rel="noopener">https://developers.google.com/machine-learning/crash-course/，Google</a> 机器学习速成课程]</li><li>利用 Python 进行数据分析，第2版，WestlifeMcKinney著（O’Reilly）</li></ul></blockquote><a id="more"></a><h2 id="Matplotlib-适合数据可视化"><a href="#Matplotlib-适合数据可视化" class="headerlink" title="Matplotlib (适合数据可视化)"></a>Matplotlib (适合数据可视化)</h2><ul><li><a href="#pyplot 模块">pyplot</a>  模块 </li><li><a href="#cm (colormap) 模块">cm</a> 模块</li><li>[gridspec](#gridspec 模块) 模块<h2 id="Seaborn-（适合热图）"><a href="#Seaborn-（适合热图）" class="headerlink" title="Seaborn （适合热图）"></a>Seaborn （适合热图）</h2></li><li>[heatmap](#heatmap 模块) 模块<h2 id="Pandas-（适合数据处理）"><a href="#Pandas-（适合数据处理）" class="headerlink" title="Pandas （适合数据处理）"></a>Pandas （适合数据处理）</h2></li><li><a href="#DataFrame">DataFrame</a> 类<h2 id="Numpy-（适合低阶数学运算）"><a href="#Numpy-（适合低阶数学运算）" class="headerlink" title="Numpy （适合低阶数学运算）"></a>Numpy （适合低阶数学运算）</h2></li><li>[linspace](#linspace 函数) 函数</li><li>[random](#random 函数) 函数</li><li>[array](#array 函数) 函数</li><li>[arange](#arange 函数) 函数<h2 id="scikit-learn-（适合评估指标）"><a href="#scikit-learn-（适合评估指标）" class="headerlink" title="scikit-learn （适合评估指标）"></a>scikit-learn （适合评估指标）</h2></li><li>[metrics](#metrics 模块) 模块</li></ul><h2 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a>Matplotlib</h2><h3 id="pyplot-模块"><a href="#pyplot-模块" class="headerlink" title="pyplot 模块"></a>pyplot 模块</h3><h5 id="matplotlib-pyplot"><a href="#matplotlib-pyplot" class="headerlink" title="matplotlib.pyplot"></a>matplotlib.pyplot</h5><p>可以提供类似 MATLAB 的绘图框架，通常引入方式是：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>简单图形绘制：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdata <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>dataarray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://upload-images.jianshu.io/upload_images/7178691-7032e333a6ecdd37.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图9-1 简单的线图"><br>虽然seaborn这样的库和pandas的内置绘图函数能够处理许多普通的绘图任务，但如果需要自定义一些高级功能的话就必须学习matplotlib API。</p><h5 id="Figure和Subplot"><a href="#Figure和Subplot" class="headerlink" title="Figure和Subplot"></a>Figure和Subplot</h5><p>matplotlib的图像都位于Figure对象中。可以用plt.figure创建一个新的Figure。<br>如果用的是IPython，这时会弹出一个空窗口，但在Jupyter中，必须再输入更多命令才能看到。plt.figure有一些选项，特别是figsize，它用于确保当图片保存到磁盘时具有一定的大小和纵横比。</p><p>不能通过空Figure绘图。必须用add_subplot创建一个或多个subplot才行：</p><pre class="line-numbers language-python"><code class="language-python">fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>ax1 <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>ax2 <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>ax3 <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'k--'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://upload-images.jianshu.io/upload_images/7178691-7bcbd5e56fdbbd92.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图9-3 绘制一次之后的图像"></p><p>“k–”是一个线型选项，用于告诉matplotlib绘制黑色虚线图。<br><em>在matplotlib的文档中找到各种图表类型。</em></p><h3 id="cm-colormap-模块"><a href="#cm-colormap-模块" class="headerlink" title="cm (colormap) 模块"></a>cm (colormap) 模块</h3><h5 id="matplotlib-cm"><a href="#matplotlib-cm" class="headerlink" title="matplotlib.cm"></a>matplotlib.cm</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltx <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">)</span>y <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#使用列表解析</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>c<span class="token operator">=</span>y<span class="token punctuation">,</span>cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>gist_rainbow<span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#cm即colormap，c=y表示颜色随y变化</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'number'</span><span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'number square'</span><span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'figure 1'</span><span class="token punctuation">,</span>fontsize <span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1100</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1100000</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown%20Photos/Figure_1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/375" alt="image"></p><h3 id="GridSpec-模块"><a href="#GridSpec-模块" class="headerlink" title="GridSpec 模块"></a>GridSpec 模块</h3><h5 id="matplotlib-gridspec"><a href="#matplotlib-gridspec" class="headerlink" title="matplotlib.gridspec"></a>matplotlib.gridspec</h5><p>用GridSpec命令来控制子图的位置和大小。<br>例如可以用其画非对称的子图：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>gridspec <span class="token keyword">import</span> GridSpecfig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>gs <span class="token operator">=</span> GridSpec<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>ax1 <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span>gs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ax2 <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span>gs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ax3 <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span>gs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ax4 <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span>gs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ax5 <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span>gs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown%20Photos/Figure_2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/375" alt="image"></p><p><em>在matplotlib的文档中找到各种图表类型</em></p><h2 id="Seaborn"><a href="#Seaborn" class="headerlink" title="Seaborn"></a>Seaborn</h2><h3 id="heatmap-模块"><a href="#heatmap-模块" class="headerlink" title="heatmap 模块"></a>heatmap 模块</h3><h5 id="seaborn-heatmap"><a href="#seaborn-heatmap" class="headerlink" title="seaborn.heatmap"></a>seaborn.heatmap</h5><p><em>用来将矩形数据绘制为颜色编码矩阵。</em><br>matplotlib实际上是一种比较低级的工具。要绘制一张图表，组装一些基本组件就行：数据展示（即图表类型：线型图、柱状图、盒形图、散布图、等值线图等）、图例、标题、刻度标签以及其他注解型信息。</p><p>在pandas中，有多列数据，还有行和列标签。pandas自身就有内置的方法，用于简化从DataFrame和Series绘制图形。另一个库seaborn（<a href="https://seaborn.pydata.org/），简化了许多常见可视类型的创建。" target="_blank" rel="noopener">https://seaborn.pydata.org/），简化了许多常见可视类型的创建。</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltdata <span class="token operator">=</span> sns<span class="token punctuation">.</span>load_dataset<span class="token punctuation">(</span><span class="token string">"flights"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># pivot     :DataFrame单列数据转化为二维阵</span><span class="token comment" spellcheck="true"># 要求指定两个属性唯一确定一个参数值，否则会报错</span><span class="token comment" spellcheck="true"># (x,y) => point</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>pivot<span class="token punctuation">(</span><span class="token string">"month"</span><span class="token punctuation">,</span> <span class="token string">"year"</span><span class="token punctuation">,</span> <span class="token string">"passengers"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># annot     :显示数值</span><span class="token comment" spellcheck="true"># fmt       :整数</span>ax <span class="token operator">=</span> sns<span class="token punctuation">.</span>heatmap<span class="token punctuation">(</span>data<span class="token punctuation">,</span> annot<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> fmt<span class="token operator">=</span><span class="token string">"d"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown%20Photos/Figure_3.png" alt="Figure_3"></p><h2 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h2><p>pandas经常和其它工具一同使用，如数值计算工具NumPy和SciPy，分析库statsmodels和scikit-learn，和数据可视化库matplotlib。pandas是基于NumPy数组构建的，特别是基于数组的函数和不使用for循环的数据处理。</p><p>虽然pandas采用了大量的NumPy编码风格，但二者最大的不同是pandas是专门为处理表格和混杂数据设计的。而NumPy更适合处理统一的数值数组数据。</p><h4 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h4><p>Series是一种类似于一维数组的对象，它由一组数据（各种NumPy数据类型）以及一组与之相关的数据标签（即索引）组成。仅由一组数据即可产生最简单的Series：</p><h4 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h4><p>DataFrame是一个表格型的数据结构，它含有一组有序的列，每列可以是不同的值类型（数值、字符串、布尔值等）。DataFrame既有行索引也有列索引，它可以被看做由Series组成的字典（共用同一个索引）。DataFrame中的数据是以一个或多个二维块存放的（而不是列表、字典或别的一维数据结构）。</p><blockquote><p>虽然DataFrame是以二维结构保存数据的，但仍然可以轻松地将其表示为更高维度的数据（层次化索引的表格型结构，这是pandas中许多高级数据处理功能的关键要素）。</p></blockquote><h2 id="NumPy"><a href="#NumPy" class="headerlink" title="NumPy"></a>NumPy</h2><h3 id="linspace-函数"><a href="#linspace-函数" class="headerlink" title="linspace 函数"></a>linspace 函数</h3><h5 id="numpy-linspace"><a href="#numpy-linspace" class="headerlink" title="numpy.linspace"></a>numpy.linspace</h5><p>用于创建一个一维数组，并且是等差数列构成的一维数组。<br>Examples</p><pre class="line-numbers language-python"><code class="language-python">np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>    array<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">.</span>  <span class="token punctuation">,</span>  <span class="token number">2.25</span><span class="token punctuation">,</span>  <span class="token number">2.5</span> <span class="token punctuation">,</span>  <span class="token number">2.75</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">.</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> endpoint<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    array<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">.</span> <span class="token punctuation">,</span>  <span class="token number">2.2</span><span class="token punctuation">,</span>  <span class="token number">2.4</span><span class="token punctuation">,</span>  <span class="token number">2.6</span><span class="token punctuation">,</span>  <span class="token number">2.8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> retstep<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">.</span>  <span class="token punctuation">,</span>  <span class="token number">2.25</span><span class="token punctuation">,</span>  <span class="token number">2.5</span> <span class="token punctuation">,</span>  <span class="token number">2.75</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">.</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>图形：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npN <span class="token operator">=</span> <span class="token number">8</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>N<span class="token punctuation">)</span>x1 <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> N<span class="token punctuation">,</span> endpoint<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>x2 <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> N<span class="token punctuation">,</span> endpoint<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x2<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown%20Photos/Figure_4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/275" alt="Figure_4"></p><h3 id="random-函数"><a href="#random-函数" class="headerlink" title="random 函数"></a>random 函数</h3><h5 id="numpy-random-random"><a href="#numpy-random-random" class="headerlink" title="numpy.random.random"></a>numpy.random.random</h5><h3 id="array-函数"><a href="#array-函数" class="headerlink" title="array 函数"></a>array 函数</h3><h5 id="numpy-array"><a href="#numpy-array" class="headerlink" title="numpy.array"></a>numpy.array</h5><h3 id="arange-函数"><a href="#arange-函数" class="headerlink" title="arange 函数"></a>arange 函数</h3><h5 id="numpy-arange"><a href="#numpy-arange" class="headerlink" title="numpy.arange"></a>numpy.arange</h5><h2 id="scikit-learn"><a href="#scikit-learn" class="headerlink" title="scikit-learn"></a>scikit-learn</h2><h3 id="metrics-模块"><a href="#metrics-模块" class="headerlink" title="metrics 模块"></a>metrics 模块</h3><p><a href="http://scikit-learn.org/stable/" target="_blank" rel="noopener">http://scikit-learn.org/stable/</a></p><p><a href="http://scikit-learn.org/stable/modules/classes.html#module-sklearn.metrics" target="_blank" rel="noopener">http://scikit-learn.org/stable/modules/classes.html#module-sklearn.metrics</a></p><p>Scikit-learn的基本功能主要被分为六大部分：分类，回归，聚类，数据降维，模型选择和数据预处理。</p><blockquote><p><strong>分类</strong>是指识别给定对象的所属类别，属于监督学习的范畴，最常见的应用场景包括垃圾邮件检测和图像识别等。目前Scikit-learn已经实现的算法包括：支持向量机（SVM），最近邻，逻辑回归，随机森林，决策树以及多层感知器（MLP）神经网络等等。</p><p>需要指出的是，由于Scikit-learn本身不支持深度学习，也不支持GPU加速，因此这里对于MLP的实现并不适合于处理大规模问题。有相关需求的读者可以查看同样对Python有良好支持的Keras和Theano等框架。</p><p><strong>回归</strong>是指预测与给定对象相关联的连续值属性，最常见的应用场景包括预测药物反应和预测股票价格等。目前Scikit-learn已经实现的算法包括：支持向量回归（SVR），脊回归，Lasso回归，弹性网络（Elastic Net），最小角回归（LARS ），贝叶斯回归，以及各种不同的鲁棒回归算法等。可以看到，这里实现的回归算法几乎涵盖了所有开发者的需求范围，而且更重要的是，Scikit-learn还针对每种算法都提供了简单明了的用例参考。</p><p><strong>聚类</strong>是指自动识别具有相似属性的给定对象，并将其分组为集合，属于无监督学习的范畴，最常见的应用场景包括顾客细分和试验结果分组。目前Scikit-learn已经实现的算法包括：K-均值聚类，谱聚类，均值偏移，分层聚类，DBSCAN聚类等。</p><p><strong>数据降维</strong>是指使用主成分分析（PCA）、非负矩阵分解（NMF）或特征选择等降维技术来减少要考虑的随机变量的个数，其主要应用场景包括可视化处理和效率提升。</p><p><strong>模型选择</strong>是指对于给定参数和模型的比较、验证和选择，其主要目的是通过参数调整来提升精度。目前Scikit-learn实现的模块包括：格点搜索，交叉验证和各种针对预测误差评估的度量函数。</p><p><strong>数据预处理</strong>是指数据的特征提取和归一化，是机器学习过程中的第一个也是最重要的一个环节。这里归一化是指将输入数据转换为具有零均值和单位权方差的新变量，但因为大多数时候都做不到精确等于零，因此会设置一个可接受的范围，一般都要求落在0-1之间。而特征提取是指将文本或图像数据转换为可用于机器学习的数字变量。</p><p>需要特别注意的是，这里的特征提取与上文在数据降维中提到的特征选择非常不同。特征选择是指通过去除不变、协变或其他统计上不重要的特征量来改进机器学习的一种方法。</p><p>总结来说，Scikit-learn实现了一整套用于数据降维，模型选择，特征提取和归一化的完整算法/模块，虽然缺少按步骤操作的参考教程，但Scikit-learn针对每个算法和模块都提供了丰富的参考样例和详细的说明文档。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LearnRust</title>
      <link href="/2018/06/02/learnRust/"/>
      <url>/2018/06/02/learnRust/</url>
      
        <content type="html"><![CDATA[<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>如果一个函数体以一个没有分号的表达式结束，那就是函数的返回值。 实际上，任何由花括号包围的块都可以用作表达式</p><pre class="line-numbers language-Rust"><code class="language-Rust">{    println!("evaluating cos x");    x.cos()}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown语法</title>
      <link href="/2018/04/09/MarkDown%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/04/09/MarkDown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h4 id="阅读全文截断"><a href="#阅读全文截断" class="headerlink" title="阅读全文截断"></a>阅读全文截断</h4><p><em>*<code>&lt;!--more--&gt;</code></em><!---->*<br><code>test</code></p><a id="more"></a> <p><code>不是Markdown语法</code></p><h4 id="图片居中"><a href="#图片居中" class="headerlink" title="图片居中"></a>图片居中</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span>center</span><span class="token punctuation">></span></span>![]()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>test</code></p><div align=center>![image](https://raw.githubusercontent.com/MajorTee/markdp/master/Jietu20180408-212354.jpg)</div>  `区别`![image](https://raw.githubusercontent.com/MajorTee/markdp/master/Jietu20180408-212354.jpg)]]></content>
      
      
      <categories>
          
          <category> 语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tenserflow0.1</title>
      <link href="/2018/04/08/tenserflow0-1/"/>
      <url>/2018/04/08/tenserflow0-1/</url>
      
        <content type="html"><![CDATA[<h1 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h1><h2 id="CS-20SI"><a href="#CS-20SI" class="headerlink" title="CS 20SI"></a>CS 20SI</h2><h3 id="Tensorflow-for-Deep-Learning-Research"><a href="#Tensorflow-for-Deep-Learning-Research" class="headerlink" title="Tensorflow for Deep Learning Research"></a>Tensorflow for Deep Learning Research</h3><h3 id="lecture-1"><a href="#lecture-1" class="headerlink" title="lecture 1"></a>lecture 1</h3><p><code>tenserflow基于软件库来创建表、进行数值运算</code></p><h4 id="深度学习库"><a href="#深度学习库" class="headerlink" title="深度学习库"></a>深度学习库</h4><ol><li>pythonAPI</li><li>配置在多个GPU CPU处理 </li><li>安卓 iOS</li><li>Checkpoints 保存模型状态</li><li>自动差分 AD </li><li>反向传播层 向前向后的算法</li></ol><a id="more"></a> <h5 id="神经网络的例子"><a href="#神经网络的例子" class="headerlink" title="神经网络的例子"></a>神经网络的例子</h5><h6 id="Neture-Style-Translation"><a href="#Neture-Style-Translation" class="headerlink" title="Neture Style Translation"></a>Neture Style Translation</h6><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/Jietu20180408-212354.jpg" alt="image"></p><h6 id="生成手写字体-关于stack-GAN的论文）"><a href="#生成手写字体-关于stack-GAN的论文）" class="headerlink" title="生成手写字体 (关于stack GAN的论文）"></a>生成手写字体 (关于stack GAN的论文）</h6><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown%20Photos/Jietu20180408-213236.jpg" alt="image"></p><h3 id="相关书籍："><a href="#相关书籍：" class="headerlink" title="相关书籍："></a>相关书籍：</h3><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown%20Photos/Jietu20180408-210812.jpg" alt="image"></p><h2 id="tenserflow-运行方式"><a href="#tenserflow-运行方式" class="headerlink" title="tenserflow 运行方式"></a>tenserflow 运行方式</h2><h3 id="计算图："><a href="#计算图：" class="headerlink" title="计算图："></a>计算图：</h3><p>tenser – n维的矩阵</p><h4 id="计算图的产生-–-使用tenseroard使计算可视化"><a href="#计算图的产生-–-使用tenseroard使计算可视化" class="headerlink" title="计算图的产生 – 使用tenseroard使计算可视化"></a>计算图的产生 – 使用tenseroard使计算可视化</h4><p>eg: </p><hr><pre class="line-numbers language-python"><code class="language-python">    <span class="token keyword">import</span> terserflow <span class="token keyword">as</span> tf     a <span class="token operator">=</span> tf<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出：操作符，变量，常量<br><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown%20Photos/Jietu20180408-211848.jpg" alt="image"> </p><h4 id="session-运行tenser并获得值"><a href="#session-运行tenser并获得值" class="headerlink" title="session 运行tenser并获得值"></a>session 运行tenser并获得值</h4><pre class="line-numbers language-python"><code class="language-python">sess <span class="token operator">=</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>a<span class="token punctuation">)</span>sess<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>github 有sess.run() 函数代码，注释清晰</code></p><h6 id="不用close的方式"><a href="#不用close的方式" class="headerlink" title="不用close的方式"></a><code>不用close的方式</code></h6><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># with clause takes care of sess.close()</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>    <span class="token keyword">print</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="其他计算图"><a href="#其他计算图" class="headerlink" title="其他计算图"></a>其他计算图</h5><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">2</span>y <span class="token operator">=</span> <span class="token number">3</span>op1 <span class="token operator">=</span> tf<span class="token punctuation">.</span>add<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>op2 <span class="token operator">=</span> tf<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>op3 <span class="token operator">=</span> tf<span class="token punctuation">.</span>pow<span class="token punctuation">(</span>op2<span class="token punctuation">,</span> op1<span class="token punctuation">)</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>    op3 <span class="token operator">=</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>op3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown%20Photos/Jietu20180408-215739.jpg" alt="image"><br><code>Mul已经弃用</code></p><p>首先在Pow结点，依次根据需要去找 Multiply 结点和 Add 结点<br><code>tenser不会预先计算Multiply和Add之所以这样是因为并非所有节点都需要计算，节省</code><br><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown%20Photos/Jietu20180408-220540.jpg" alt="image"></p><h6 id="更多结点图"><a href="#更多结点图" class="headerlink" title="更多结点图"></a>更多结点图</h6><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">2</span>y <span class="token operator">=</span> <span class="token number">3</span>op1 <span class="token operator">=</span> tf<span class="token punctuation">.</span>add<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>op2 <span class="token operator">=</span> tf<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>useless <span class="token operator">=</span> tf<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span>x<span class="token punctuation">,</span> op1<span class="token punctuation">)</span>op3 <span class="token operator">=</span> tf<span class="token punctuation">.</span>pow<span class="token punctuation">(</span>op2<span class="token punctuation">,</span> op1<span class="token punctuation">)</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>    op3 <span class="token operator">=</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>op3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>反向依赖传播</code></p><p>session把要计算的点送到fetches list</p><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown%20Photos/Jietu20180408-221316.jpg" alt="image"></p><p>同时可以指定某个节点到某些GPU，CPU运行（分布）<br><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown%20Photos/Jietu20180408-221729.jpg" alt="image"><br>当运行多个计算图时，每个都有自己的session，都需要获取资源，每个图的换金相互独立，不能传递数据或者信息，除非到Numpy层</p><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown%20Photos/Jietu20180408-221912.jpg" alt="image"></p><h4 id="tf-Graph"><a href="#tf-Graph" class="headerlink" title="tf.Graph()"></a>tf.Graph()</h4><p><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown%20Photos/Jietu20180408-223117.jpg" alt="image"></p><p><code>sess = tf.Session(graph=g) 中的参数即表明这个session在这个Graph中运算</code></p><p><code>g = tf.get_default_graph()</code><br><code>可以得到默认图环境</code></p><p><strong>不要混用默认图和自己定义的图</strong><br><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown%20Photos/%E6%B7%B7%E7%94%A8%E5%9B%BE.jpg" alt="image"></p><p><code>更好的办法</code><br><img src="https://raw.githubusercontent.com/MajorTee/markdp/master/Markdown%20Photos/%E6%B7%B7%E7%94%A8.jpg" alt="image"></p><p>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​         </p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tenserflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令行发布</title>
      <link href="/2018/04/01/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%91%E5%B8%83/"/>
      <url>/2018/04/01/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%91%E5%B8%83/</url>
      
        <content type="html"><![CDATA[<h4 id="Hexo-发布命令"><a href="#Hexo-发布命令" class="headerlink" title="Hexo 发布命令"></a>Hexo 发布命令</h4><ol><li>hexo clean  </li><li>hexo generate  </li><li>hexo deploy  </li></ol><blockquote><p>首先cd到博客目录<br>hexo d -g</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
